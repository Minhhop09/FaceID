import pyodbc
import os
import cv2
import time
from encode_save import encode_and_save  # h√†m encode v√† l∆∞u FaceID

# ----------------------------
# K·∫øt n·ªëi CSDL
# ----------------------------
def get_db_connection(server_name="MINHHOP\\SQLEXPRESS", database_name="FaceID"):
    conn_str = f"Driver={{SQL Server}};Server={server_name};Database={database_name};Trusted_Connection=yes;"
    return pyodbc.connect(conn_str)

# ----------------------------
# TH√äM NH√ÇN VI√äN
# ----------------------------
def add_employee():
    conn = get_db_connection()
    cursor = conn.cursor()

    # Nh·∫≠p th√¥ng tin
    ho_ten = input("Nh·∫≠p t√™n nh√¢n vi√™n: ").strip()
    email = input("Nh·∫≠p email: ").strip()
    ma_pb = input("Nh·∫≠p m√£ ph√≤ng ban: ").strip()

    # T·∫°o MaNV t·ª± ƒë·ªông: NV + MaPB + s·ªë th·ª© t·ª±
    cursor.execute("SELECT COUNT(*) FROM NhanVien WHERE MaNV LIKE ?", f"NV{ma_pb}%")
    count = cursor.fetchone()[0] + 1
    ma_nv = f"NV{ma_pb}{count}"

    # Th√™m nh√¢n vi√™n v√†o DB
    cursor.execute("INSERT INTO NhanVien (MaNV, HoTen, Email, MaPB) VALUES (?, ?, ?, ?)", ma_nv, ho_ten, email, ma_pb)
    conn.commit()
    conn.close()
    print(f"‚úÖ Th√™m nh√¢n vi√™n th√†nh c√¥ng, MaNV = {ma_nv}")

    # Ch·ª•p ·∫£nh v√† l∆∞u FaceID
    capture_photo_and_save(ma_nv)

# ----------------------------
# CH·ª§P ·∫¢NH V√Ä L∆ØU FACEID
# ----------------------------
def capture_photo_and_save(ma_nv):
    folder = "photos"
    if not os.path.exists(folder):
        os.makedirs(folder)

    cap = cv2.VideoCapture(0)
    cv2.namedWindow("Capture Photo")
    print("üì∑ Nh·∫•n 'c' ƒë·ªÉ ch·ª•p, 'q' ƒë·ªÉ tho√°t.")

    while True:
        ret, frame = cap.read()
        if not ret:
            continue
        cv2.imshow("Capture Photo", frame)
        key = cv2.waitKey(1) & 0xFF

        if key == ord("c"):
            timestamp = int(time.time())
            filename = os.path.join(folder, f"person{ma_nv}_{timestamp}.jpg")
            cv2.imwrite(filename, frame)
            print(f"‚úÖ ·∫¢nh ƒë√£ l∆∞u: {filename}")

            # Encode v√† l∆∞u v√†o CSDL
            try:
                conn = get_db_connection()
                encode_and_save(ma_nv, filename, conn)
            except Exception as e:
                print(f"‚ùå L·ªói khi l∆∞u v√†o CSDL: {e}")
            finally:
                conn.close()
            break

        elif key == ord("q"):
            print("Tho√°t m√† kh√¥ng l∆∞u ·∫£nh.")
            break

    cap.release()
    cv2.destroyAllWindows()

# ----------------------------
# X√ìA NH√ÇN VI√äN
# ----------------------------
def delete_employee():
    ten_nv = input("Nh·∫≠p t√™n nh√¢n vi√™n c·∫ßn x√≥a: ").strip()
    if not ten_nv:
        print("‚ùå Ch∆∞a nh·∫≠p t√™n.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT MaNV, HoTen, Email, MaPB FROM NhanVien WHERE HoTen LIKE ?", f"%{ten_nv}%")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n c√≥ t√™n '{ten_nv}'")
        return

    # Ch·ªçn nh√¢n vi√™n n·∫øu tr√πng
    if len(rows) > 1:
        print("‚ö†Ô∏è C√≥ nhi·ªÅu nh√¢n vi√™n tr√πng t√™n:")
        for i, emp in enumerate(rows, start=1):
            print(f"{i}. MaNV: {emp.MaNV}, T√™n: {emp.HoTen}, Email: {emp.Email}, Ph√≤ng ban: {emp.MaPB}")
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± nh√¢n vi√™n mu·ªën x√≥a: ").strip()
        try:
            idx = int(choice) - 1
            selected_emp = rows[idx]
        except:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
            return
    else:
        selected_emp = rows[0]

    print(f"B·∫°n s·∫Øp x√≥a nh√¢n vi√™n: {selected_emp.HoTen} ({selected_emp.MaNV})")
    confirm = input("X√°c nh·∫≠n x√≥a? (y/n): ").lower()
    if confirm != 'y':
        print("‚ùå H·ªßy thao t√°c.")
        return

    # X√≥a ·∫£nh
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT DuongDanAnh FROM KhuonMat WHERE MaNV=?", selected_emp.MaNV)
    photos = cursor.fetchall()
    for p in photos:
        path = p.DuongDanAnh
        if os.path.exists(path):
            os.remove(path)
            print(f"‚úÖ ƒê√£ x√≥a file ·∫£nh: {path}")

    # X√≥a d·ªØ li·ªáu khu√¥n m·∫∑t v√† nh√¢n vi√™n
    cursor.execute("DELETE FROM KhuonMat WHERE MaNV=?", selected_emp.MaNV)
    cursor.execute("DELETE FROM NhanVien WHERE MaNV=?", selected_emp.MaNV)
    conn.commit()
    conn.close()
    print(f"‚úÖ ƒê√£ x√≥a nh√¢n vi√™n {selected_emp.MaNV} v√† d·ªØ li·ªáu li√™n quan.")

# ----------------------------
# CH·ªàNH S·ª¨A NH√ÇN VI√äN
# ----------------------------
def edit_employee():
    keyword = input("Nh·∫≠p t√™n ho·∫∑c MaNV nh√¢n vi√™n mu·ªën ch·ªânh s·ª≠a: ").strip()
    if not keyword:
        print("‚ùå Ch∆∞a nh·∫≠p th√¥ng tin.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT MaNV, HoTen, Email, MaPB FROM NhanVien WHERE HoTen LIKE ? OR MaNV LIKE ?", f"%{keyword}%", f"%{keyword}%")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n '{keyword}'")
        return

    # Ch·ªçn nh√¢n vi√™n n·∫øu nhi·ªÅu
    if len(rows) > 1:
        print("‚ö†Ô∏è C√≥ nhi·ªÅu nh√¢n vi√™n tr√πng:")
        for i, emp in enumerate(rows, start=1):
            print(f"{i}. MaNV: {emp.MaNV}, T√™n: {emp.HoTen}, Email: {emp.Email}, Ph√≤ng ban: {emp.MaPB}")
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± nh√¢n vi√™n mu·ªën ch·ªânh s·ª≠a: ").strip()
        try:
            idx = int(choice) - 1
            selected_emp = rows[idx]
        except:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
            return
    else:
        selected_emp = rows[0]

    print("\nTh√¥ng tin hi·ªán t·∫°i:")
    print(f"T√™n: {selected_emp.HoTen}")
    print(f"Email: {selected_emp.Email}")
    print(f"Ph√≤ng ban: {selected_emp.MaPB}")

    # Nh·∫≠p th√¥ng tin m·ªõi
    new_name = input("T√™n m·ªõi (ƒë·ªÉ tr·ªëng gi·ªØ nguy√™n): ").strip()
    new_email = input("Email m·ªõi (ƒë·ªÉ tr·ªëng gi·ªØ nguy√™n): ").strip()
    new_mapb = input("M√£ ph√≤ng ban m·ªõi (ƒë·ªÉ tr·ªëng gi·ªØ nguy√™n): ").strip()

    confirm = input("X√°c nh·∫≠n c·∫≠p nh·∫≠t? (y/n): ").lower()
    if confirm != 'y':
        print("‚ùå H·ªßy thao t√°c.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE NhanVien SET HoTen=?, Email=?, MaPB=? WHERE MaNV=?
    """,
    new_name if new_name else selected_emp.HoTen,
    new_email if new_email else selected_emp.Email,
    new_mapb if new_mapb else selected_emp.MaPB,
    selected_emp.MaNV)
    conn.commit()
    conn.close()
    print(f"‚úÖ C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n {selected_emp.MaNV} th√†nh c√¥ng.")

# ----------------------------
# HI·ªÇN TH·ªä DANH S√ÅCH NH√ÇN VI√äN
# ----------------------------
def list_employees():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT MaNV, HoTen, Email, MaPB FROM NhanVien")
    rows = cursor.fetchall()
    conn.close()
    print("===== DANH S√ÅCH NH√ÇN VI√äN =====")
    for emp in rows:
        print(f"MaNV: {emp.MaNV}, T√™n: {emp.HoTen}, Email: {emp.Email}, Ph√≤ng ban: {emp.MaPB}")
    print("================================")

# ----------------------------
# MENU CH√çNH
# ----------------------------
def main_menu():
    while True:
        print("\n===== QU·∫¢N L√ù NH√ÇN VI√äN =====")
        print("1. Th√™m nh√¢n vi√™n")
        print("2. X√≥a nh√¢n vi√™n")
        print("3. Ch·ªânh s·ª≠a nh√¢n vi√™n")
        print("4. Danh s√°ch nh√¢n vi√™n")
        print("0. Tho√°t")
        choice = input("Ch·ªçn ch·ª©c nƒÉng: ").strip()

        if choice == '1':
            add_employee()
        elif choice == '2':
            delete_employee()
        elif choice == '3':
            edit_employee()
        elif choice == '4':
            list_employees()
        elif choice == '0':
            print("‚úÖ Tho√°t ch∆∞∆°ng tr√¨nh.")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")

if __name__ == "__main__":
    main_menu()
