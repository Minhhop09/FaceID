# ============================================================
# üí∞ Payment Utilities - FaceID System
# ============================================================
import random
import string
import time
import os
from decimal import Decimal, ROUND_HALF_UP
from datetime import datetime, timedelta
# ============================================================
# üßæ PDF Bi√™n Lai Thanh To√°n L∆∞∆°ng (Premium ‚Äì m√†u xanh, QR, m√£ v·∫°ch)
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.units import mm
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer,
    Table, TableStyle, Image, Flowable
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics   # ‚úÖ TH√äM D√íNG N√ÄY
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.graphics.barcode import code128, qr
from reportlab.graphics.shapes import Drawing


# ============================================================
# üì¶ M√£ giao d·ªãch & ph√≠ thanh to√°n
# ============================================================
def generate_txid(prefix="TX"):
    """Sinh m√£ giao d·ªãch ng·∫´u nhi√™n."""
    return prefix + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))


def calc_fee(method: str, amount: Decimal) -> Decimal:
    """T√≠nh ph√≠ giao d·ªãch theo ph∆∞∆°ng th·ª©c thanh to√°n."""
    method = (method or "").lower()

    if method == "cash":
        return Decimal("0")

    if method == "bank":
        # v√≠ d·ª•: 0.1% + 3,300ƒë
        fee = (amount * Decimal("0.001")).quantize(Decimal("1."), rounding=ROUND_HALF_UP) + Decimal("3300")
        return fee

    if method in ("momo", "zalopay"):
        # v√≠ d·ª•: 0.8% (min 2,000ƒë)
        fee = (amount * Decimal("0.008")).quantize(Decimal("1."), rounding=ROUND_HALF_UP)
        return fee if fee >= Decimal("2000") else Decimal("2000")

    return Decimal("0")


# ============================================================
# üß™ Fake Payment Gateway
# ============================================================
def fake_payment_gateway(method: str, amount: Decimal):
    """
    M√¥ ph·ªèng c·ªïng thanh to√°n th·∫≠t.
    - Delay 1 gi√¢y
    - X√°c su·∫•t th√†nh c√¥ng 98%
    """
    time.sleep(1.0)
    if random.random() < 0.98:
        return {"success": True, "txid": generate_txid()}
    return {"success": False, "error": "Fake gateway failure"}


def fake_gateway_charge(method: str, amount: Decimal, account=None, bank=None):
    """
    M√¥ ph·ªèng g·ªçi c·ªïng thanh to√°n chi ti·∫øt.
    - delay 0.8‚Äì1.6s
    - x√°c su·∫•t th√†nh c√¥ng ~97%
    """
    time.sleep(random.uniform(0.8, 1.6))
    success = random.random() < 0.97
    txid = generate_txid(method.upper()[:3] or "TX")
    message = "Thanh to√°n th√†nh c√¥ng." if success else "Giao d·ªãch b·ªã t·ª´ ch·ªëi."
    return {"success": success, "txid": txid, "message": message}


# ============================================================
# üßæ Chu·∫©n h√≥a t√†i kho·∫£n
# ============================================================
def normalize_account(phuong_thuc: str, so_tk: str, ngan_hang: str):
    """
    Chu·∫©n h√≥a/ki·ªÉm tra th√¥ng tin t√†i kho·∫£n theo ph∆∞∆°ng th·ª©c:
    - bank: c·∫ßn s·ªë TK + t√™n NH
    - momo/zalopay: cho ph√©p s·ªë ƒêT (10-11 s·ªë)
    - cash: kh√¥ng b·∫Øt bu·ªôc
    """
    p = (phuong_thuc or "").lower()

    if p == "bank":
        if not so_tk or not ngan_hang:
            raise ValueError("Thi·∫øu s·ªë t√†i kho·∫£n ho·∫∑c t√™n ng√¢n h√†ng.")
        return so_tk.strip(), ngan_hang.strip()

    if p in ("momo", "zalopay"):
        if not so_tk or not so_tk.strip().isdigit() or len(so_tk.strip()) not in (10, 11):
            raise ValueError("V√≠ ƒëi·ªán t·ª≠ y√™u c·∫ßu s·ªë ƒëi·ªán tho·∫°i 10‚Äì11 s·ªë.")
        return so_tk.strip(), p.upper()

    return None, None  # cash


# ============================================================
# üîê OTP Helpers
# ============================================================
def generate_otp(length=6):
    """Sinh m√£ OTP ng·∫´u nhi√™n."""
    return ''.join(random.choices(string.digits, k=length))


def otp_expires_at(minutes=5):
    """Th·ªùi gian h·∫øt h·∫°n OTP."""
    return datetime.utcnow() + timedelta(minutes=minutes)



FONT_PATH = os.path.join(os.getcwd(), "static", "fonts", "DejaVuSans.ttf")
if os.path.exists(FONT_PATH):
    pdfmetrics.registerFont(TTFont("DejaVu", FONT_PATH))
else:
    print("[‚ö†Ô∏è] Kh√¥ng t√¨m th·∫•y font DejaVuSans.ttf ‚Äî ti·∫øng Vi·ªát c√≥ th·ªÉ l·ªói.")


def _draw_watermark(c, doc):
    c.saveState()
    c.setFillColorRGB(0.85, 0.85, 0.85)
    if hasattr(c, "setFillAlpha"):
        c.setFillAlpha(0.15)
    c.translate(doc.width / 2 + doc.leftMargin, doc.height / 2 + doc.bottomMargin)
    c.rotate(30)
    c.setFont("DejaVu", 38)
    c.drawCentredString(0, 0, "FaceID System")
    c.restoreState()


class BarcodeFlowable(Flowable):
    def __init__(self, value, width=80*mm, height=18*mm):
        super().__init__()
        self.value = value
        self.width = width
        self.height = height

    def wrap(self, availW, availH):
        return self.width, self.height

    def draw(self):
        code = code128.Code128(self.value, barHeight=self.height * 0.8, humanReadable=True)
        code.drawOn(self.canv, 0, 0)


# --- IMPORTS (n·∫øu ch∆∞a c√≥ ·ªü ƒë·∫ßu file, ƒë·∫£m b·∫£o c√≥ nh·ªØng import sau)
from reportlab.graphics.barcode import code128, qr
from reportlab.graphics.shapes import Drawing
from reportlab.platypus import Flowable
from reportlab.pdfbase.ttfonts import TTFont
import json
import csv
try:
    import pyodbc
except Exception:
    pyodbc = None  # n·∫øu ch∆∞a c√†i pyodbc, h√†m l∆∞u DB s·∫Ω b√°o l·ªói r√µ r√†ng

# --- ƒê·∫£m b·∫£o font ƒë√£ ƒëƒÉng k√Ω (n·∫øu ch∆∞a)
FONT_PATH = os.path.join(os.getcwd(), "static", "fonts", "DejaVuSans.ttf")
if os.path.exists(FONT_PATH):
    try:
        pdfmetrics.registerFont(TTFont("DejaVu", FONT_PATH))
    except Exception:
        pass

# --- Barcode Flowable gi·ªØ nguy√™n
class BarcodeFlowable(Flowable):
    def __init__(self, value, width=140*mm, height=22*mm):
        super().__init__()
        self.value = value
        self.width = width
        self.height = height

    def wrap(self, availW, availH):
        return self.width, self.height

    def draw(self):
        # V·∫Ω Code128 l·ªõn h∆°n ƒë·ªÉ gi·ªëng ho√° ƒë∆°n ng√¢n h√†ng
        barcode = code128.Code128(self.value, barHeight=self.height * 0.9, humanReadable=True)
        # cƒÉn gi·ªØa: d·ªãch canvas t·ªõi gi·ªØa available width
        x = (self.width - barcode.width) / 2 if hasattr(barcode, "width") else 0
        barcode.drawOn(self.canv, x, 0)


# --- H√†m l∆∞u record: (1) l∆∞u DB b·∫±ng pyodbc (n·∫øu c√≥), (2) fallback CSV
def save_payment_record_db(conn_str, txid, ma_nv, so_tk, ngan_hang, phuong_thuc, amount, fee, ngay):
    """
    L∆∞u v√†o SQL Server (y√™u c·∫ßu pyodbc v√† chu·ªói k·∫øt n·ªëi conn_str).
    T·∫°o s·∫µn b·∫£ng GiaoDichLuong n·∫øu ch∆∞a c√≥:
    CREATE TABLE GiaoDichLuong (
        MaGD NVARCHAR(50) PRIMARY KEY,
        MaNV NVARCHAR(50),
        SoTien DECIMAL(18,2),
        Phi DECIMAL(18,2),
        PhuongThuc NVARCHAR(50),
        SoTK NVARCHAR(100),
        NganHang NVARCHAR(200),
        ThoiGian DATETIME
    );
    """
    if pyodbc is None:
        raise RuntimeError("pyodbc kh√¥ng ƒë∆∞·ª£c c√†i. C√†i b·∫±ng 'pip install pyodbc' n·∫øu mu·ªën l∆∞u v√†o SQL Server.")
    conn = pyodbc.connect(conn_str)
    cur = conn.cursor()
    cur.execute("""
        IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = 'GiaoDichLuong')
        BEGIN
            CREATE TABLE GiaoDichLuong (
                MaGD NVARCHAR(50) PRIMARY KEY,
                MaNV NVARCHAR(50),
                SoTien DECIMAL(18,2),
                Phi DECIMAL(18,2),
                PhuongThuc NVARCHAR(50),
                SoTK NVARCHAR(100),
                NganHang NVARCHAR(200),
                ThoiGian DATETIME
            )
        END
    """)
    conn.commit()
    cur.execute("""
        INSERT INTO GiaoDichLuong (MaGD, MaNV, SoTien, Phi, PhuongThuc, SoTK, NganHang, ThoiGian)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (txid, ma_nv, float(amount), float(fee), phuong_thuc, so_tk or "", ngan_hang or "", ngay))
    conn.commit()
    cur.close()
    conn.close()
    return True


def save_payment_record_csv(csv_path, txid, ma_nv, so_tk, ngan_hang, phuong_thuc, amount, fee, ngay):
    """L∆∞u fallback v√†o CSV (append)."""
    header = ["MaGD", "MaNV", "SoTK", "NganHang", "PhuongThuc", "SoTien", "Phi", "ThoiGian"]
    exists = os.path.exists(csv_path)
    with open(csv_path, "a", newline='', encoding="utf-8") as f:
        w = csv.writer(f)
        if not exists:
            w.writerow(header)
        w.writerow([txid, ma_nv, so_tk or "", ngan_hang or "", phuong_thuc, float(amount), float(fee), ngay.isoformat()])
    return csv_path

# ============================================================
# üßæ H√†m t·∫°o bi√™n lai thanh to√°n l∆∞∆°ng (Premium)
# ============================================================
def generate_salary_pdf(txid, ma_nv, ho_ten, so_tien, phuong_thuc, phi,
                        file_path=None, signature_img_path=None, qr_target=None,
                        so_tk=None, ngan_hang=None):
    """
    T·∫°o bi√™n lai premium:
    - M√£ v·∫°ch ·ªü ƒë·∫ßu (gi·ªëng bi√™n lai ng√¢n h√†ng)
    - Hi·ªÉn th·ªã S·ªë t√†i kho·∫£n, Ng√¢n h√†ng, Ph∆∞∆°ng th·ª©c
    - T·ª± ƒë·ªông l∆∞u CSV trong /receipts/payments_log.csv
    """

    # ------------------------------------------------------------
    # ‚öôÔ∏è Chu·∫©n b·ªã file
    # ------------------------------------------------------------
    if not file_path:
        file_path = os.path.join("receipts", f"receipt_{txid}.pdf")

    doc = SimpleDocTemplate(
        file_path,
        pagesize=A4,
        rightMargin=30,
        leftMargin=30,
        topMargin=35,
        bottomMargin=30,
        title=f"Bi√™n lai {txid}"
    )

    # ------------------------------------------------------------
    # üß± Style ch·ªØ
    # ------------------------------------------------------------
    styles = getSampleStyleSheet()
    title_font = "DejaVu" if "DejaVu" in pdfmetrics.getRegisteredFontNames() else "Helvetica"

    style_title = ParagraphStyle(
        "Title",
        parent=styles["Heading1"],
        alignment=1,
        fontName=title_font,
        fontSize=16,
        leading=22,
        textColor=colors.white
    )
    style_body = ParagraphStyle(
        "Body",
        parent=styles["Normal"],
        fontName=title_font,
        fontSize=12,
        leading=18
    )
    style_footer = ParagraphStyle(
        "Footer",
        parent=styles["Normal"],
        alignment=1,
        fontName=title_font,
        fontSize=10,
        leading=14,
        textColor=colors.grey
    )

    elements = []

    # ------------------------------------------------------------
    # üßæ M√É V·∫†CH ·ªû TR√äN C√ôNG
    # ------------------------------------------------------------
    stk_for_code = so_tk if so_tk else ""
    bank_for_code = ngan_hang if ngan_hang else ""
    code_value = f"{txid}|{ma_nv}|{stk_for_code}|{bank_for_code}|{int(so_tien)}"
    barcode_flow = BarcodeFlowable(code_value, width=doc.width, height=26 * mm)
    elements.append(barcode_flow)
    elements.append(Spacer(1, 8))

    # ------------------------------------------------------------
    # üü¶ HEADER XANH (TI√äU ƒê·ªÄ)
    # ------------------------------------------------------------
    class HeaderSmall(Flowable):
        def __init__(self, width, height=16 * mm):
            super().__init__()
            self.width = width
            self.height = height

        def draw(self):
            c = self.canv
            c.setFillColorRGB(0.07, 0.35, 0.65)
            c.rect(0, 0, self.width, self.height, fill=1, stroke=0)
            c.setFillColor(colors.white)
            c.setFont(title_font, 12)
            c.drawCentredString(self.width / 2, self.height / 2 - 4, "BI√äN LAI THANH TO√ÅN L∆Ø∆†NG")

    elements.append(HeaderSmall(doc.width, 14 * mm))
    elements.append(Spacer(1, 10))

    # ------------------------------------------------------------
    # üìã B·∫¢NG TH√îNG TIN GIAO D·ªäCH
    # ------------------------------------------------------------
    data = [
        ["M√£ giao d·ªãch:", txid],
        ["M√£ nh√¢n vi√™n:", ma_nv],
        ["H·ªç v√† t√™n:", ho_ten],
        ["S·ªë ti·ªÅn:", f"{so_tien:,.0f} VNƒê"],
    ]
    if so_tk:
        data.append(["S·ªë t√†i kho·∫£n:", so_tk])
    if ngan_hang:
        data.append(["Ng√¢n h√†ng:", ngan_hang])
    data.extend([
        ["Ph√≠ giao d·ªãch:", f"{phi:,.0f} VNƒê"],
        ["Ph∆∞∆°ng th·ª©c:", phuong_thuc.capitalize()],
        ["Th·ªùi gian:", datetime.now().strftime("%d/%m/%Y %H:%M:%S")]
    ])

    table = Table(data, colWidths=[120, doc.width - 120])
    table.setStyle(TableStyle([
        ("FONTNAME", (0, 0), (-1, -1), title_font),
        ("FONTSIZE", (0, 0), (-1, -1), 12),
        ("GRID", (0, 0), (-1, -1), 0.25, colors.grey),
        ("BACKGROUND", (0, 0), (0, -1), colors.whitesmoke),
        ("BOTTOMPADDING", (0, 0), (-1, -1), 6),
        ("VALIGN", (0, 0), (-1, -1), "MIDDLE")
    ]))
    elements.append(table)
    elements.append(Spacer(1, 18))

    # ------------------------------------------------------------
    # üî≤ QR CODE
    # ------------------------------------------------------------
    qr_data = qr_target if qr_target else json.dumps({
        "txid": txid,
        "ma_nv": ma_nv,
        "amount": int(so_tien)
    })
    try:
        qr_code = qr.QrCodeWidget(qr_data)
        d = Drawing(60, 60)
        d.add(qr_code)
        elements.append(d)
    except Exception:
        pass

    elements.append(Spacer(1, 10))

    # ------------------------------------------------------------
    # ‚úçÔ∏è CH·ªÆ K√ù + FOOTER
    # ------------------------------------------------------------
    if signature_img_path and os.path.exists(signature_img_path):
        elements.append(Image(signature_img_path, width=50 * mm, height=20 * mm))
        elements.append(Spacer(1, 6))

    elements.append(Paragraph("<i>Ng∆∞·ªùi th·ª±c hi·ªán: B·ªô ph·∫≠n Nh√¢n s·ª± - FaceID System</i>", style_body))
    elements.append(Spacer(1, 12))
    elements.append(Paragraph("C·∫£m ∆°n b·∫°n ƒë√£ l√†m vi·ªác chƒÉm ch·ªâ v√† ƒë·ªìng h√†nh c√πng <b>FaceID System</b>.", style_footer))

    # ------------------------------------------------------------
    # üíß WATERMARK + PAGE NUMBER
    # ------------------------------------------------------------
    def _on_page(c, d):
        c.saveState()
        c.setFillColorRGB(0.90, 0.90, 0.90)
        if hasattr(c, "setFillAlpha"):
            c.setFillAlpha(0.12)
        c.translate(d.leftMargin + d.width / 2, d.bottomMargin + d.height / 2)
        c.rotate(30)
        c.setFont(title_font, 36)
        c.drawCentredString(0, 0, "FaceID System")
        c.restoreState()

        c.saveState()
        c.setFont(title_font, 9)
        c.setFillColor(colors.grey)
        c.drawRightString(d.leftMargin + d.width, 12, f"Trang {c.getPageNumber()}")
        c.restoreState()

    # ------------------------------------------------------------
    # üßæ XU·∫§T FILE PDF
    # ------------------------------------------------------------
    doc.build(elements, onFirstPage=_on_page, onLaterPages=_on_page)

    # ------------------------------------------------------------
    # üíæ L∆ØU D√íNG GIAO D·ªäCH V√ÄO CSV
    # ------------------------------------------------------------
    try:
        csv_path = os.path.join(os.getcwd(), "receipts", "payments_log.csv")
        save_payment_record_csv(
            csv_path,
            txid, ma_nv, so_tk or "", ngan_hang or "",
            phuong_thuc, so_tien, phi,
            datetime.now()
        )
        print(f"üìÑ ƒê√£ l∆∞u giao d·ªãch v√†o CSV: {csv_path}")
    except Exception as e:
        print(f"[‚ö†Ô∏è] Kh√¥ng th·ªÉ l∆∞u CSV: {e}")

    return file_path
