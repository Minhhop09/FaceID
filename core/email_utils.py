# ===============================================
# üìß core/email_utils.py ‚Äî G·ª≠i email h·ªá th·ªëng
# ===============================================

from flask_mail import Mail, Message
from flask import current_app

def send_email_notification(email_to, subject, body):
    """
    ‚úÖ G·ª≠i email th√¥ng b√°o an to√†n (h·ªó tr·ª£ thread).
    - T·ª± ƒë·ªông t·∫°o app_context n·∫øu c·∫ßn.
    - H·ªó tr·ª£ 1 ho·∫∑c nhi·ªÅu ng∆∞·ªùi nh·∫≠n.
    - Tr·∫£ v·ªÅ True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu l·ªói.
    """
    try:
        app = current_app._get_current_object()  # L·∫•y app th·∫≠t (tr√°nh proxy l·ªói khi thread ch·∫°y)
        with app.app_context():                  # ƒê·∫£m b·∫£o lu√¥n c√≥ context h·ª£p l·ªá
            mail = Mail(app)

            # Cho ph√©p g·ª≠i 1 ho·∫∑c nhi·ªÅu ng∆∞·ªùi nh·∫≠n
            recipients = [email_to] if isinstance(email_to, str) else list(email_to)

            msg = Message(
                subject=subject,
                sender=app.config.get("MAIL_USERNAME"),
                recipients=recipients,
                body=body
            )

            mail.send(msg)
            print(f"‚úÖ Email ƒë√£ g·ª≠i ƒë·∫øn {', '.join(recipients)} ‚Äî {subject}")
            return True

    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i email ƒë·∫øn {email_to}: {e}")
        return False


def send_otp_email(email_to, otp):
    """
    ‚úÖ G·ª≠i m√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.
    - G·ªçi l·∫°i send_email_notification ƒë·ªÉ tr√°nh tr√πng code.
    """
    subject = "üîê M√£ x√°c minh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u FaceID"
    body = (
        f"K√≠nh g·ª≠i ng∆∞·ªùi d√πng,\n\n"
        f"M√£ x√°c minh (OTP) c·ªßa b·∫°n l√†: {otp}\n\n"
        f"M√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.\n"
        f"Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y cho b·∫•t k·ª≥ ai.\n\n"
        f"Tr√¢n tr·ªçng,\nH·ªá th·ªëng FaceID"
    )
    return send_email_notification(email_to, subject, body)
