from flask_mail import Mail, Message
from flask import current_app, session
from core.db_utils import get_sql_connection
from datetime import datetime
import smtplib
from email.message import EmailMessage
import os


# ============================================================
# üì¨ G·ª≠i email th√¥ng b√°o + Ghi log v√†o LichSuEmail
# ============================================================
def send_email_notification(email_to, subject, body, loai="GENERAL", ma_tham_chieu=None, ma_tk=None):
    """
    G·ª≠i email qua Flask-Mail (th·∫≠t) v√† ghi log v√†o LichSuEmail.
    ------------------------------------------------------------
    Parameters:
        email_to (str | list): ng∆∞·ªùi nh·∫≠n email
        subject (str): ti√™u ƒë·ªÅ email
        body (str): n·ªôi dung email
        loai (str): lo·∫°i th√¥ng b√°o (OTP, PAYMENT_RECEIPT, ALERT, ...)
        ma_tham_chieu (str | None): m√£ nghi·ªáp v·ª• (MaLuong, MaNV, RESET_PASSWORD, ...)
        ma_tk (int | None): ID t√†i kho·∫£n trong b·∫£ng TaiKhoan (FK)
    ------------------------------------------------------------
    """
    success = False
    try:
        # üü¢ L·∫•y app context th·ª±c ƒë·ªÉ Flask-Mail ho·∫°t ƒë·ªông an to√†n
        app = current_app._get_current_object()
        with app.app_context():
            mail = Mail(app)

            # Cho ph√©p g·ª≠i 1 ho·∫∑c nhi·ªÅu ng∆∞·ªùi nh·∫≠n
            recipients = [email_to] if isinstance(email_to, str) else list(email_to)

            msg = Message(
                subject=subject,
                sender=app.config.get("MAIL_USERNAME"),
                recipients=recipients,
                body=body
            )

            # G·ª≠i mail th·∫≠t
            mail.send(msg)
            success = True
            print(f"‚úÖ Email ƒë√£ g·ª≠i ƒë·∫øn {', '.join(recipients)} ‚Äî {subject}")

    except Exception as e:
        # N·∫øu l·ªói g·ª≠i email
        print(f"‚ùå L·ªói g·ª≠i email ƒë·∫øn {email_to}: {e}")
        success = False

    # ============================================================
    # üßæ Ghi log email v√†o LichSuEmail
    # ============================================================
    try:
        conn = get_sql_connection()
        cur = conn.cursor()

        # üß± Ghi log k·∫øt qu·∫£ g·ª≠i
        cur.execute("""
            INSERT INTO LichSuEmail (MaTK, MaThamChieu, EmailTo, LoaiThongBao, ThoiGian, TrangThai)
            VALUES (?, ?, ?, ?, GETDATE(), ?)
        """, (
            ma_tk,  # ID t√†i kho·∫£n (INT)
            ma_tham_chieu or "N/A",  # m√£ nghi·ªáp v·ª•
            email_to if isinstance(email_to, str) else ", ".join(email_to),
            loai,
            1 if success else 0
        ))

        conn.commit()
        print(f"[LOG] üìß ƒê√£ ghi log email {loai} ‚Üí {email_to}")

    except Exception as log_err:
        print(f"[WARN] ‚ö†Ô∏è Kh√¥ng th·ªÉ ghi log email: {log_err}")

    finally:
        if 'conn' in locals():
            conn.close()

    return success

def notify_attendance(ma_nv: str, trang_thai: str, gio_vao: datetime):
    """
    G·ª≠i email th√¥ng b√°o ch·∫•m c√¥ng cho nh√¢n vi√™n.
    ------------------------------------------------------------
    ma_nv       : m√£ nh√¢n vi√™n (NV00001, ...)
    trang_thai  : "ƒê√∫ng gi·ªù", "ƒêi tr·ªÖ", "V·∫Øng", ...
    gio_vao     : th·ªùi gian ch·∫•m c√¥ng th·ª±c t·∫ø
    ------------------------------------------------------------
    """

    try:
        conn = get_sql_connection()
        cur = conn.cursor()

        # üîç L·∫•y th√¥ng tin nh√¢n vi√™n
        cur.execute("SELECT HoTen, Email FROM NhanVien WHERE MaNV = ?", (ma_nv,))
        row = cur.fetchone()
        if not row:
            print(f"[WARN] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n {ma_nv} ƒë·ªÉ g·ª≠i mail ch·∫•m c√¥ng.")
            return False

        ho_ten, email_to = row
        ngay_cc = gio_vao.strftime("%d/%m/%Y")
        gio_cc = gio_vao.strftime("%H:%M:%S")

        # üßæ So·∫°n n·ªôi dung email
        if trang_thai.lower() == "ƒë√∫ng gi·ªù":
            subject = f"[FaceID] Ch·∫•m c√¥ng th√†nh c√¥ng ng√†y {ngay_cc}"
            body = f"""
Xin ch√†o {ho_ten},

B·∫°n ƒë√£ ch·∫•m c√¥ng th√†nh c√¥ng v√†o l√∫c {gio_cc} ng√†y {ngay_cc}.

‚úÖ Tr·∫°ng th√°i: ƒê√∫ng gi·ªù
C·∫£m ∆°n b·∫°n ƒë√£ tu√¢n th·ªß gi·ªù l√†m vi·ªác!

Tr√¢n tr·ªçng,
H·ªá th·ªëng FaceID
"""
        else:
            subject = f"[FaceID] Th√¥ng b√°o ƒëi tr·ªÖ ng√†y {ngay_cc}"
            body = f"""
Xin ch√†o {ho_ten},

B·∫°n ƒë√£ ch·∫•m c√¥ng v√†o l√∫c {gio_cc} ng√†y {ngay_cc}.

‚ö†Ô∏è Tr·∫°ng th√°i: {trang_thai}
Vui l√≤ng ch√∫ √Ω gi·ªù l√†m vi·ªác ƒë√∫ng quy ƒë·ªãnh c·ªßa c√¥ng ty.

Tr√¢n tr·ªçng,
H·ªá th·ªëng FaceID
"""

        # üì¨ G·ª≠i v√† ghi log
        return send_email_notification(
            email_to=email_to,
            subject=subject,
            body=body,
            loai="ATTENDANCE",
            ma_tham_chieu=ma_nv,
            ma_tk=None
        )

    except Exception as e:
        print(f"[ERROR] ‚ùå L·ªói khi g·ª≠i email ch·∫•m c√¥ng: {e}")
        return False

    finally:
        if 'conn' in locals():
            conn.close()
            
# ============================================================
# üîê G·ª≠i OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
# ============================================================
def send_otp_email(email_to, otp, ma_tk=None):
    """
    G·ª≠i m√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v√† ghi log email.
    """
    subject = "üîê M√£ x√°c minh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u FaceID"
    body = (
        f"K√≠nh g·ª≠i ng∆∞·ªùi d√πng,\n\n"
        f"M√£ x√°c minh (OTP) c·ªßa b·∫°n l√†: {otp}\n\n"
        f"M√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.\n"
        f"Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y cho b·∫•t k·ª≥ ai.\n\n"
        f"Tr√¢n tr·ªçng,\nH·ªá th·ªëng FaceID"
    )

    return send_email_notification(
        email_to=email_to,
        subject=subject,
        body=body,
        loai="OTP",
        ma_tham_chieu="RESET_PASSWORD",
        ma_tk=ma_tk
    )

def send_email_with_attachment(to_email, subject, body, attachment_path=None):
    app = current_app._get_current_object()
    mail = Mail(app)

    msg = Message(subject=subject,
                  recipients=[to_email],
                  sender=app.config.get("MAIL_USERNAME"),
                  body=body)

    if attachment_path and os.path.exists(attachment_path):
        with open(attachment_path, "rb") as f:
            msg.attach(os.path.basename(attachment_path),
                       "application/pdf",
                       f.read())

    try:
        mail.send(msg)
        print(f"[EMAIL OK] ‚úÖ ƒê√£ g·ª≠i th·∫≠t t·ªõi {to_email}")
        return True, None
    except Exception as e:
        print(f"[EMAIL ERROR] ‚ùå Kh√¥ng g·ª≠i ƒë∆∞·ª£c email: {e}")
        print(f"[EMAIL FALLBACK] üß™ Gi·∫£ l·∫≠p g·ª≠i email t·ªõi {to_email}")
        if attachment_path:
            print(f"   (Gi·∫£ l·∫≠p) ƒê√≠nh k√®m: {os.path.basename(attachment_path)}")
        return True, "Sent in fake/demo mode"