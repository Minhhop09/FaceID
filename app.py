from flask import Flask, render_template, request, redirect, url_for, flash, Response, session, jsonify, Blueprint
import pyodbc
import hashlib
import atexit
from datetime import datetime
import cv2
from add_employee import generate_ma_nv, add_new_employee
from db_utils import get_phongbans
from capture_photo_and_save import capture_photo_and_save
from encode_save import encode_and_save
from attendance_system import process_frame, load_known_faces, generate_frames, record_attendance, current_employee as att_current_employee, update_current_employee, current_employee
from db_utils import get_sql_connection
import manage_department
import manage_shift
import manage_account
import reports
import os
from werkzeug.utils import secure_filename
from db_utils import find_employees_by_name_or_manv
from flask import send_from_directory
from collections import Counter
from flask import render_template
from werkzeug.utils import secure_filename
import base64
from PIL import ImageFont, ImageDraw, Image
from flask import send_from_directory
from db_utils import get_connection
from flask import request, redirect, url_for, flash, render_template, session
from flask import send_file
from docx import Document
import io
from openpyxl import Workbook
from manage_account import add_account 
import datetime as dt
import time as tm
import traceback



# Config Flask

app = Flask(__name__)
app.secret_key = "faceid_secret"
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024 

# SQL Connection
def get_sql_connection():
    conn = pyodbc.connect(
        "Driver={SQL Server};"
        "Server=MINHHOP\\SQLEXPRESS;"
        "Database=FaceID;"
        "UID=sa;PWD=123456"
    )
    # G·∫Øn user hi·ªán t·∫°i ngay sau khi k·∫øt n·ªëi
    cursor = conn.cursor()
    try:
        username = session.get('username') or session.get('user_id') or 'admin'
        cursor.execute("EXEC sys.sp_set_session_context @key=N'user', @value=?", (username,))
        conn.commit()
    except:
        pass  # n·∫øu kh√¥ng c√≥ session (trang c√¥ng khai) th√¨ b·ªè qua
    return conn

from functools import wraps

def require_role(role):
    def decorator(f):
        @wraps(f)
        def wrapper(*args, **kwargs):
            # Ch∆∞a ƒëƒÉng nh·∫≠p th√¨ quay l·∫°i login
            if "username" not in session:
                flash("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p h·ªá th·ªëng", "warning")
                return redirect(url_for("login"))

            # Sai vai tr√≤ th√¨ c·∫•m truy c·∫≠p
            if session.get("role") != role:
                flash("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!", "danger")
                return redirect(url_for("index"))

            return f(*args, **kwargs)
        return wrapper
    return decorator


def safe_date_format(value):
    """Chuy·ªÉn ƒë·ªïi gi√° tr·ªã ng√†y (datetime ho·∫∑c string) th√†nh ƒë·ªãnh d·∫°ng dd/mm/yyyy"""
    if not value:
        return "‚Äî"
    # N·∫øu l√† string, th·ª≠ parse sang datetime
    if isinstance(value, str):
        # Th·ª≠ c√°c ƒë·ªãnh d·∫°ng ph·ªï bi·∫øn
        for fmt in ("%Y-%m-%d", "%d/%m/%Y", "%Y-%m-%d %H:%M:%S"):
            try:
                return datetime.strptime(value, fmt).strftime("%d/%m/%Y")
            except ValueError:
                continue
        return value  # n·∫øu kh√¥ng parse ƒë∆∞·ª£c, tr·∫£ v·ªÅ nguy√™n vƒÉn
    # N·∫øu l√† datetime th·∫≠t
    try:
        return value.strftime("%d/%m/%Y")
    except Exception:
        return str(value)

# Camera global (singleton)

camera = None
def get_camera():
    global camera
    if camera is None or not camera.isOpened():
        camera = cv2.VideoCapture(0, cv2.CAP_MSMF) 
        if not camera.isOpened():
            print("Kh√¥ng m·ªü ƒë∆∞·ª£c camera")
            return None
    return camera

# Face encodings

known_encodings, known_ids, known_names = load_known_faces()

# Camera stream CH·∫§M C√îNG

@app.route('/video_feed')
def video_feed():
    encodings, ids, names = load_known_faces()
    return Response(
        generate_frames(encodings, ids, names),
        mimetype='multipart/x-mixed-replace; boundary=frame'
    )

# Camera stream ƒêƒÇNG K√ù

@app.route('/register_feed')
def register_feed():
    def gen_register_cam():
        cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            _, buffer = cv2.imencode('.jpg', frame)
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n')
        cap.release()

    return Response(gen_register_cam(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

# Ch·∫•m c√¥ng th·ªß c√¥ng

def record_manual_attendance(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()
    now = datetime.now()
    today = now.strftime("%Y-%m-%d")
    time_now = now.strftime("%H:%M:%S")

    cursor.execute("SELECT COUNT(*) FROM ChamCong WHERE MaNV=? AND NgayChamCong=?", (ma_nv, today))
    exists = cursor.fetchone()[0]
    if exists:
        conn.close()
        raise Exception("Nh√¢n vi√™n ƒë√£ ch·∫•m c√¥ng h√¥m nay!")

    cursor.execute("""
        INSERT INTO ChamCong (MaNV, NgayChamCong, GioVao, TrangThai)
        VALUES (?, ?, ?, ?)
    """, (ma_nv, today, time_now, 1))
    conn.commit()
    conn.close()

# ƒêƒÇNG NH·∫¨P H·ªÜ TH·ªêNG

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form.get("username", "").strip()
        password = request.form.get("password", "").strip()

        if not username or not password:
            flash("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u", "danger")
            return redirect(url_for("login"))

        #BƒÉm m·∫≠t kh·∫©u SHA-256
        import hashlib
        password_hash = hashlib.sha256(password.encode()).hexdigest()

        #K·∫øt n·ªëi SQL Server
        conn = get_sql_connection()
        cursor = conn.cursor()

        #Ki·ªÉm tra t√†i kho·∫£n h·ª£p l·ªá v√† l·∫•y th√¥ng tin nh√¢n vi√™n
        cursor.execute("""
            SELECT tk.TenDangNhap, tk.VaiTro, tk.TrangThai, nv.MaNV, nv.HoTen, nv.Email
            FROM TaiKhoan tk
            LEFT JOIN NhanVien nv ON tk.MaNV = nv.MaNV
            WHERE tk.TenDangNhap = ? AND tk.MatKhauHash = ?
        """, (username, password_hash))

        user = cursor.fetchone()
        conn.close()

        if user:
            ten_dang_nhap, vai_tro, trang_thai, ma_nv, ho_ten, email = user

            if trang_thai != 1:
                flash("T√†i kho·∫£n n√†y ƒëang b·ªã kh√≥a!", "danger")
                return redirect(url_for("login"))

            #L∆∞u session
            session["username"] = ten_dang_nhap
            session["role"] = vai_tro
            session["manv"] = ma_nv
            session["hoten"] = ho_ten
            session["email"] = email

            #ƒêi·ªÅu h∆∞·ªõng theo vai tr√≤
            if vai_tro.lower() == "admin":
                return redirect(url_for("admin_dashboard"))
            elif vai_tro.lower() == "nhanvien":
                return redirect(url_for("employee_dashboard"))
            else:
                flash("T√†i kho·∫£n kh√¥ng c√≥ vai tr√≤ h·ª£p l·ªá!", "warning")
                return redirect(url_for("login"))
        else:
            flash("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u", "danger")
            return redirect(url_for("login"))

    return render_template("login.html")

# Trang ch√≠nh

@app.route("/")
@app.route("/index")
def index():
    return render_template("index.html")

# Trang ƒëƒÉng k√Ω nh√¢n vi√™n
# üß© H√ÄM SINH M√É NH√ÇN VI√äN
# ===============================
def generate_employee_code(conn):
    cur = conn.cursor()
    cur.execute("SELECT MAX(MaNV) FROM NhanVien WHERE MaNV LIKE 'NV_____'")
    last = cur.fetchone()[0]
    if last:
        try:
            num = int(last[2:]) + 1
        except Exception:
            num = 1
    else:
        num = 1
    return f"NV{num:05d}"


# ===============================
# üß© TRANG ƒêƒÇNG K√ù NH√ÇN VI√äN
# ===============================
@app.route("/register", methods=["GET", "POST"])
def register():
    phongbans = get_phongbans()

    if request.method == "POST":
        hoten = request.form.get("HoTen", "").strip()
        email = request.form.get("Email", "").strip()
        sdt = request.form.get("SDT", "").strip()
        gioitinh_input = request.form.get("GioiTinh", "").strip().lower()
        ngaysinh = request.form.get("NgaySinh", "").strip()
        diachi = request.form.get("DiaChi", "").strip()
        ma_pb = request.form.get("PhongBan", "").strip()
        chucvu = request.form.get("ChucVu", "").strip()

        if not hoten or not email or not ma_pb:
            flash("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!", "danger")
            return redirect(url_for("register"))

        gioitinh = 1 if gioitinh_input == "nam" else 0 if gioitinh_input == "n·ªØ" else None
        if gioitinh is None:
            flash("‚ö†Ô∏è Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 'Nam' ho·∫∑c 'N·ªØ'.", "danger")
            return redirect(url_for("register"))

        conn = get_connection()
        cursor = conn.cursor()

        try:
            start_all = tm.time()
            today_str = dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ngay_sinh_str = ngaysinh if ngaysinh else None
            ma_nv_moi = generate_employee_code(conn)

            # üîπ 1. Th√™m nh√¢n vi√™n m·ªõi
            cursor.execute("""
                INSERT INTO NhanVien (
                    MaNV, MaHienThi, HoTen, Email, SDT, GioiTinh, NgaySinh, DiaChi,
                    MaPB, ChucVu, TrangThai, NgayVaoLam, NgayNghiViec, NgayTao
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                ma_nv_moi, ma_nv_moi, hoten, email, sdt, gioitinh, ngay_sinh_str, diachi,
                ma_pb, chucvu, 1, today_str, None, today_str
            ))
            print(f"üß© ƒê√£ th√™m nh√¢n vi√™n {ma_nv_moi} v√†o NhanVien.")

            # üîπ 2. N·∫øu l√† qu·∫£n l√Ω ‚Üí c·∫≠p nh·∫≠t ph√≤ng ban
            capbac = {"Gi√°m ƒë·ªëc": 1, "Tr∆∞·ªüng ph√≤ng": 2, "Qu·∫£n l√Ω": 3}
            if chucvu in capbac:
                cursor.execute("""
                    SELECT nv.MaNV, nv.ChucVu
                    FROM PhongBan pb
                    LEFT JOIN NhanVien nv ON pb.QuanLyPB = nv.MaNV
                    WHERE pb.MaPB = ?
                """, (ma_pb,))
                current_manager = cursor.fetchone()

                current_rank = capbac.get(current_manager[1], 999) if current_manager and current_manager[1] else 999
                new_rank = capbac.get(chucvu, 999)

                if not current_manager or new_rank < current_rank:
                    cursor.execute("""
                        UPDATE PhongBan
                        SET QuanLyPB = ?
                        WHERE MaPB = ?
                    """, (ma_nv_moi, ma_pb))
                    print(f"üè¢ C·∫≠p nh·∫≠t {ma_nv_moi} l√†m qu·∫£n l√Ω ph√≤ng {ma_pb}.")
                conn.commit()

            # üîπ 3. Ch·ª•p ·∫£nh khu√¥n m·∫∑t
            start_capture = tm.time()
            image_path = capture_photo_and_save(ma_nv_moi)
            print(f"üì∏ Th·ªùi gian ch·ª•p ·∫£nh: {tm.time() - start_capture:.2f}s")

            if image_path:
                start_encode = tm.time()
                encode_success = encode_and_save(ma_nv_moi, image_path, conn)
                print(f"‚è±Ô∏è Th·ªùi gian encode: {tm.time() - start_encode:.2f}s")

                if encode_success:
                    global known_encodings, known_ids, known_names
                    known_encodings, known_ids, known_names = load_known_faces()
                    print(f"‚úÖ Encode xong v√† n·∫°p khu√¥n m·∫∑t {ma_nv_moi}.")
                else:
                    flash(f"‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t h·ª£p l·ªá cho {hoten}.", "warning")

            conn.commit()
            print(f"üïí T·ªïng th·ªùi gian ƒëƒÉng k√Ω: {tm.time() - start_all:.2f}s")
            flash(f"‚úÖ Nh√¢n vi√™n {hoten} ({chucvu}) ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng v√†o ph√≤ng {ma_pb}!", "success")

        except Exception as e:
            conn.rollback()
            import sys
            print("‚ùå L·ªñI ƒêƒÇNG K√ù CHI TI·∫æT:")
            traceback.print_exc(file=sys.stdout)
            print("‚ö†Ô∏è Ki·ªÉu l·ªói:", type(e))
            print("‚ö†Ô∏è N·ªôi dung l·ªói:", str(e))
            flash(f"‚ùå L·ªói khi th√™m nh√¢n vi√™n: {e}", "danger")
        finally:
            conn.close()

        return redirect(url_for("register"))

    return render_template("register.html", phongbans=phongbans)


# API l·∫•y nh√¢n vi√™n g·∫ßn nh·∫•t

@app.route("/get_current_employee")
def get_current_employee():
    if current_employee:
        return jsonify({
            "found": True,
            "MaNV": current_employee.get("MaNV"),
            "HoTen": current_employee.get("HoTen"),
            "PhongBan": current_employee.get("PhongBan"),
            "NgayChamCong": current_employee.get("NgayChamCong"),
            "GioVao": current_employee.get("GioVao"),
            "GioRa": current_employee.get("GioRa"),
            "CaLam": current_employee.get("CaLam", "-"),
            "TrangThai": current_employee.get("TrangThai")
        })
    return jsonify({"found": False})

# Trang ch·∫•m c√¥ng

@app.route("/attendance")
def attendance():
   
    return render_template("attendance.html")

@app.route("/attendance_feed")
def attendance_feed():
    known_encodings, known_ids, known_names = load_known_faces()
    return Response(
        generate_frames(known_encodings, known_ids, known_names),
        mimetype="multipart/x-mixed-replace; boundary=frame"
    )

# Ch·∫•m c√¥ng th·ªß c√¥ng

@app.route("/manual_attendance", methods=["POST"])
def manual_attendance():
    ma_nv = request.form.get("ma_nv")
    mode = request.form.get("mode")      # 'in' ho·∫∑c 'out'
    ma_ca = request.form.get("ma_ca")    # 'Ca1', 'Ca2', 'Ca3'

    if not ma_nv:
        flash("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n!", "danger")
        return redirect(url_for("attendance"))

    conn = get_sql_connection()
    cursor = conn.cursor()
    today = datetime.now().strftime("%Y-%m-%d")
    now_time = datetime.now().strftime("%H:%M:%S")

    # üîπ L·∫•y MaLLV t∆∞∆°ng ·ª©ng trong LichLamViec
    cursor.execute("""
        SELECT TOP 1 MaLLV
        FROM LichLamViec
        WHERE MaNV = ? AND MaCa = ? AND NgayLam = ? AND DaXoa = 1
    """, (ma_nv, ma_ca, today))
    result = cursor.fetchone()
    ma_llv = result[0] if result else None

    # Ki·ªÉm tra xem ƒë√£ c√≥ b·∫£n ghi ch·∫•m c√¥ng ch∆∞a
    cursor.execute("""
        SELECT GioVao, GioRa FROM ChamCong
        WHERE MaNV=? AND NgayChamCong=? AND MaCa=?
    """, (ma_nv, today, ma_ca))
    row = cursor.fetchone()

    if not row:
        if mode == "in":
            cursor.execute("""
                INSERT INTO ChamCong (MaNV, MaLLV, MaCa, NgayChamCong, GioVao, TrangThai, DaXoa)
                VALUES (?, ?, ?, ?, ?, ?, 1)
            """, (ma_nv, ma_llv, ma_ca, today, now_time, 1))
            conn.commit()
            flash(f"{ma_ca} - V√†o ca l√∫c {now_time}", "success")
        else:
            flash("Ch∆∞a v√†o ca n√†y, kh√¥ng th·ªÉ ra ca!", "warning")
    else:
        gio_vao, gio_ra = row
        if mode == "in":
            flash(f"ƒê√£ ch·∫•m v√†o {ma_ca} r·ªìi!", "warning")
        elif mode == "out":
            if gio_ra:
                flash(f"ƒê√£ ra ca {ma_ca} r·ªìi!", "warning")
            else:
                cursor.execute("""
                    UPDATE ChamCong 
                    SET GioRa=?, TrangThai=2
                    WHERE MaNV=? AND NgayChamCong=? AND MaCa=?
                """, (now_time, ma_nv, today, ma_ca))
                conn.commit()
                flash(f"{ma_ca} - Ra ca l√∫c {now_time}", "success")

    conn.close()

    # C·∫≠p nh·∫≠t l·∫°i th√¥ng tin hi·ªÉn th·ªã b√™n ph·∫£i
    update_current_employee(ma_nv, ma_ca)
    return redirect(url_for("attendance"))


# Trang Admin

@app.route('/admin')
@require_role("admin")
def admin_dashboard():
    if 'role' in session and session['role'] == 'admin':
        conn = get_sql_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM NhanVien WHERE TrangThai = 1")
        total_employees = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM PhongBan WHERE TrangThai = 1")
        total_departments = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM CaLamViec WHERE TrangThai = 1")
        total_shifts = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM TaiKhoan WHERE TrangThai = 1")
        total_accounts = cursor.fetchone()[0]

        conn.close()

        return render_template(
            'admin.html',
            total_employees=total_employees,
            total_departments=total_departments,
            total_shifts=total_shifts,
            total_accounts=total_accounts,
            last_login=session.get('last_login', 'Kh√¥ng x√°c ƒë·ªãnh')
        )
    else:
        flash("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!", "danger")
        return redirect(url_for('login'))


# Gi·∫£i ph√≥ng camera khi app d·ª´ng

def close_camera():
    global camera
    if camera and camera.isOpened():
        camera.release()
        print("Camera ƒë√£ ƒë∆∞·ª£c gi·∫£i ph√≥ng")

atexit.register(close_camera)

@app.teardown_appcontext
def cleanup(exception=None):
    if camera and camera.isOpened():
        camera.release()

UPLOAD_FOLDER = os.path.join("static", "uploads")
ALLOWED_EXTENSIONS = {"png", "jpg", "jpeg", "gif"}

app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

def allowed_file(filename):
    return "." in filename and filename.rsplit(".",1)[1].lower() in ALLOWED_EXTENSIONS

@app.route("/faces")
@require_role("admin")
def faces():
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT 
                k.FaceID,
                k.MaNV,
                nv.HoTen,
                pb.TenPB,
                k.DuongDanAnh,
                k.NgayDangKy,
                k.TrangThai,
                k.MoTa
            FROM KhuonMat k
            JOIN NhanVien nv ON k.MaNV = nv.MaNV
            LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
            WHERE k.TrangThai = 1     -- ‚úÖ Ch·ªâ l·∫•y khu√¥n m·∫∑t ƒëang ho·∫°t ƒë·ªông
            ORDER BY k.NgayDangKy DESC
        """)
        faces = cursor.fetchall()
    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i danh s√°ch khu√¥n m·∫∑t: {e}", "error")
        faces = []
    finally:
        conn.close()

    return render_template("faces.html", faces=faces)

# ============================================================
# üßç DANH S√ÅCH KHU√îN M·∫∂T NH√ÇN VI√äN B·ªä X√ìA M·ªÄM
# ============================================================
@app.route("/faces/deleted")
@require_role("admin")
def deleted_faces():
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT 
                k.FaceID,
                k.MaNV,
                nv.HoTen,
                pb.TenPB,
                k.DuongDanAnh,
                k.NgayDangKy,
                k.TrangThai,
                k.MoTa
            FROM KhuonMat k
            JOIN NhanVien nv ON k.MaNV = nv.MaNV
            LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
            WHERE nv.TrangThai = 0 OR k.TrangThai = 0
            ORDER BY k.NgayDangKy DESC
        """)
        deleted_faces = cursor.fetchall()
    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i danh s√°ch khu√¥n m·∫∑t b·ªã x√≥a m·ªÅm: {e}", "error")
        deleted_faces = []
    finally:
        conn.close()

    return render_template("deleted_records.html", deleted_faces=deleted_faces)


@app.route("/employees")
@require_role("admin")
def employee_list():
    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- L·∫•y tham s·ªë t√¨m ki·∫øm v√† s·∫Øp x·∫øp ---
    keyword = request.args.get("q", "").strip()
    sort = request.args.get("sort", "ma")  # ki·ªÉu s·∫Øp x·∫øp: ma, ten, phongban, chucvu
    order = request.args.get("order", "asc")  # th·ª© t·ª±: asc ho·∫∑c desc

    # --- L·∫•y danh s√°ch nh√¢n vi√™n ---
    query = """
        SELECT nv.MaNV, nv.HoTen, nv.Email, nv.ChucVu, nv.NgaySinh, pb.TenPB, km.DuongDanAnh
        FROM NhanVien nv
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat km ON nv.MaNV = km.MaNV
        WHERE nv.TrangThai = 1  -- ‚úÖ ch·ªâ l·∫•y nh√¢n vi√™n ch∆∞a b·ªã x√≥a m·ªÅm
    """
    params = []

    if keyword:
        query += """
            AND (nv.HoTen LIKE ? 
                 OR nv.MaNV LIKE ?
                 OR nv.ChucVu LIKE ?
                 OR pb.TenPB LIKE ?)
        """
        params.extend([f"%{keyword}%", f"%{keyword}%", f"%{keyword}%", f"%{keyword}%"])

    # --- X·ª≠ l√Ω s·∫Øp x·∫øp ---
    sort_map = {
        "ma": "nv.MaNV",
        "ten": "nv.HoTen",
        "phongban": "pb.TenPB",
        "chucvu": "nv.ChucVu"
    }
    sort_col = sort_map.get(sort, "nv.MaNV")
    order_sql = "ASC" if order == "asc" else "DESC"
    query += f" ORDER BY {sort_col} {order_sql}"

    # --- Th·ª±c thi ---
    cursor.execute(query, params)
    rows = cursor.fetchall()
    columns = [column[0] for column in cursor.description]

    employees = []
    for row in rows:
        emp = dict(zip(columns, row))
        avatar = emp.get("DuongDanAnh")
        if avatar and avatar.strip():
            avatar = avatar.replace("\\", "/")
            emp["Avatar"] = f"/{avatar}" if not avatar.startswith("/") else avatar
        else:
            emp["Avatar"] = "/static/photos/default.jpg"
        employees.append(emp)

    # --- Th·ªëng k√™ ---
    cursor.execute("SELECT COUNT(*) FROM NhanVien WHERE TrangThai = 1")
    total_employees = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM PhongBan WHERE TrangThai = 1")
    total_departments = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM NhanVien WHERE ChucVu LIKE N'%Tr∆∞·ªüng ph√≤ng%' AND TrangThai = 1")
    total_managers = cursor.fetchone()[0]

    cursor.execute("""
        SELECT COUNT(*)
        FROM NhanVien
        WHERE TrangThai = 1
          AND TRY_CONVERT(DATE, NgaySinh, 103) IS NOT NULL
          AND MONTH(TRY_CONVERT(DATE, NgaySinh, 103)) = MONTH(GETDATE())
    """)
    birthday_this_month = cursor.fetchone()[0]

    conn.close()

    return render_template(
        "employees.html",
        employees=employees,
        total_employees=total_employees,
        total_departments=total_departments,
        total_managers=total_managers,
        birthday_this_month=birthday_this_month,
        keyword=keyword,
        sort=sort,
        order=order
    )


#chi ti·∫øt nh√¢n vi√™n

@app.route("/employees/<ma_nv>")
@require_role("admin")
def employee_detail(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- L·∫•y th√¥ng tin nh√¢n vi√™n ƒë·∫ßy ƒë·ªß ---
    cursor.execute("""
        SELECT 
            nv.MaNV,
            nv.MaHienThi,
            nv.HoTen,
            nv.Email,
            nv.SDT,
            nv.GioiTinh,
            nv.NgaySinh,
            nv.DiaChi,
            pb.TenPB AS TenPhongBan,
            nv.ChucVu,
            nv.TrangThai,
            nv.NgayVaoLam,
            nv.NgayTao,
            nv.NgayCapNhat,

            km.DuongDanAnh
        FROM NhanVien nv
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat km ON nv.MaNV = km.MaNV
        WHERE nv.MaNV = ?
    """, (ma_nv,))
    
    row = cursor.fetchone()
    if not row:
        conn.close()
        flash("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n!", "error")
        return redirect(url_for("employee_list"))

    # --- Chuy·ªÉn k·∫øt qu·∫£ th√†nh dict ---
    columns = [col[0] for col in cursor.description]
    employee = dict(zip(columns, row))

    # --- H√†m ƒë·ªãnh d·∫°ng ng√†y ---
    def format_date(value):
        if not value:
            return "‚Äî"
        try:
            if isinstance(value, str):
                return datetime.strptime(value[:10], "%Y-%m-%d").strftime("%d/%m/%Y")
            else:
                return value.strftime("%d/%m/%Y")
        except Exception:
            return str(value)

    # --- X·ª≠ l√Ω c√°c ng√†y ---
    employee["NgaySinh"] = format_date(employee.get("NgaySinh"))
    employee["NgayVaoLam"] = format_date(employee.get("NgayVaoLam"))
    employee["NgayTao"] = format_date(employee.get("NgayTao"))
    employee["NgayCapNhat"] = format_date(employee.get("NgayCapNhat"))


    # --- X·ª≠ l√Ω gi·ªõi t√≠nh ---
    employee["GioiTinhText"] = "Nam" if employee.get("GioiTinh") == 1 else "N·ªØ"

    # --- X·ª≠ l√Ω avatar ---
    avatar = employee.get("DuongDanAnh")
    if avatar and avatar.strip():
        avatar = avatar.replace("\\", "/")
        if not avatar.startswith("/"):
            employee["AnhDaiDien"] = f"/{avatar}"  # v√≠ d·ª•: /photos/NVTC7.jpg
        else:
            employee["AnhDaiDien"] = avatar
    else:
        employee["AnhDaiDien"] = "/photos/default.jpg"

    # --- X·ª≠ l√Ω tr·∫°ng th√°i l√†m vi·ªác ---
    if employee.get("TrangThai") == 1:
        employee["TrangThaiText"] = "ƒêang l√†m vi·ªác"
        employee["TrangThaiClass"] = "success"
        employee["TrangThaiIcon"] = "fa-circle-check"
    else:
        employee["TrangThaiText"] = "Ng·ª´ng l√†m vi·ªác"
        employee["TrangThaiClass"] = "secondary"
        employee["TrangThaiIcon"] = "fa-pause-circle"

    # --- Ghi log xem chi ti·∫øt ---
    cursor.execute("""
        INSERT INTO LichSuThayDoi
            (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
        VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
    """, (
        "NhanVien",
        ma_nv,
        "Xem chi ti·∫øt",
        "To√†n b·ªô d√≤ng",
        None,
        employee["HoTen"],
        session.get("username", "admin")
    ))

    conn.commit()
    conn.close()

    # --- Tr·∫£ v·ªÅ trang hi·ªÉn th·ªã ---
    return render_template("employee_detail.html", employee=employee)

# Route th√™m nh√¢n vi√™n

@app.route("/employees/add", methods=["GET", "POST"])
@require_role("admin")
def add_employee_web():
    departments = get_phongbans()

    if request.method == "POST":
        HoTen = request.form["HoTen"]
        Email = request.form["Email"]
        SDT = request.form.get("SDT")
        GioiTinh = int(request.form.get("GioiTinh", 1))
        NgaySinh = request.form.get("NgaySinh")
        MaPB = request.form["MaPB"]
        DiaChi = request.form.get("DiaChi")
        ChucVu = request.form.get("ChucVu")

        try:
            # --- K·∫øt n·ªëi DB ---
            conn = get_sql_connection()
            cursor = conn.cursor()

            # --- Sinh m√£ nh√¢n vi√™n ---
            cursor.execute("SELECT MaNV FROM NhanVien WHERE MaPB=? ORDER BY MaNV DESC", (MaPB,))
            row = cursor.fetchone()
            if row and row[0]:
                num_part = ''.join([c for c in row[0] if c.isdigit()])
                next_num = int(num_part[-1]) + 1 if num_part else 1
            else:
                next_num = 1
            MaNV = f"NV{MaPB.upper()}{next_num}"

            # --- Ki·ªÉm tra tr√πng ---
            cursor.execute("SELECT COUNT(*) FROM NhanVien WHERE MaNV=?", (MaNV,))
            if cursor.fetchone()[0] > 0:
                flash(f"M√£ nh√¢n vi√™n {MaNV} ƒë√£ t·ªìn t·∫°i!", "error")
                conn.close()
                return redirect(url_for("employee_list"))

            # --- Th√™m nh√¢n vi√™n ---
            cursor.execute("""
                INSERT INTO NhanVien (MaNV, HoTen, Email, SDT, GioiTinh, NgaySinh, MaPB, DiaChi, ChucVu, TrangThai, NgayTao)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 1, GETDATE())
            """, (MaNV, HoTen, Email, SDT, GioiTinh, NgaySinh, MaPB, DiaChi, ChucVu))
            conn.commit()
            conn.close()
            print(f"‚úÖ ƒê√£ th√™m nh√¢n vi√™n {MaNV} v√†o b·∫£ng NhanVien.")

# --- Ghi l·ªãch s·ª≠ ---
            conn = get_sql_connection()
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO LichSuThayDoi 
                    (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, (
                "NhanVien",
                MaNV,
                "TH√äM",
                "To√†n b·ªô d√≤ng",
                None,
                f"H·ªç t√™n={HoTen}, Email={Email}, Ch·ª©c v·ª•={ChucVu}, Ph√≤ng ban={MaPB}",
                session.get("username", "admin")
            ))
            conn.commit()
            conn.close()


            # --- Nh·∫≠n ·∫£nh t·ª´ client ---
            image_data = request.form.get("face_image")
            image_path = None

            if image_data:
                print("üñºÔ∏è Nh·∫≠n ·∫£nh base64 t·ª´ tr√¨nh duy·ªát, ƒëang l∆∞u...")
                try:
                    image_data = image_data.split(",")[1]
                    image_bytes = base64.b64decode(image_data)

                    save_dir = os.path.join("static", "faces")
                    os.makedirs(save_dir, exist_ok=True)
                    image_path = os.path.join(save_dir, f"{MaNV}.jpg")

                    with open(image_path, "wb") as f:
                        f.write(image_bytes)

                    # --- Ghi DB ---
                    conn = get_sql_connection()
                    cursor = conn.cursor()
                    cursor.execute("""
                        INSERT INTO KhuonMat (MaNV, DuongDanAnh, TrangThai, NgayDangKy, MoTa)
                        VALUES (?, ?, 1, GETDATE(), ?)
                    """, (MaNV, image_path, "·∫¢nh ch·ª•p t·ª´ tr√¨nh duy·ªát khi th√™m nh√¢n vi√™n"))
                    conn.commit()
                    conn.close()
                    flash("‚úÖ ƒê√£ th√™m nh√¢n vi√™n v√† l∆∞u ·∫£nh khu√¥n m·∫∑t (t·ª´ tr√¨nh duy·ªát)!", "success")

                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi l∆∞u ·∫£nh client: {e}")
                    flash("‚ö†Ô∏è L∆∞u ·∫£nh khu√¥n m·∫∑t th·∫•t b·∫°i (client)!", "warning")

            else:
                # --- N·∫øu kh√¥ng c√≥ ·∫£nh client, fallback sang OpenCV ---
                print("üì∏ Kh√¥ng c√≥ ·∫£nh t·ª´ tr√¨nh duy·ªát ‚Üí th·ª≠ ch·ª•p b·∫±ng camera server...")
                image_path = capture_photo_and_save(MaNV)
                if image_path:
                    flash("‚úÖ ƒê√£ ch·ª•p v√† l∆∞u ·∫£nh khu√¥n m·∫∑t (server)!", "success")
                else:
                    flash("‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ·∫£nh khu√¥n m·∫∑t n√†o!", "warning")

            return redirect(url_for("employee_list"))

        except Exception as e:
            print(f"‚ùå L·ªói khi th√™m nh√¢n vi√™n: {e}")
            flash("‚ùå L·ªói khi th√™m nh√¢n vi√™n. Vui l√≤ng th·ª≠ l·∫°i!", "error")
            if 'conn' in locals():
                conn.close()
            return redirect(url_for("employee_list"))

    # N·∫øu GET ‚Üí render form th√™m
    return render_template("add_employee.html", departments=departments)

# --- X√≥a m·ªÅm 1 nh√¢n vi√™n ---
@app.route("/employees/delete/<ma_nv>")
@require_role("admin")
def delete_employee_web(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT HoTen FROM NhanVien WHERE MaNV = ?", (ma_nv,))
        row = cursor.fetchone()
        old_name = row[0] if row else "(Kh√¥ng t√¨m th·∫•y)"

        # ƒê√°nh d·∫•u x√≥a m·ªÅm
        cursor.execute("""
            UPDATE NhanVien
            SET TrangThai = 0, NgayCapNhat = GETDATE()
            WHERE MaNV = ?
        """, (ma_nv,))

        # V√¥ hi·ªáu h√≥a t√†i kho·∫£n
        cursor.execute("UPDATE TaiKhoan SET TrangThai = 0 WHERE MaNV = ?", (ma_nv,))

        # Ghi log
        cursor.execute("""
            INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                                       GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, ("NhanVien", ma_nv, "X√≥a m·ªÅm", "TrangThai", 1, 0, session.get("user_id")))

        conn.commit()
        flash(f"‚úÖ ƒê√£ ·∫©n (x√≥a m·ªÅm) nh√¢n vi√™n {old_name} ({ma_nv}).", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a m·ªÅm nh√¢n vi√™n: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("employee_list"))


# --- X√≥a m·ªÅm nhi·ªÅu nh√¢n vi√™n ---
@app.route("/employees/delete_selected", methods=["POST"])
@require_role("admin")
def delete_selected_employees():
    selected_ids = request.form.getlist("selected_employees")
    if not selected_ids:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn nh√¢n vi√™n n√†o ƒë·ªÉ x√≥a!", "warning")
        return redirect(url_for("employee_list"))

    conn = get_sql_connection()
    cursor = conn.cursor()

    skipped = []  # l∆∞u danh s√°ch nh√¢n vi√™n kh√¥ng th·ªÉ x√≥a
    deleted = []  # l∆∞u danh s√°ch ƒë√£ x√≥a

    try:
        for ma_nv in selected_ids:
            # ‚úÖ Ki·ªÉm tra nh√¢n vi√™n c√≥ ƒëang l√† qu·∫£n l√Ω ph√≤ng ban kh√¥ng
            cursor.execute("SELECT MaPB FROM PhongBan WHERE QuanLyPB = ?", (ma_nv,))
            pb_row = cursor.fetchone()
            if pb_row:
                skipped.append(ma_nv)
                continue  # b·ªè qua kh√¥ng x√≥a

            # ‚úÖ X√≥a m·ªÅm nh√¢n vi√™n (TrangThai = 0)
            cursor.execute("""
                UPDATE NhanVien 
                SET TrangThai = 0, NgayCapNhat = GETDATE()
                WHERE MaNV = ?
            """, (ma_nv,))
            cursor.execute("UPDATE TaiKhoan SET TrangThai = 0 WHERE MaNV = ?", (ma_nv,))

            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, ("NhanVien", ma_nv, "X√≥a m·ªÅm", "TrangThai", 1, 0, session.get("user_id")))

            deleted.append(ma_nv)

        conn.commit()

        # ‚úÖ Hi·ªÉn th·ªã k·∫øt qu·∫£
        msg = ""
        if deleted:
            msg += f"üóë ƒê√£ x√≥a m·ªÅm {len(deleted)} nh√¢n vi√™n th√†nh c√¥ng. "
        if skipped:
            msg += f"‚ö†Ô∏è {len(skipped)} nh√¢n vi√™n ƒëang l√† qu·∫£n l√Ω, kh√¥ng th·ªÉ x√≥a."
        flash(msg.strip(), "info" if skipped else "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a nhi·ªÅu nh√¢n vi√™n: {e}", "danger")

    finally:
        conn.close()

    return redirect(url_for("employee_list"))

# ============================================================
# üîπ DANH S√ÅCH NH√ÇN VI√äN ƒê√É X√ìA
# ============================================================
@app.route("/employees/deleted")
@require_role("admin")
def employee_list_deleted():
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        # üß© L·∫•y danh s√°ch nh√¢n vi√™n ƒë√£ x√≥a (TrangThai = 0) + ·∫£nh khu√¥n m·∫∑t
        cursor.execute("""
            SELECT 
                nv.MaNV, 
                nv.HoTen, 
                nv.Email, 
                nv.SDT, 
                nv.ChucVu, 
                pb.TenPB, 
                ql.HoTen AS TenQuanLy,       -- ‚úÖ L·∫•y t√™n ng∆∞·ªùi qu·∫£n l√Ω t·ª´ QuanLyPB
                nv.NgayCapNhat,
                k.DuongDanAnh
            FROM NhanVien nv
            LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
            LEFT JOIN NhanVien ql ON pb.QuanLyPB = ql.MaNV  -- ‚úÖ ƒë√∫ng c·ªôt hi·ªán c√≥
            LEFT JOIN KhuonMat k ON nv.MaNV = k.MaNV
            WHERE nv.TrangThai = 0
            ORDER BY nv.NgayCapNhat DESC
        """)
        deleted_employees = cursor.fetchall()

        # üè¢ L·∫•y danh s√°ch ph√≤ng ban ƒë√£ x√≥a (TrangThai = 0)
        cursor.execute("""
            SELECT 
                pb.MaPB, 
                pb.TenPB, 
                ql.HoTen AS TenQuanLy, 
                pb.NgayTao
            FROM PhongBan pb
            LEFT JOIN NhanVien ql ON pb.QuanLyPB = ql.MaNV
            WHERE pb.TrangThai = 0
            ORDER BY pb.NgayTao DESC
        """)
        deleted_departments = cursor.fetchall()

    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i danh s√°ch ƒë√£ x√≥a: {str(e)}", "danger")
        deleted_employees, deleted_departments = [], []

    finally:
        conn.close()

    # ‚úÖ Tr·∫£ v·ªÅ giao di·ªán
    return render_template(
        "deleted_records.html",
        deleted_employees=deleted_employees,
        deleted_departments=deleted_departments,
        active_tab="employees"  # tab nh√¢n vi√™n m·ªü m·∫∑c ƒë·ªãnh
    )


# --- Kh√¥i ph·ª•c nh√¢n vi√™n ---
@app.route("/employees/restore/<ma_nv>")
@require_role("admin")
def restore_employee(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            UPDATE NhanVien
            SET TrangThai = 1, NgayCapNhat = GETDATE()
            WHERE MaNV = ?
        """, (ma_nv,))
        cursor.execute("UPDATE TaiKhoan SET TrangThai = 1 WHERE MaNV = ?", (ma_nv,))

        cursor.execute("""
            INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                                       GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, ("NhanVien", ma_nv, "Kh√¥i ph·ª•c", "TrangThai", 0, 1, session.get("user_id")))

        conn.commit()
        flash(f"‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c nh√¢n vi√™n {ma_nv} th√†nh c√¥ng.", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c nh√¢n vi√™n: {e}", "danger")
    finally:
        conn.close()

    # ‚úÖ D√πng giao di·ªán g·ªôp
    return redirect(url_for("employee_list_deleted"))

# --- Kh√¥i ph·ª•c nhi·ªÅu nh√¢n vi√™n ---
@app.route("/employees/restore_selected", methods=["POST"])
@require_role("admin")
def restore_selected_employees():
    selected_ids = request.form.getlist("selected_employees")
    if not selected_ids:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn nh√¢n vi√™n n√†o ƒë·ªÉ kh√¥i ph·ª•c!", "warning")
        return redirect(url_for("employee_list_deleted"))

    conn = get_sql_connection()
    cursor = conn.cursor()
    try:
        for ma_nv in selected_ids:
            cursor.execute("UPDATE NhanVien SET TrangThai = 1, NgayCapNhat = GETDATE() WHERE MaNV = ?", (ma_nv,))
            cursor.execute("UPDATE TaiKhoan SET TrangThai = 1 WHERE MaNV = ?", (ma_nv,))
            cursor.execute("""
                INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                                           GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, ("NhanVien", ma_nv, "Kh√¥i ph·ª•c", "TrangThai", 0, 1, session.get("user_id")))
        conn.commit()
        flash(f"‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c {len(selected_ids)} nh√¢n vi√™n th√†nh c√¥ng.", "success")
    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c nhi·ªÅu nh√¢n vi√™n: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("employee_list_deleted"))


# Route ch·ªânh s·ª≠a nh√¢n vi√™n
@app.route("/employees/edit/<ma_nv>", methods=["GET", "POST"], endpoint="edit_employee_web")
@require_role("admin")
def edit_employee_web(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- L·∫•y th√¥ng tin nh√¢n vi√™n ---
    cursor.execute("""
        SELECT nv.MaNV, nv.MaHienThi, nv.HoTen, nv.Email, nv.SDT, nv.GioiTinh, nv.NgaySinh, nv.DiaChi,
               nv.MaPB, nv.ChucVu, nv.TrangThai, pb.TenPB, km.DuongDanAnh
        FROM NhanVien nv
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat km ON nv.MaNV = km.MaNV
        WHERE nv.MaNV = ?
    """, (ma_nv,))
    row = cursor.fetchone()

    if not row:
        conn.close()
        flash(f"‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n {ma_nv}", "error")
        return redirect(url_for("employee_list"))

    columns = [col[0] for col in cursor.description]
    employee = dict(zip(columns, row))

    # ·∫¢nh ƒë·∫°i di·ªán
    avatar = employee.get("DuongDanAnh")
    if avatar and avatar.strip():
        avatar = avatar.replace("\\", "/")
        if not avatar.startswith("/"):
            avatar = f"/{avatar}"
        employee["AnhDaiDien"] = avatar
    else:
        employee["AnhDaiDien"] = "/photos/default.jpg"

    # Danh s√°ch ph√≤ng ban
    cursor.execute("SELECT MaPB, TenPB FROM PhongBan")
    departments = [dict(zip([c[0] for c in cursor.description], r)) for r in cursor.fetchall()]
    conn.close()

    # N·∫øu ng∆∞·ªùi d√πng c·∫≠p nh·∫≠t
    if request.method == "POST":
        hoten = request.form.get("HoTen", "").strip()
        email = request.form.get("Email", "").strip()
        sdt = request.form.get("SDT", "").strip()
        ngaysinh = request.form.get("NgaySinh", "").strip() or None
        diachi = request.form.get("DiaChi", "").strip()
        ma_pb_moi = request.form.get("MaPB", "").strip()
        chucvu = request.form.get("ChucVu", "").strip()

        gioitinh = 1 if request.form.get("GioiTinh", "").lower() in ["1", "nam", "true"] else 0
        trangthai = 1 if request.form.get("TrangThai", "").lower() in ["1", "ho·∫°t ƒë·ªông", "active", "true"] else 0

        file = request.files.get("avatar")
        user_id = session.get("user_id", "H·ªá th·ªëng")

        conn = get_sql_connection()
        cursor = conn.cursor()

        # L·∫•y ph√≤ng ban v√† m√£ hi·ªÉn th·ªã hi·ªán t·∫°i
        cursor.execute("SELECT MaPB, MaHienThi FROM NhanVien WHERE MaNV=?", (ma_nv,))
        row = cursor.fetchone()
        old_pb = row[0] if row else None
        old_ma_hienthi = row[1] if row else None

        # üü¶ N·∫øu ƒë·ªïi ph√≤ng ban ‚Üí sinh MaHienThi m·ªõi theo MaHienThi c·ªßa PhongBan
        if ma_pb_moi != old_pb:
            # L·∫•y m√£ hi·ªÉn th·ªã c·ªßa ph√≤ng ban (v√≠ d·ª•: KD, TC, NS, MT, M)
            cursor.execute("SELECT MaHienThi FROM PhongBan WHERE MaPB=?", (ma_pb_moi,))
            row = cursor.fetchone()
            pb_short = None
            if row and row[0]:
                pb_short = row[0].strip().upper()
            else:
                print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y MaHienThi c·ªßa ph√≤ng ban {ma_pb_moi}, fallback v·ªÅ 2 k√Ω t·ª± cu·ªëi.")
                pb_short = ma_pb_moi[-2:].upper()

            # Ki·ªÉm tra ƒë·ªô d√†i ‚Äî n·∫øu qu√° ng·∫Øn, th√™m ch·ªØ X ƒë·ªÉ tr√°nh l·ªói
            if len(pb_short) < 1:
                pb_short = "XX"

            # T√¨m m√£ hi·ªÉn th·ªã cao nh·∫•t trong ph√≤ng ban ƒë√≥
            cursor.execute("""
                SELECT TOP 1 MaHienThi FROM NhanVien 
                WHERE MaPB=? AND MaHienThi LIKE ?
                ORDER BY MaHienThi DESC
            """, (ma_pb_moi, f"NV{pb_short}%"))
            row = cursor.fetchone()
            if row and row[0]:
                num_part = ''.join([c for c in row[0] if c.isdigit()])
                next_num = int(num_part) + 1 if num_part else 1
            else:
                next_num = 1

            # Gh√©p m√£ hi·ªÉn th·ªã m·ªõi
            new_ma_hienthi = f"NV{pb_short}{next_num}"

            # C·∫≠p nh·∫≠t nh√¢n vi√™n
            cursor.execute("""
    UPDATE NhanVien
    SET HoTen=?, Email=?, SDT=?, GioiTinh=?, NgaySinh=?, DiaChi=?, 
        MaPB=?, ChucVu=?, TrangThai=?, NgayCapNhat=GETDATE()
    WHERE MaNV=?
""", (hoten, email, sdt, gioitinh, ngaysinh, diachi,
      ma_pb_moi, chucvu, trangthai, ma_nv))


            # Ghi log thay ƒë·ªïi
            cursor.execute("""
                INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, NguoiThucHien)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, ("NhanVien", ma_nv, "S·ª≠a", "MaPB", old_pb, ma_pb_moi, user_id))
            cursor.execute("""
                INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, NguoiThucHien)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, ("NhanVien", ma_nv, "S·ª≠a", "MaHienThi", old_ma_hienthi, new_ma_hienthi, user_id))

        else:
            # üîπ Kh√¥ng ƒë·ªïi ph√≤ng ban ‚Üí ch·ªâ c·∫≠p nh·∫≠t th√¥ng tin
            cursor.execute("""
                UPDATE NhanVien
                SET HoTen=?, Email=?, SDT=?, GioiTinh=?, NgaySinh=?, DiaChi=?, 
                    MaPB=?, ChucVu=?, TrangThai=?
                WHERE MaNV=?
            """, (hoten, email, sdt, gioitinh, ngaysinh, diachi,
                  ma_pb_moi, chucvu, trangthai, ma_nv))
            new_ma_hienthi = old_ma_hienthi

        # ·∫¢nh ƒë·∫°i di·ªán
        if file and file.filename != "":
            os.makedirs("photos", exist_ok=True)
            filename = f"{new_ma_hienthi}.jpg"
            save_path = os.path.join("photos", filename)
            file.save(save_path)
            db_path = f"photos/{filename}"

            cursor.execute("SELECT COUNT(*) FROM KhuonMat WHERE MaNV=?", (ma_nv,))
            exists = cursor.fetchone()[0]
            if exists:
                cursor.execute("UPDATE KhuonMat SET DuongDanAnh=? WHERE MaNV=?", (db_path, ma_nv))
            else:
                cursor.execute("INSERT INTO KhuonMat (MaNV, DuongDanAnh, TrangThai) VALUES (?, ?, 1)",
                               (ma_nv, db_path))

            cursor.execute("""
                INSERT INTO LichSuThayDoi
                (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriMoi, NguoiThucHien)
                VALUES (?, ?, ?, ?, ?, ?)
            """, ("KhuonMat", ma_nv, "C·∫≠p nh·∫≠t", "DuongDanAnh", db_path, user_id))

        conn.commit()
        conn.close()

        flash("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n th√†nh c√¥ng!", "success")
        return redirect(url_for("employee_detail", ma_nv=ma_nv))

    return render_template("edit_employee.html", employee=employee, departments=departments)

@app.route("/deleted_records")
@require_role("admin")
def deleted_data():
    tab = request.args.get("tab", "employees")  # tab m·∫∑c ƒë·ªãnh
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        # =====================================================
        # üßç‚Äç‚ôÇÔ∏è NH√ÇN VI√äN
        # =====================================================
        if tab == "employees":
            cursor.execute("""
                SELECT nv.MaNV, nv.HoTen, nv.Email, nv.ChucVu, pb.TenPB
                FROM NhanVien nv
                LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
                WHERE nv.TrangThai = 0
            """)
            deleted_employees = cursor.fetchall()
            return render_template(
                "deleted_records.html",
                active_tab="employees",
                deleted_employees=deleted_employees
            )

        # =====================================================
        # üè¢ PH√íNG BAN
        # =====================================================
        elif tab == "departments":
            cursor.execute("""
                SELECT pb.MaPB, pb.TenPB, pb.QuanLy, 
                       (SELECT COUNT(*) FROM NhanVien WHERE MaPB = pb.MaPB) AS SoNhanVien
                FROM PhongBan pb
                WHERE pb.TrangThai = 0
            """)
            deleted_departments = cursor.fetchall()
            return render_template(
                "deleted_records.html",
                active_tab="departments",
                deleted_departments=deleted_departments
            )

        # =====================================================
        # üîê T√ÄI KHO·∫¢N
        # =====================================================
        elif tab == "accounts":
            cursor.execute("""
                SELECT t.MaTK, t.TenDangNhap, ISNULL(n.HoTen, N'‚Äî') AS HoTen, 
                       t.VaiTro, t.NgayTao
                FROM TaiKhoan t
                LEFT JOIN NhanVien n ON t.MaNV = n.MaNV
                WHERE t.TrangThai = 0
            """)
            deleted_accounts = cursor.fetchall()
            return render_template(
                "deleted_records.html",
                active_tab="accounts",
                deleted_accounts=deleted_accounts
            )

                # =====================================================
        # üïì CH·∫§M C√îNG (ƒë√£ ch·ªânh chu·∫©n theo b·∫£n /attendance/deleted)
        # =====================================================
        elif tab == "attendance":
            from datetime import datetime, time

            # L·∫•y d·ªØ li·ªáu ch·∫•m c√¥ng
            cursor.execute("""
                SELECT 
                    cc.MaChamCong,
                    ISNULL(cc.MaNV, nv.MaNV) AS MaNV,
                    nv.HoTen,
                    pb.TenPB,
                    clv.TenCa,
                    cc.NgayChamCong,
                    cc.GioVao,
                    cc.GioRa,
                    cc.TrangThai

                FROM ChamCong cc
                JOIN NhanVien nv ON cc.MaNV = nv.MaNV
                LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
                LEFT JOIN CaLamViec clv ON cc.MaCa = clv.MaCa
                WHERE cc.DaXoa = 0
                ORDER BY cc.NgayChamCong DESC
            """)
            rows = cursor.fetchall()

            # ‚úÖ H√†m format gi·ªù (ch·ªâ l·∫•y HH:MM:SS, b·ªè ng√†y 1900)
            def format_time(value):
                if not value:
                    return "‚Äî"
                if isinstance(value, (datetime, time)):
                    return value.strftime("%H:%M:%S")
                val = str(value)
                if " " in val:
                    val = val.split(" ")[-1]
                if "1900" in val:
                    val = val.replace("1900-01-01", "").strip()
                return val or "‚Äî"

            deleted_attendance = []
            for row in rows:
                ma_cham_cong, ma_nv, ho_ten, ten_pb, ten_ca, ngay, gio_vao, gio_ra, trang_thai = row

                gio_vao_txt = format_time(gio_vao)
                gio_ra_txt = format_time(gio_ra)

                trang_thai = int(trang_thai) if trang_thai is not None else -1
                if trang_thai == 1:
                    status_text, status_class = "ƒê√∫ng gi·ªù", "bg-success"
                elif trang_thai == 2:
                    status_text, status_class = "ƒêi mu·ªôn", "bg-warning text-dark"
                elif trang_thai == 0:
                    status_text, status_class = "V·∫Øng", "bg-danger"
                else:
                    status_text, status_class = "Kh√¥ng x√°c ƒë·ªãnh", "bg-secondary"

                deleted_attendance.append({
                    "MaChamCong": str(ma_cham_cong).strip(),
                    "MaNV": str(ma_nv).strip() if ma_nv else "‚Äî",
                    "HoTen": ho_ten or "",
                    "TenPB": ten_pb or "",
                    "TenCa": ten_ca or "",
                    "NgayChamCong": (
                        ngay.strftime("%Y-%m-%d") if isinstance(ngay, datetime)
                        else str(ngay)[:10] if ngay else ""
                    ),
                    "GioVao": gio_vao_txt,
                    "GioRa": gio_ra_txt,
                    "TrangThai": trang_thai,
                    "TrangThaiText": status_text,
                    "StatusClass": status_class
                })

            # ‚úÖ Render ƒë√∫ng tab
            return render_template(
                "deleted_records.html",
                active_tab="attendance",
                deleted_attendance=deleted_attendance
            )


        # =====================================================
        # üòÉ KHU√îN M·∫∂T
        # =====================================================
        elif tab == "faces":
            cursor.execute("""
                SELECT 
                    k.FaceID,
                    k.MaNV,
                    nv.HoTen,
                    pb.TenPB,
                    k.DuongDanAnh,
                    k.NgayDangKy,
                    k.TrangThai,
                    k.MoTa
                FROM KhuonMat k
                JOIN NhanVien nv ON k.MaNV = nv.MaNV
                LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
                WHERE nv.TrangThai = 0 OR k.TrangThai = 0
                ORDER BY k.NgayDangKy DESC
            """)
            deleted_faces = cursor.fetchall()
            return render_template(
                "deleted_records.html",
                active_tab="faces",
                deleted_faces=deleted_faces
            )

        # =====================================================
        # üö® TR∆Ø·ªúNG H·ª¢P KH√ÅC
        # =====================================================
        else:
            flash("‚ö†Ô∏è Tab kh√¥ng h·ª£p l·ªá, ƒë√£ chuy·ªÉn v·ªÅ Nh√¢n vi√™n!", "warning")
            return redirect(url_for("deleted_data", tab="employees"))

    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu ƒë√£ x√≥a: {e}", "error")
        return redirect(url_for("admin_dashboard"))

    finally:
        conn.close()

# QU·∫¢N L√ù PH√íNG BAN

# ============================================================
# üîπ DANH S√ÅCH PH√íNG BAN (ch·ªâ ph√≤ng ƒëang ho·∫°t ƒë·ªông)
# ============================================================
@app.route("/departments")
@require_role("admin")
def departments():
    conn = get_sql_connection()
    cursor = conn.cursor()
    keyword = request.args.get("q", "").strip()

    # --- L·∫•y danh s√°ch ph√≤ng ban ƒëang ho·∫°t ƒë·ªông + t√™n ng∆∞·ªùi qu·∫£n l√Ω ---
    query = """
        SELECT 
            pb.MaPB, 
            pb.TenPB, 
            nv.HoTen AS TenQuanLy, 
            pb.TrangThai, 
            COUNT(nv2.MaNV) AS SoNhanVien
        FROM PhongBan pb
        LEFT JOIN NhanVien nv ON pb.QuanLyPB = nv.MaNV        -- ‚úÖ T√™n qu·∫£n l√Ω
        LEFT JOIN NhanVien nv2 ON pb.MaPB = nv2.MaPB           -- ‚úÖ ƒê·∫øm nh√¢n vi√™n
        WHERE pb.TrangThai = 1                                 -- ‚úÖ Ch·ªâ l·∫•y ph√≤ng ƒëang ho·∫°t ƒë·ªông
    """

    params = ()
    if keyword:
        query += " AND (pb.TenPB LIKE ? OR pb.MaPB LIKE ?)"
        params = (f"%{keyword}%", f"%{keyword}%")

    query += """
        GROUP BY pb.MaPB, pb.TenPB, nv.HoTen, pb.TrangThai
        ORDER BY pb.MaPB
    """
    cursor.execute(query, params)
    rows = cursor.fetchall()

    # --- Chu·∫©n b·ªã d·ªØ li·ªáu render ---
    departments = []
    for row in rows:
        ma_pb, ten_pb, ten_quan_ly, trang_thai, so_nv = row
        departments.append({
            "ma_pb": ma_pb,
            "ten_pb": ten_pb,
            "so_nv": so_nv,
            "manager": ten_quan_ly if ten_quan_ly else "Ch∆∞a c√≥",
            "trang_thai": "ƒêang ho·∫°t ƒë·ªông",
            "last_updated": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        })

    # --- Th·ªëng k√™ (ch·ªâ ƒë·∫øm ph√≤ng ho·∫°t ƒë·ªông) ---
    cursor.execute("SELECT COUNT(*) FROM PhongBan WHERE TrangThai = 1")
    active_departments = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM PhongBan WHERE TrangThai = 1")
    total_departments = cursor.fetchone()[0]  # ‚úÖ T·ªïng c≈©ng ch·ªâ t√≠nh ph√≤ng ho·∫°t ƒë·ªông

    cursor.execute("""
        SELECT COUNT(*) 
        FROM NhanVien nv
        JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        WHERE nv.TrangThai = 1 AND pb.TrangThai = 1
    """)
    total_employees = cursor.fetchone()[0]  # ‚úÖ Ch·ªâ ƒë·∫øm nh√¢n vi√™n thu·ªôc ph√≤ng ho·∫°t ƒë·ªông

    conn.close()

    # --- Render ---
    return render_template(
        "departments.html",
        departments=departments,
        keyword=keyword,
        total_departments=total_departments,
        total_employees=total_employees,
        active_departments=active_departments
    )


# ============================================================
# üîπ CHI TI·∫æT PH√íNG BAN (ch·ªâ cho ph√©p xem n·∫øu ƒëang ho·∫°t ƒë·ªông)
# ============================================================
@app.route("/departments/<ma_pb>")
@require_role("admin")
def department_detail(ma_pb):
    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- L·∫•y th√¥ng tin ph√≤ng ban (ch·ªâ ho·∫°t ƒë·ªông) ---
    cursor.execute("""
        SELECT 
            pb.MaPB, 
            pb.TenPB, 
            nv.HoTen AS TenQuanLy, 
            pb.TrangThai, 
            pb.MoTa
        FROM PhongBan pb
        LEFT JOIN NhanVien nv ON pb.QuanLyPB = nv.MaNV
        WHERE pb.MaPB = ? AND pb.TrangThai = 1
    """, (ma_pb,))
    row = cursor.fetchone()

    if not row:
        conn.close()
        flash("‚ùå Ph√≤ng ban n√†y kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ng·ª´ng ho·∫°t ƒë·ªông!", "error")
        return redirect(url_for("departments"))

    ma_pb, ten_pb, ten_quan_ly, trang_thai, mo_ta = row
    pb_info = {
        "ma_pb": ma_pb,
        "ten_pb": ten_pb,
        "quan_ly": ten_quan_ly if ten_quan_ly else "Ch∆∞a c√≥",
        "trang_thai": "ƒêang ho·∫°t ƒë·ªông",
        "mo_ta": mo_ta if mo_ta else "Kh√¥ng c√≥ m√¥ t·∫£"
    }

    # --- Ghi log xem chi ti·∫øt ---
    try:
        username = session.get("username") or session.get("user_id") or "admin"
        cursor.execute("EXEC sys.sp_set_session_context @key=N'user', @value=?", (username,))
        cursor.execute("""
            INSERT INTO LichSuThayDoi
            (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, (
            "PhongBan",
            ma_pb,
            "Xem chi ti·∫øt",
            "To√†n b·ªô d√≤ng",
            None,
            pb_info["ten_pb"],
            username
        ))
        conn.commit()
    except Exception as e:
        print("‚ö†Ô∏è L·ªói ghi log xem chi ti·∫øt ph√≤ng ban:", e)

    # --- L·∫•y danh s√°ch nh√¢n vi√™n trong ph√≤ng ban ho·∫°t ƒë·ªông ---
    keyword = request.args.get("q", "").strip()
    order = request.args.get("sort", "ten")

    query = """
        SELECT MaNV, HoTen, ChucVu, NgayVaoLam
        FROM NhanVien
        WHERE MaPB = ? AND TrangThai = 1
    """
    params = [ma_pb]
    if keyword:
        query += " AND (HoTen LIKE ? OR MaNV LIKE ? OR ChucVu LIKE ?)"
        params.extend([f"%{keyword}%", f"%{keyword}%", f"%{keyword}%"])

    if order == "ten":
        query += " ORDER BY HoTen"
    elif order == "chucvu":
        query += " ORDER BY ChucVu"
    else:
        query += " ORDER BY MaNV"

    cursor.execute(query, params)
    nhanviens = cursor.fetchall()

    conn.close()

    return render_template(
        "department_detail.html",
        pb=pb_info,
        nhanviens=nhanviens,
        keyword=keyword,
        order=order
    )

@app.route("/departments/my")
@require_role("manager")
def my_department():
    ma_nv = session.get("ma_nv")
    conn = get_sql_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT MaPB FROM PhongBan WHERE QuanLyPB = ?
    """, (ma_nv,))
    ma_pb = cursor.fetchone()
    if not ma_pb:
        flash("B·∫°n ch∆∞a ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh l√†m qu·∫£n l√Ω ph√≤ng ban n√†o!", "info")
        return redirect(url_for("home"))
    return redirect(url_for("department_detail", ma_pb=ma_pb[0]))


#th√™m ph√≤ng ban
@app.route("/departments/add", methods=["GET", "POST"])
@require_role("admin")
def add_department():
    if request.method == "POST":
        ten_pb = request.form["ten_pb"].strip()
        mo_ta = request.form.get("mo_ta", "").strip()

        if not ten_pb:
            flash("T√™n ph√≤ng ban kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", "error")
            return redirect(url_for("add_department"))

        # T·∫°o m√£ vi·∫øt t·∫Øt t·ª´ t√™n ph√≤ng ban
        # V√≠ d·ª•: "C√¥ng ngh·ªá th√¥ng tin" -> "CNTT"
        words = ten_pb.split()
        ma_pb_base = "".join(w[0].upper() for w in words if w)
        ma_pb = ma_pb_base

        conn = get_sql_connection()
        cursor = conn.cursor()

        # N·∫øu m√£ b·ªã tr√πng, th√™m s·ªë tƒÉng d·∫ßn ph√≠a sau: KD1, KD2, ...
        i = 1
        while True:
            cursor.execute("SELECT COUNT(*) FROM PhongBan WHERE MaPB = ?", (ma_pb,))
            count = cursor.fetchone()[0]
            if count == 0:
                break
            ma_pb = f"{ma_pb_base}{i}"
            i += 1

        ngay_tao = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        trang_thai = 1  # 1 = ho·∫°t ƒë·ªông

        # Th√™m ph√≤ng ban v√†o database
        cursor.execute(
            "INSERT INTO PhongBan (MaPB, TenPB, MoTa, NgayTao, TrangThai) VALUES (?, ?, ?, ?, ?)",
            (ma_pb, ten_pb, mo_ta, ngay_tao, trang_thai)
        )
        conn.commit()
        conn.close()

        flash(f"Th√™m ph√≤ng ban '{ten_pb}' (M√£: {ma_pb}) th√†nh c√¥ng!", "success")
        return redirect(url_for("departments"))

    return render_template("add_department.html")
# --- Ch·ªânh s·ª≠a ph√≤ng ban ---
@app.route("/departments/edit/<ma_pb>", methods=["GET", "POST"])
@require_role("admin")
def edit_department(ma_pb):
    conn = get_sql_connection()
    cursor = conn.cursor()

    # L·∫•y d·ªØ li·ªáu ph√≤ng ban c≈©
    cursor.execute("SELECT MaPB, TenPB, MoTa, TrangThai FROM PhongBan WHERE MaPB = ?", (ma_pb,))
    department = cursor.fetchone()

    if not department:
        flash("Kh√¥ng t√¨m th·∫•y ph√≤ng ban!", "danger")
        conn.close()
        return redirect(url_for("departments"))

    old_ma_pb, old_ten_pb, old_mo_ta, old_trang_thai = department

    if request.method == "POST":
        ten_pb = request.form["ten_pb"].strip()
        mo_ta = request.form["mo_ta"].strip()
        trang_thai = 1 if request.form.get("trang_thai") == "on" else 0

        # H√†m t·∫°o m√£ vi·∫øt t·∫Øt t·ª´ t√™n ph√≤ng ban
        def tao_ma_viet_tat(ten):
            parts = ten.strip().split()
            if len(parts) == 1:
                return parts[0][:2].upper()
            else:
                return "".join(word[0].upper() for word in parts)

        new_ma_pb = tao_ma_viet_tat(ten_pb)

        try:
            # N·∫øu ch·ªâ ƒë·ªïi m√¥ t·∫£/tr·∫°ng th√°i, kh√¥ng ƒë·ªïi t√™n
            if ten_pb == old_ten_pb:
                cursor.execute("""
                    UPDATE PhongBan
                    SET MoTa = ?, TrangThai = ?
                    WHERE MaPB = ?
                """, (mo_ta, trang_thai, old_ma_pb))
                conn.commit()
                flash("C·∫≠p nh·∫≠t m√¥ t·∫£ ph√≤ng ban th√†nh c√¥ng!", "success")

            else:
                # Ki·ªÉm tra tr√πng m√£ ph√≤ng ban
                cursor.execute("SELECT COUNT(*) FROM PhongBan WHERE MaPB = ?", (new_ma_pb,))
                if cursor.fetchone()[0] > 0:
                    flash(f"M√£ ph√≤ng ban '{new_ma_pb}' ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn t√™n kh√°c.", "danger")
                    conn.close()
                    return redirect(url_for("departments"))

                #  T·∫°o ph√≤ng ban m·ªõi
                cursor.execute("""
                    INSERT INTO PhongBan (MaPB, TenPB, MoTa, TrangThai)
                    VALUES (?, ?, ?, ?)
                """, (new_ma_pb, ten_pb, mo_ta, trang_thai))

                # L·∫•y danh s√°ch nh√¢n vi√™n thu·ªôc ph√≤ng ban c≈©
                cursor.execute("SELECT MaNV FROM NhanVien WHERE MaPB = ?", (old_ma_pb,))
                old_nv_list = [row[0] for row in cursor.fetchall()]

                # T·∫Øt to√†n b·ªô r√†ng bu·ªôc FK li√™n quan ƒë·∫øn MaNV
                cursor.execute("ALTER TABLE TaiKhoan NOCHECK CONSTRAINT FK_TaiKhoan_NhanVien")
                cursor.execute("ALTER TABLE KhuonMat NOCHECK CONSTRAINT FK__KhuonMat__MaNV__4222D4EF")
                cursor.execute("ALTER TABLE ChamCong NOCHECK CONSTRAINT FK__ChamCong__MaNV__4F7CD00D")
                cursor.execute("ALTER TABLE LichLamViec NOCHECK CONSTRAINT FK__LichLamVie__MaNV__4AB81AF0")

                # C·∫≠p nh·∫≠t m√£ nh√¢n vi√™n v√† ƒë·ªìng b·ªô sang c√°c b·∫£ng li√™n quan
                for old_nv in old_nv_list:
                    so_thu_tu = ''.join(ch for ch in old_nv if ch.isdigit())
                    new_nv = f"NV{new_ma_pb}{so_thu_tu}"

                    # NhanVien
                    cursor.execute("""
                        UPDATE NhanVien
                        SET MaNV = ?, MaPB = ?
                        WHERE MaNV = ?
                    """, (new_nv, new_ma_pb, old_nv))

                    # TaiKhoan
                    # TaiKhoan ‚Äì ch·ªâ c·∫≠p nh·∫≠t cho nh√¢n vi√™n (kh√¥ng ch·∫°m admin)
                    cursor.execute("""
                        UPDATE TaiKhoan
                        SET MaNV = ?, TenDangNhap = ?
                        WHERE MaNV = ? AND VaiTro = 'nhanvien'
                    """, (new_nv, new_nv, old_nv))


                    # KhuonMat
                    cursor.execute("""
                        UPDATE KhuonMat
                        SET MaNV = ?
                        WHERE MaNV = ?
                    """, (new_nv, old_nv))

                    # ChamCong
                    cursor.execute("""
                        UPDATE ChamCong
                        SET MaNV = ?
                        WHERE MaNV = ?
                    """, (new_nv, old_nv))

                    # LichLamViec
                    cursor.execute("""
                        UPDATE LichLamViec
                        SET MaNV = ?
                        WHERE MaNV = ?
                    """, (new_nv, old_nv))

                # B·∫≠t l·∫°i c√°c r√†ng bu·ªôc FK
                cursor.execute("ALTER TABLE TaiKhoan WITH CHECK CHECK CONSTRAINT FK_TaiKhoan_NhanVien")
                cursor.execute("ALTER TABLE KhuonMat WITH CHECK CHECK CONSTRAINT FK__KhuonMat__MaNV__4222D4EF")
                cursor.execute("ALTER TABLE ChamCong WITH CHECK CHECK CONSTRAINT FK__ChamCong__MaNV__4F7CD00D")
                cursor.execute("ALTER TABLE LichLamViec WITH CHECK CHECK CONSTRAINT FK__LichLamVie__MaNV__4AB81AF0")

                # X√≥a ph√≤ng ban c≈©
                cursor.execute("DELETE FROM PhongBan WHERE MaPB = ?", (old_ma_pb,))

                conn.commit()
                flash(f"ƒê√£ ƒë·ªïi '{old_ten_pb}' ‚Üí '{ten_pb}' (m√£ m·ªõi: {new_ma_pb}) v√† ƒë·ªìng b·ªô to√†n b·ªô d·ªØ li·ªáu nh√¢n vi√™n, t√†i kho·∫£n, khu√¥n m·∫∑t, ch·∫•m c√¥ng, l·ªãch l√†m vi·ªác th√†nh c√¥ng!", "success")

        except Exception as e:
            conn.rollback()
            flash(f"L·ªói khi c·∫≠p nh·∫≠t ph√≤ng ban: {e}", "danger")

        finally:
            conn.close()

        return redirect(url_for("departments"))

    conn.close()
    return render_template("edit_department.html", department=department)

# ============================================================
# üîπ X√ìA M·ªÄM 1 PH√íNG BAN
# ============================================================
@app.route("/departments/delete/<string:ma_pb>", methods=["POST"])
@require_role("admin")
def delete_department(ma_pb):
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        # ‚úÖ L·∫•y th√¥ng tin ƒë·ªÉ ghi log
        cursor.execute("SELECT TenPB, TrangThai FROM PhongBan WHERE MaPB = ?", (ma_pb,))
        row = cursor.fetchone()
        if not row:
            flash("‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng ban ƒë·ªÉ x√≥a!", "danger")
            return redirect(url_for("departments"))

        old_name, old_status = row

        # ‚úÖ X√≥a m·ªÅm: TrangThai = 0
        cursor.execute("""
            UPDATE PhongBan
            SET TrangThai = 0
            WHERE MaPB = ?
        """, (ma_pb,))

        # ‚úÖ Ghi log
        cursor.execute("""
            INSERT INTO LichSuThayDoi (
                TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
            )
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, (
            "PhongBan",
            ma_pb,
            "X√≥a m·ªÅm",
            "TrangThai",
            old_status,
            0,
            session.get("username", "H·ªá th·ªëng")
        ))

        conn.commit()
        flash(f"üóë ƒê√£ x√≥a m·ªÅm ph√≤ng ban {old_name} ({ma_pb}).", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a m·ªÅm ph√≤ng ban: {str(e)}", "danger")

    finally:
        conn.close()

    return redirect(url_for("departments"))


# ============================================================
# üîπ X√ìA M·ªÄM NHI·ªÄU PH√íNG BAN
# ============================================================
@app.route("/departments/delete-multiple", methods=["POST"])
@require_role("admin")
def delete_multiple_departments():
    selected_ids = request.form.getlist("selected_departments")

    if not selected_ids:
        flash("‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn ph√≤ng ban n√†o ƒë·ªÉ x√≥a!", "warning")
        return redirect(url_for("departments"))

    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        for ma_pb in selected_ids:
            cursor.execute("SELECT TenPB, TrangThai FROM PhongBan WHERE MaPB = ?", (ma_pb,))
            row = cursor.fetchone()
            if not row:
                continue

            old_name, old_status = row

            # ‚úÖ X√≥a m·ªÅm
            cursor.execute("""
                UPDATE PhongBan
                SET TrangThai = 0
                WHERE MaPB = ?
            """, (ma_pb,))

            # ‚úÖ Ghi log
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, (
                "PhongBan",
                ma_pb,
                "X√≥a m·ªÅm nhi·ªÅu",
                "TrangThai",
                old_status,
                0,
                username
            ))

        conn.commit()
        flash(f"üóë ƒê√£ x√≥a m·ªÅm {len(selected_ids)} ph√≤ng ban th√†nh c√¥ng.", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a nhi·ªÅu ph√≤ng ban: {str(e)}", "danger")

    finally:
        conn.close()

    return redirect(url_for("departments"))

# ============================================================
# üîπ KH√îI PH·ª§C 1 PH√íNG BAN (CHU·∫®N)
# ============================================================
@app.route("/departments/restore/<string:ma_pb>", methods=["POST"])
@require_role("admin")
def restore_department(ma_pb):
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        print(f"üîÑ ƒêang kh√¥i ph·ª•c ph√≤ng ban: {ma_pb}")

        # üß© Ki·ªÉm tra xem ph√≤ng ban c√≥ t·ªìn t·∫°i v√† ƒëang b·ªã t·∫Øt kh√¥ng
        cursor.execute("""
            SELECT TenPB, TrangThai 
            FROM PhongBan 
            WHERE MaPB = ?
        """, (ma_pb,))
        row = cursor.fetchone()

        if not row:
            flash("‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng ban c·∫ßn kh√¥i ph·ª•c!", "danger")
            return redirect(url_for("deleted_departments_list"))

        ten_pb, trang_thai = row

        # üü† N·∫øu ph√≤ng ban ƒë√£ ho·∫°t ƒë·ªông r·ªìi th√¨ kh√¥ng c·∫ßn kh√¥i ph·ª•c
        if trang_thai == 1:
            flash(f"‚ö†Ô∏è Ph√≤ng ban {ten_pb} ({ma_pb}) ƒëang ho·∫°t ƒë·ªông, kh√¥ng c·∫ßn kh√¥i ph·ª•c.", "warning")
            return redirect(url_for("deleted_departments_list"))

        # ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh 1 (ho·∫°t ƒë·ªông)
        cursor.execute("""
            UPDATE PhongBan
            SET TrangThai = 1
            WHERE MaPB = ?
        """, (ma_pb,))

        # ‚úÖ Ghi log h√†nh ƒë·ªông kh√¥i ph·ª•c
        username = session.get("username", "H·ªá th·ªëng")
        cursor.execute("""
            INSERT INTO LichSuThayDoi (
                TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
            )
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, (
            "PhongBan",
            ma_pb,
            "Kh√¥i ph·ª•c",
            "TrangThai",
            trang_thai,
            1,
            username
        ))

        conn.commit()
        flash(f"‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c ph√≤ng ban {ten_pb} ({ma_pb}) th√†nh c√¥ng.", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c ph√≤ng ban: {str(e)}", "danger")

    finally:
        conn.close()

    # ‚úÖ Quay l·∫°i danh s√°ch ph√≤ng ban ƒë√£ x√≥a
    return redirect(url_for("deleted_departments_list"))

# ============================================================
# üîπ KH√îI PH·ª§C NHI·ªÄU PH√íNG BAN
# ============================================================
@app.route("/departments/restore-multiple", methods=["POST"])
@require_role("admin")
def restore_multiple_departments():
    selected_ids = request.form.getlist("selected_departments")

    if not selected_ids:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn ph√≤ng ban n√†o ƒë·ªÉ kh√¥i ph·ª•c!", "warning")
        return redirect(url_for("deleted_departments_list"))

    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        for ma_pb in selected_ids:
            cursor.execute("""
                UPDATE PhongBan
                SET TrangThai = 1
                WHERE MaPB = ?
            """, (ma_pb,))

            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, (
                "PhongBan",
                ma_pb,
                "Kh√¥i ph·ª•c nhi·ªÅu",
                "TrangThai",
                0,
                1,
                username
            ))

        conn.commit()
        flash(f"‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c {len(selected_ids)} ph√≤ng ban th√†nh c√¥ng.", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c nhi·ªÅu ph√≤ng ban: {str(e)}", "danger")

    finally:
        conn.close()

    return redirect(url_for("deleted_departments_list"))

# ============================================================
# üîπ DANH S√ÅCH PH√íNG BAN & NH√ÇN VI√äN ƒê√É X√ìA (C√ì T√äN NG∆Ø·ªúI QU·∫¢N L√ù)
# ============================================================
@app.route("/departments/deleted")
@require_role("admin")
def deleted_departments_list():
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        # üè¢ L·∫•y danh s√°ch ph√≤ng ban ƒë√£ x√≥a (TrangThai = 0) + t√™n ng∆∞·ªùi qu·∫£n l√Ω
        cursor.execute("""
            SELECT 
                pb.MaPB, 
                pb.TenPB, 
                ql.HoTen AS TenQuanLy,       -- ‚úÖ L·∫•y t√™n qu·∫£n l√Ω th·∫≠t
                pb.NgayTao
            FROM PhongBan pb
            LEFT JOIN NhanVien ql ON pb.QuanLyPB = ql.MaNV  -- ‚úÖ ƒë√∫ng c·ªôt hi·ªán c√≥
            WHERE pb.TrangThai = 0
            ORDER BY pb.NgayTao DESC
        """)
        deleted_departments = cursor.fetchall()

        # üë®‚Äçüíº L·∫•y danh s√°ch nh√¢n vi√™n ƒë√£ x√≥a (TrangThai = 0)
        cursor.execute("""
            SELECT 
                nv.MaNV, 
                nv.HoTen, 
                nv.Email, 
                nv.SDT, 
                nv.ChucVu, 
                pb.TenPB, 
                nv.NgayCapNhat,
                ql.HoTen AS TenQuanLy
            FROM NhanVien nv
            LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
            LEFT JOIN NhanVien ql ON pb.QuanLyPB = ql.MaNV  -- ‚úÖ th√™m ƒë·ªÉ l·∫•y qu·∫£n l√Ω ph√≤ng ban c·ªßa nh√¢n vi√™n ƒë√≥
            WHERE nv.TrangThai = 0
            ORDER BY nv.NgayCapNhat DESC
        """)
        deleted_employees = cursor.fetchall()

    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i danh s√°ch ƒë√£ x√≥a: {str(e)}", "danger")
        deleted_departments, deleted_employees = [], []

    finally:
        conn.close()

    # ‚úÖ Tr·∫£ v·ªÅ giao di·ªán (tab Ph√≤ng ban m·ªü m·∫∑c ƒë·ªãnh)
    return render_template(
        "deleted_records.html",
        deleted_employees=deleted_employees,
        deleted_departments=deleted_departments,
        active_tab="departments"
    )


# QU·∫¢N L√ù CA L√ÄM

from datetime import datetime, time

@app.route("/shifts")
@require_role("admin")
def shifts():
    from datetime import datetime
    keyword = request.args.get("q", "").strip().lower()

    conn = get_sql_connection()
    cursor = conn.cursor()

    # üü¢ Ch·ªâ l·∫•y nh·ªØng ca ƒëang ho·∫°t ƒë·ªông (TrangThai = 1)
    cursor.execute("""
        SELECT MaCa, TenCa, GioBatDau, GioKetThuc, HeSo, MoTa
        FROM CaLamViec
        WHERE TrangThai = 1
        ORDER BY MaCa
    """)
    rows = cursor.fetchall()

    shifts = []
    for row in rows:
        ma_ca, ten_ca, gio_bd, gio_kt, he_so, mo_ta = row

        def fmt(t):
            try:
                if isinstance(t, str):
                    return t[:5]
                return t.strftime("%H:%M")
            except Exception:
                return str(t)

        gio_bd_fmt = fmt(gio_bd)
        gio_kt_fmt = fmt(gio_kt)

        now_time = datetime.now().strftime("%H:%M")
        trang_thai = "ƒêang ho·∫°t ƒë·ªông" if gio_bd_fmt <= now_time <= gio_kt_fmt else "Ngo√†i gi·ªù"

        shifts.append({
            "MaCa": ma_ca,
            "TenCa": ten_ca,
            "GioBatDau": gio_bd_fmt,
            "GioKetThuc": gio_kt_fmt,
            "HeSoLuong": he_so,
            "MoTa": mo_ta,
            "TrangThai": trang_thai,
            "ThoiGian": f"{gio_bd_fmt} - {gio_kt_fmt}",
            "LastUpdated": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        })

    if keyword:
        shifts = [
            s for s in shifts
            if keyword in s["TenCa"].lower() or keyword in s["MaCa"].lower()
        ]

    # üßÆ T·ªïng s·ªë ca l√†m vi·ªác (ƒëang ho·∫°t ƒë·ªông)
    cursor.execute("SELECT COUNT(*) FROM CaLamViec WHERE TrangThai = 1")
    total_shifts = cursor.fetchone()[0]

    # üßÆ T·ªïng s·ªë ca ƒëang ho·∫°t ƒë·ªông theo th·ªùi gian th·ª±c
    active_shifts = sum(1 for s in shifts if s["TrangThai"] == "ƒêang ho·∫°t ƒë·ªông")

    # üßÆ T·ªïng s·ªë nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c ph√¢n ca
    cursor.execute("SELECT COUNT(DISTINCT MaNV) FROM LichLamViec")
    total_assigned = cursor.fetchone()[0]

    conn.close()

    return render_template(
        "shifts.html",
        shifts=shifts,
        total_shifts=total_shifts,
        active_shifts=active_shifts,
        total_employees=total_assigned,
        keyword=keyword
    )

#chi ti·∫øt ca
@app.route("/shifts/<ma_ca>")
@require_role("admin")
def shift_detail(ma_ca):
    from datetime import datetime
    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- L·∫•y th√¥ng tin ca l√†m ---
    cursor.execute("""
        SELECT 
            MaCa, 
            TenCa, 
            GioBatDau, 
            GioKetThuc, 
            HeSo, 
            MoTa, 
            FORMAT(NgayCapNhat, 'dd/MM/yyyy HH:mm:ss') AS NgayCapNhat
        FROM CaLamViec
        WHERE MaCa = ?
    """, (ma_ca,))
    row = cursor.fetchone()

    if not row:
        conn.close()
        flash("‚ùå Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác!", "error")
        return redirect(url_for("shifts"))

    # --- G√°n d·ªØ li·ªáu ---
    ma_ca, ten_ca, gio_bd, gio_kt, he_so, mo_ta, ngay_cap_nhat = row

    def fmt_time(t):
        try:
            if isinstance(t, str):
                return t[:5]
            return t.strftime("%H:%M")
        except Exception:
            return str(t)

    gio_bd_fmt = fmt_time(gio_bd)
    gio_kt_fmt = fmt_time(gio_kt)
    now_str = datetime.now().strftime("%H:%M")

    ca_info = {
        "ma_ca": ma_ca,
        "ten_ca": ten_ca,
        "gio_bd": gio_bd_fmt,
        "gio_kt": gio_kt_fmt,
        "he_so": he_so if he_so else "‚Äî",
        "mo_ta": mo_ta if mo_ta else "Kh√¥ng c√≥ m√¥ t·∫£",
        "trang_thai": "ƒêang ho·∫°t ƒë·ªông" if gio_bd_fmt <= now_str <= gio_kt_fmt else "Ngo√†i gi·ªù",
        "last_updated": ngay_cap_nhat if ngay_cap_nhat else "Ch∆∞a c·∫≠p nh·∫≠t"
    }

    # --- Ghi l·ªãch s·ª≠ xem chi ti·∫øt ---
    try:
        username = session.get("username") or session.get("user_id") or "admin"
        cursor.execute("EXEC sys.sp_set_session_context @key=N'user', @value=?", (username,))
        cursor.execute("""
            INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, ThoiGian, NguoiThucHien)
            VALUES (N'CaLamViec', ?, N'Xem chi ti·∫øt', GETDATE(), ?)
        """, (ma_ca, username))
        conn.commit()
    except Exception as e:
        print("‚ö†Ô∏è L·ªói ghi log xem chi ti·∫øt ca l√†m vi·ªác:", e)

    # --- L·∫•y danh s√°ch nh√¢n vi√™n thu·ªôc ca ---
    keyword = request.args.get("q", "").strip()
    order = request.args.get("sort", "ten")

    query = """
        SELECT nv.MaNV, nv.HoTen, pb.TenPB, nv.ChucVu
        FROM LichLamViec llv
        JOIN NhanVien nv ON llv.MaNV = nv.MaNV
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        WHERE llv.MaCa = ?
    """
    params = [ma_ca]

    if keyword:
        query += " AND (nv.HoTen LIKE ? OR nv.MaNV LIKE ? OR pb.TenPB LIKE ?)"
        params.extend([f"%{keyword}%", f"%{keyword}%", f"%{keyword}%"])

    if order == "ten":
        query += " ORDER BY nv.HoTen"
    elif order == "phongban":
        query += " ORDER BY pb.TenPB"
    else:
        query += " ORDER BY nv.MaNV"

    cursor.execute(query, params)
    nhanviens = cursor.fetchall()
    conn.close()

    # --- Render ra template ---
    return render_template(
        "shift_detail.html",
        ca=ca_info,
        nhanviens=nhanviens,
        keyword=keyword,
        order=order
    )


@app.route("/add_shift", methods=["GET", "POST"])
@require_role("admin")
def add_shift():
    if request.method == "POST":
        ten_ca = request.form["ten_ca"]
        gio_bd = request.form["gio_bat_dau"]
        gio_kt = request.form["gio_ket_thuc"]
        he_so = request.form.get("he_so", 1.0)
        mo_ta = request.form.get("mo_ta", "")

        new_ma_ca = manage_shift.add_shift(ten_ca, gio_bd, gio_kt, he_so, mo_ta)
        flash(f"‚úÖ Th√™m ca l√†m m·ªõi th√†nh c√¥ng! M√£ ca: {new_ma_ca}", "success")
        return redirect(url_for("shifts"))

    return render_template("add_shift.html")

#Ch·ªânh s·ª≠a ca
@app.route("/edit_shift/<ma_ca>", methods=["GET", "POST"])
@require_role("admin")
def edit_shift(ma_ca):
    conn = get_sql_connection()
    cursor = conn.cursor()

    if request.method == "POST":
        ten_ca = request.form.get("ten_ca")
        gio_bat_dau = request.form.get("gio_bat_dau")
        gio_ket_thuc = request.form.get("gio_ket_thuc")
        he_so = request.form.get("he_so")

        try:
            # üîπ L·∫•y d·ªØ li·ªáu c≈© ƒë·ªÉ ghi log thay ƒë·ªïi
            cursor.execute("""
                SELECT TenCa, GioBatDau, GioKetThuc, HeSo
                FROM CaLamViec
                WHERE MaCa = ?
            """, (ma_ca,))
            old_data = cursor.fetchone()
            old_values = {
                "TenCa": old_data[0],
                "GioBatDau": str(old_data[1]),
                "GioKetThuc": str(old_data[2]),
                "HeSo": str(old_data[3])
            } if old_data else {}

            # üîπ C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi
            cursor.execute("""
                UPDATE CaLamViec
                SET TenCa = ?, GioBatDau = ?, GioKetThuc = ?, HeSo = ?, NgayCapNhat = GETDATE()
                WHERE MaCa = ?
            """, (ten_ca, gio_bat_dau, gio_ket_thuc, he_so, ma_ca))

            # üîπ So s√°nh v√† ghi v√†o b·∫£ng LichSuThayDoi
            new_values = {
                "TenCa": ten_ca,
                "GioBatDau": gio_bat_dau,
                "GioKetThuc": gio_ket_thuc,
                "HeSo": he_so
            }
            username = session.get("username", "H·ªá th·ªëng")

            for field in new_values:
                old_val = old_values.get(field)
                new_val = new_values[field]
                if str(old_val) != str(new_val):  # ch·ªâ ghi n·∫øu c√≥ thay ƒë·ªïi
                    cursor.execute("""
                        INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
                        VALUES (?, ?, N'S·ª≠a', ?, ?, ?, GETDATE(), ?)
                    """, ('CaLamViec', ma_ca, field, old_val, new_val, username))

            conn.commit()
            flash("‚úÖ C·∫≠p nh·∫≠t ca l√†m vi·ªác th√†nh c√¥ng!", "success")
            return redirect(url_for("shifts"))

        except Exception as e:
            conn.rollback()
            flash(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t ca l√†m vi·ªác: {e}", "error")

    # --- L·∫•y d·ªØ li·ªáu ca ƒë·ªÉ hi·ªÉn th·ªã form ---
    cursor.execute("""
        SELECT 
            CLV.MaCa,
            CLV.TenCa,
            CONVERT(CHAR(5), CLV.GioBatDau, 108) AS GioBatDau,
            CONVERT(CHAR(5), CLV.GioKetThuc, 108) AS GioKetThuc,
            CLV.HeSo,
            ISNULL(CLV.MoTa, '') AS MoTa
        FROM CaLamViec CLV
        WHERE CLV.MaCa = ?
    """, (ma_ca,))

    row = cursor.fetchone()
    if row:
        columns = [col[0] for col in cursor.description]
        ca = dict(zip(columns, row))
    else:
        conn.close()
        flash(f"‚ùå Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác {ma_ca}", "error")
        return redirect(url_for("shifts"))

    conn.close()
    return render_template("edit_shift.html", ca=ca)

#X√≥a ca
# --- X√≥a m·ªÅm 1 ho·∫∑c nhi·ªÅu ca ---
# üîπ X√ìA M·ªÄM 1 HO·∫∂C NHI·ªÄU CA L√ÄM VI·ªÜC
@app.route("/delete_shift", methods=["POST"])
@require_role("admin")
def delete_shift():
    from flask import request
    ma_ca_list = request.form.getlist("ma_ca")  # L·∫•y danh s√°ch m√£ ca (c√≥ th·ªÉ nhi·ªÅu)
    
    if not ma_ca_list:
        flash("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ca l√†m vi·ªác ƒë·ªÉ x√≥a!", "warning")
        return redirect(url_for("shifts"))
    
    try:
        # G·ªçi h√†m x√≥a m·ªÅm trong module manage_shift
        manage_shift.delete_shift(ma_ca_list)

        if len(ma_ca_list) == 1:
            flash(f"üóëÔ∏è ƒê√£ x√≥a m·ªÅm ca {ma_ca_list[0]}!", "danger")
        else:
            flash(f"üóëÔ∏è ƒê√£ x√≥a m·ªÅm {len(ma_ca_list)} ca l√†m vi·ªác!", "danger")

    except Exception as e:
        flash(f"‚ùå L·ªói khi x√≥a ca l√†m vi·ªác: {e}", "error")

    # Quay l·∫°i danh s√°ch ca ho·∫°t ƒë·ªông
    return redirect(url_for("shifts"))

# --- Danh s√°ch ca ƒë√£ x√≥a ---
@app.route("/deleted_shifts")
@require_role("admin")
def deleted_shifts():
    conn = get_sql_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT MaCa, TenCa, GioBatDau, GioKetThuc, MoTa, HeSo, NgayCapNhat
        FROM CaLamViec
        WHERE TrangThai = 0
        ORDER BY NgayCapNhat DESC
    """)
    deleted_list = cursor.fetchall()
    conn.close()
    return render_template(
        "deleted_records.html",
        active_tab="shifts",
        deleted_shifts=deleted_list
    )

# ============================================================
# üîÑ KH√îI PH·ª§C 1 HO·∫∂C NHI·ªÄU CA L√ÄM VI·ªÜC
# ============================================================
@app.route("/restore_shift", methods=["POST"])
@require_role("admin")
def restore_shift():
    ma_ca_list = request.form.getlist("selected_ids")

    if not ma_ca_list:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn ca n√†o ƒë·ªÉ kh√¥i ph·ª•c!", "warning")
        return redirect(url_for("deleted_shifts"))

    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        for ma_ca in ma_ca_list:
            # üîπ C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i ho·∫°t ƒë·ªông
            cursor.execute("""
                UPDATE CaLamViec
                SET TrangThai = 1
                WHERE MaCa = ?
            """, (ma_ca,))

            # üîπ Ghi log kh√¥i ph·ª•c
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, (
                "CaLamViec",
                ma_ca,
                "Kh√¥i ph·ª•c",
                "TrangThai",
                0, 1,
                username
            ))

        conn.commit()
        flash(f"‚úÖ ƒê√£ kh√¥i ph·ª•c {len(ma_ca_list)} ca l√†m vi·ªác!", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c ca l√†m vi·ªác: {e}", "danger")

    finally:
        conn.close()

    return redirect(url_for("deleted_shifts"))

#  Trang danh s√°ch nh√¢n vi√™n ƒë√£ ph√¢n ca

@app.route("/assigned_employees")
@require_role("admin")
def assigned_employees():
    conn = get_connection()
    cursor = conn.cursor()
    now = datetime.now()
    today = now.date()

    # ==========================================================
    # üîπ 1. C·∫≠p nh·∫≠t tr·∫°ng th√°i "V·∫Øng" t·ª± ƒë·ªông
    # ==========================================================
    cursor.execute("""
        UPDATE llv
        SET llv.TrangThai = 2
        FROM LichLamViec llv
        LEFT JOIN CaLamViec clv ON llv.MaCa = clv.MaCa
        WHERE llv.TrangThai = 0
          AND llv.DaXoa = 1   -- ‚úÖ ch·ªâ c·∫≠p nh·∫≠t v·ªõi c√°c ph√¢n ca ƒëang ho·∫°t ƒë·ªông
          AND (
                llv.NgayLam < CAST(GETDATE() AS DATE)
                OR (llv.NgayLam = CAST(GETDATE() AS DATE)
                    AND CONVERT(TIME, GETDATE()) > clv.GioKetThuc)
              )
          AND NOT EXISTS (
                SELECT 1 FROM ChamCong cc
                WHERE cc.MaNV = llv.MaNV 
                  AND cc.NgayChamCong = llv.NgayLam
                  AND cc.MaCa = llv.MaCa
              )
    """)
    conn.commit()

    # ==========================================================
    # üîπ 2. L·∫•y danh s√°ch ph√¢n ca ƒëang ho·∫°t ƒë·ªông (DaXoa = 1)
    # ==========================================================
    cursor.execute("""
        SELECT 
            llv.MaLLV,
            nv.MaNV,
            nv.HoTen,
            pb.TenPB,
            clv.TenCa,
            clv.GioBatDau,
            clv.GioKetThuc,

            -- ‚úÖ Gi·ªù ch·∫•m c√¥ng th·ª±c t·∫ø
            FORMAT(cc.GioVao, 'HH:mm') AS GioVao,
            FORMAT(cc.GioRa, 'HH:mm') AS GioRa,

            llv.NgayLam,

            -- ‚úÖ N·∫øu c√≥ ch·∫•m c√¥ng th√¨ xem l√† ƒë√£ ch·∫•m
            CASE 
                WHEN cc.MaChamCong IS NOT NULL THEN 1
                ELSE llv.TrangThai
            END AS TrangThai,

            CASE 
                WHEN cc.MaChamCong IS NOT NULL THEN N'ƒê√£ ch·∫•m c√¥ng'
                WHEN llv.TrangThai = 0 THEN N'Ch∆∞a ch·∫•m'
                WHEN llv.TrangThai = 2 THEN N'V·∫Øng'
                ELSE N'Kh√¥ng x√°c ƒë·ªãnh'
            END AS TrangThaiText

        FROM LichLamViec llv
        LEFT JOIN NhanVien nv ON llv.MaNV = nv.MaNV
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN CaLamViec clv ON llv.MaCa = clv.MaCa

        -- ‚úÖ JOIN ph·ª• l·ªçc 1 b·∫£n ghi ChamCong duy nh·∫•t / nh√¢n vi√™n / ng√†y / ca
        OUTER APPLY (
            SELECT TOP 1 c.GioVao, c.GioRa, c.MaChamCong
            FROM ChamCong c
            WHERE c.MaNV = llv.MaNV 
            AND c.NgayChamCong = llv.NgayLam
            AND (c.MaCa = llv.MaCa OR c.MaCa IS NULL)
            ORDER BY 
                CASE WHEN c.MaCa = llv.MaCa THEN 0 ELSE 1 END, 
                c.GioVao ASC
        ) AS cc

        WHERE llv.DaXoa = 1    -- ‚úÖ ch·ªâ l·∫•y ph√¢n ca ch∆∞a b·ªã x√≥a m·ªÅm

        ORDER BY llv.NgayLam DESC, nv.HoTen, clv.TenCa
    """)

    # ==========================================================
    # üîπ 3. Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang dict + ƒë·ªãnh d·∫°ng
    # ==========================================================
    columns = [col[0] for col in cursor.description]
    records = [dict(zip(columns, row)) for row in cursor.fetchall()]
    conn.close()

    # ==========================================================
    # üîπ 4. H√†m x·ª≠ l√Ω d·ªØ li·ªáu ng√†y v√† gi·ªù
    # ==========================================================
    def to_date(value):
        if not value:
            return None
        if isinstance(value, datetime):
            return value.date()
        if isinstance(value, str):
            try:
                return datetime.strptime(value[:10], "%Y-%m-%d").date()
            except:
                return None
        return None

    def to_time(value):
        if not value:
            return None
        if isinstance(value, datetime):
            return value.time()
        if isinstance(value, str):
            for fmt in ("%H:%M:%S", "%H:%M"):
                try:
                    return datetime.strptime(value.strip(), fmt).time()
                except:
                    pass
            return None
        return None

    def fmt_time(t):
        return t.strftime("%H:%M") if t else "-"

    # ==========================================================
    # üîπ 5. L√†m s·∫°ch d·ªØ li·ªáu & format gi·ªù ƒë·ªÉ render
    # ==========================================================
    for r in records:
        r["NgayLam"] = to_date(r.get("NgayLam"))
        r["GioBatDau"] = to_time(r.get("GioBatDau"))
        r["GioKetThuc"] = to_time(r.get("GioKetThuc"))
        r["GioVao"] = to_time(r.get("GioVao"))
        r["GioRa"] = to_time(r.get("GioRa"))

        r["GioBatDauText"] = fmt_time(r["GioBatDau"])
        r["GioKetThucText"] = fmt_time(r["GioKetThuc"])
        r["GioVaoText"] = fmt_time(r["GioVao"])
        r["GioRaText"] = fmt_time(r["GioRa"])

    # ==========================================================
    # üîπ 6. Th·ªëng k√™ t·ªïng h·ª£p
    # ==========================================================
    present_count = sum(1 for r in records if r["TrangThai"] == 1)
    absent_count = sum(1 for r in records if r["TrangThai"] == 2)
    pending_count = sum(1 for r in records if r["TrangThai"] == 0)
    total_count = len(records)

    # ==========================================================
    # üîπ 7. Tr·∫£ v·ªÅ template
    # ==========================================================
    return render_template(
        "assigned_employees.html",
        records=records,
        present_count=present_count,
        absent_count=absent_count,
        pending_count=pending_count,
        total_count=total_count
    )


@app.route("/api/schedule/<ma_nv>")
def api_schedule(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT CONVERT(varchar, NgayLam, 23), CLV.TenCa
        FROM LichLamViec LLV
        JOIN CaLamViec CLV ON LLV.MaCa = CLV.MaCa
        WHERE LLV.MaNV = ?
    """, (ma_nv,))
    data = [{"date": r[0], "shift": r[1]} for r in cursor.fetchall()]
    conn.close()
    return jsonify(data)

# Trang ph√¢n ca m·ªõi
# ======================
@app.route("/assign_shift", methods=["GET", "POST"])
@require_role("admin")
def assign_shift():
    conn = get_sql_connection()
    cursor = conn.cursor()

    if request.method == "POST":
        # üîπ L·∫•y d·ªØ li·ªáu t·ª´ form
        MaNV_list = request.form.getlist("MaNV[]")      # Nhi·ªÅu nh√¢n vi√™n
        MaCa_list = request.form.getlist("MaCa[]")      # Nhi·ªÅu ca
        NgayLam_raw = request.form.get("NgayLam[]") or request.form.getlist("NgayLam[]")

        # ‚úÖ Chu·∫©n h√≥a danh s√°ch ng√†y (Flatpickr g·ª≠i chu·ªói ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y)
        if isinstance(NgayLam_raw, str):
            NgayLam_list = [d.strip() for d in NgayLam_raw.split(",") if d.strip()]
        else:
            NgayLam_list = NgayLam_raw

        # Ki·ªÉm tra d·ªØ li·ªáu
        if not MaNV_list or not MaCa_list or not NgayLam_list:
            flash("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 nh√¢n vi√™n, 1 ca v√† 1 ng√†y!", "danger")
            return redirect(url_for("assign_shift"))

        inserted, skipped = 0, 0

        # üîπ L·∫∑p qua t·ª´ng nh√¢n vi√™n, t·ª´ng ng√†y, t·ª´ng ca
        for ma_nv in MaNV_list:
            for ma_ca in MaCa_list:
                for ngay in NgayLam_list:
                    cursor.execute("""
                        SELECT COUNT(*) 
                        FROM LichLamViec
                        WHERE MaNV = ? AND MaCa = ? AND NgayLam = ?
                    """, (ma_nv, ma_ca, ngay))
                    exists = cursor.fetchone()[0]

                    if not exists:
                        cursor.execute("""
                            INSERT INTO LichLamViec (MaNV, MaCa, NgayLam, TrangThai, DaXoa)
                            VALUES (?, ?, ?, 0, 1)
                        """, (ma_nv, ma_ca, ngay))
                        inserted += 1
                    else:
                        skipped += 1

        conn.commit()
        conn.close()

        flash(f"‚úÖ ƒê√£ ph√¢n {inserted} ca, b·ªè qua {skipped} ca tr√πng!", "success")
        return redirect(url_for("assigned_employees"))

    # --- Khi GET form ---
    cursor.execute("""
        SELECT MaNV, HoTen 
        FROM NhanVien 
        WHERE TrangThai = 1
        ORDER BY HoTen
    """)
    employees = cursor.fetchall()

    cursor.execute("""
        SELECT MaCa, TenCa 
        FROM CaLamViec 
        WHERE TrangThai = 1
        ORDER BY MaCa
    """)
    shifts = cursor.fetchall()

    conn.close()

    return render_template("assign_shift.html", employees=employees, shifts=shifts)


# S·ª≠a ph√¢n ca
@app.route("/edit_shift_assignment/<int:id>", methods=["GET", "POST"])
@require_role("admin")
def edit_shift_assignment(id):
    conn = get_sql_connection()
    cursor = conn.cursor()

    # L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
    cursor.execute("""
        SELECT LLV.MaLLV, LLV.MaNV, LLV.MaCa, LLV.NgayLam, NV.HoTen, CLV.TenCa
        FROM LichLamViec LLV
        LEFT JOIN NhanVien NV ON NV.MaNV = LLV.MaNV
        LEFT JOIN CaLamViec CLV ON CLV.MaCa = LLV.MaCa
        WHERE LLV.MaLLV = ?
    """, (id,))
    record = cursor.fetchone()

    # N·∫øu c√≥ gi√° tr·ªã ng√†y, √©p ki·ªÉu th√†nh datetime ƒë·ªÉ HTML d√πng .strftime()
    if record and isinstance(record.NgayLam, str):
        try:
            record.NgayLam = datetime.strptime(record.NgayLam, "%Y-%m-%d")
        except ValueError:
            record.NgayLam = None

    # L·∫•y danh s√°ch nh√¢n vi√™n & ca l√†m
    cursor.execute("SELECT MaNV, HoTen FROM NhanVien")
    employees = cursor.fetchall()

    cursor.execute("SELECT MaCa, TenCa FROM CaLamViec")
    shifts = cursor.fetchall()

    # Khi ng∆∞·ªùi d√πng b·∫•m ‚ÄúL∆∞u‚Äù
    if request.method == "POST":
        MaNV = request.form.get("MaNV")
        MaCa = request.form.get("MaCa")
        NgayLam = request.form.get("NgayLam")

        cursor.execute("""
            UPDATE LichLamViec
            SET MaNV=?, MaCa=?, NgayLam=?
            WHERE MaLLV=?
        """, (MaNV, MaCa, NgayLam, id))
        conn.commit()
        conn.close()
        flash("ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ph√¢n ca!", "success")
        return redirect(url_for("assigned_employees"))

    conn.close()
    return render_template("edit_shift_assignment.html", record=record, employees=employees, shifts=shifts)

# ===========================
# üîπ X√≥a m·ªÅm 1 ph√¢n ca
# ===========================
@app.route("/delete_shift_assignment/<id>")
@require_role("admin")
def delete_shift_assignment(id):
    conn = get_connection()
    cursor = conn.cursor()

    try:
        # L·∫•y th√¥ng tin tr∆∞·ªõc khi x√≥a
        cursor.execute("""
            SELECT DaXoa, MaNV, MaCa, NgayLam
            FROM LichLamViec
            WHERE MaLLV = ?
        """, (id,))
        old_data = cursor.fetchone()

        if not old_data:
            flash("‚ùå Kh√¥ng t√¨m th·∫•y ph√¢n ca ƒë·ªÉ x√≥a!", "error")
            return redirect(url_for("assigned_employees"))

        # ‚úÖ C·∫≠p nh·∫≠t DaXoa = 0 (x√≥a m·ªÅm)
        cursor.execute("""
            UPDATE LichLamViec
            SET DaXoa = 0
            WHERE MaLLV = ?
        """, (id,))

        # ‚úÖ Ghi log thay ƒë·ªïi
        username = session.get("username", "H·ªá th·ªëng")
        cursor.execute("""
            INSERT INTO LichSuThayDoi 
            (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            "LichLamViec", id, "X√≥a m·ªÅm",
            "DaXoa", str(old_data[0]), "0",
            datetime.now(), username
        ))

        conn.commit()
        flash("üóëÔ∏è ƒê√£ x√≥a m·ªÅm ph√¢n ca v√† ghi v√†o l·ªãch s·ª≠!", "warning")

    except Exception as e:
        conn.rollback()
        flash(f"‚ö†Ô∏è L·ªói khi x√≥a ph√¢n ca: {e}", "error")
    finally:
        conn.close()

    return redirect(url_for("assigned_employees"))


# ===========================
# üîπ X√≥a m·ªÅm nhi·ªÅu ph√¢n ca
# ===========================
@app.route("/delete_shift_assignment", methods=["POST"])
@require_role("admin")
def delete_multiple_shift_assignments():
    selected_ids = request.form.getlist("selected_assignments")
    if not selected_ids:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn ph√¢n ca n√†o ƒë·ªÉ x√≥a!", "warning")
        return redirect(url_for("assigned_employees"))

    conn = get_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        for record_id in selected_ids:
            cursor.execute("SELECT DaXoa FROM LichLamViec WHERE MaLLV = ?", (record_id,))
            old_data = cursor.fetchone()

            if old_data:
                # ‚úÖ X√≥a m·ªÅm
                cursor.execute("UPDATE LichLamViec SET DaXoa = 0 WHERE MaLLV = ?", (record_id,))

                # ‚úÖ Ghi log thay ƒë·ªïi
                cursor.execute("""
                    INSERT INTO LichSuThayDoi 
                    (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    "LichLamViec", record_id, "X√≥a m·ªÅm",
                    "DaXoa", str(old_data[0]), "0",
                    datetime.now(), username
                ))

        conn.commit()
        flash(f"üóëÔ∏è ƒê√£ x√≥a m·ªÅm {len(selected_ids)} ph√¢n ca v√† ghi v√†o l·ªãch s·ª≠!", "warning")

    except Exception as e:
        conn.rollback()
        flash(f"‚ö†Ô∏è L·ªói khi x√≥a nhi·ªÅu ph√¢n ca: {e}", "error")
    finally:
        conn.close()

    return redirect(url_for("assigned_employees"))


# ===========================
# üîπ Kh√¥i ph·ª•c ph√¢n ca
# ===========================
@app.route("/restore_shift_assignment/<id>", methods=["POST"])
@require_role("admin")
def restore_shift_assignment(id):
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        # L·∫•y th√¥ng tin tr∆∞·ªõc khi kh√¥i ph·ª•c
        cursor.execute("""
            SELECT DaXoa, MaNV, MaCa, NgayLam
            FROM LichLamViec
            WHERE MaLLV = ?
        """, (id,))
        old_data = cursor.fetchone()

        if not old_data:
            flash("‚ùå Kh√¥ng t√¨m th·∫•y ph√¢n ca c·∫ßn kh√¥i ph·ª•c!", "error")
            return redirect(url_for("deleted_shift_assignments_list"))

        # ‚úÖ C·∫≠p nh·∫≠t DaXoa = 1 (kh√¥i ph·ª•c)
        cursor.execute("""
            UPDATE LichLamViec
            SET DaXoa = 1
            WHERE MaLLV = ?
        """, (id,))

        # ‚úÖ Ghi log kh√¥i ph·ª•c
        username = session.get("username", "H·ªá th·ªëng")
        cursor.execute("""
            INSERT INTO LichSuThayDoi 
            (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            "LichLamViec", id, "Kh√¥i ph·ª•c",
            "DaXoa", str(old_data[0]), "1",
            datetime.now(), username
        ))

        conn.commit()
        flash("‚úÖ ƒê√£ kh√¥i ph·ª•c ph√¢n ca v√† ghi v√†o l·ªãch s·ª≠!", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ö†Ô∏è L·ªói khi kh√¥i ph·ª•c ph√¢n ca: {e}", "error")
    finally:
        conn.close()

    return redirect(url_for("deleted_shift_assignments_list"))

# ============================================================
# üîÑ KH√îI PH·ª§C NHI·ªÄU PH√ÇN CA ƒê√É X√ìA
# ============================================================
@app.route("/restore_shift_assignments", methods=["POST"])
@require_role("admin")
def restore_multiple_shift_assignments():
    selected_ids = request.form.getlist("selected_assignments")

    if not selected_ids:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn ph√¢n ca n√†o ƒë·ªÉ kh√¥i ph·ª•c!", "warning")
        return redirect(url_for("deleted_shift_assignments_list"))  # ho·∫∑c deleted_shift_assignments n·∫øu endpoint kh√°c

    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        for record_id in selected_ids:
            cursor.execute("""
                SELECT DaXoa FROM LichLamViec WHERE MaLLV = ?
            """, (record_id,))
            old_data = cursor.fetchone()

            if not old_data:
                continue

            # ‚úÖ C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i (DaXoa = 1)
            cursor.execute("""
                UPDATE LichLamViec
                SET DaXoa = 1
                WHERE MaLLV = ?
            """, (record_id,))

            # ‚úÖ Ghi log kh√¥i ph·ª•c
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, (
                "LichLamViec",
                record_id,
                "Kh√¥i ph·ª•c nhi·ªÅu",
                "DaXoa",
                0, 1,
                username
            ))

        conn.commit()
        flash(f"‚úÖ ƒê√£ kh√¥i ph·ª•c {len(selected_ids)} ph√¢n ca!", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c nhi·ªÅu ph√¢n ca: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("deleted_shift_assignments_list"))  # ƒë·ªïi theo endpoint th·ª±c t·∫ø c·ªßa b·∫°n

# ===========================
# üîπ Hi·ªÉn th·ªã danh s√°ch ph√¢n ca ƒë√£ x√≥a m·ªÅm
# ===========================
@app.route("/deleted_records/shift_assignments")
@require_role("admin")
def deleted_shift_assignments_list():
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        # ==========================================================
        # üîπ L·∫•y danh s√°ch ph√¢n ca ƒë√£ x√≥a (DaXoa = 0)
        # ==========================================================
        cursor.execute("""
            SELECT 
                llv.MaLLV,
                llv.MaNV,
                nv.HoTen,
                pb.TenPB,
                clv.TenCa,
                llv.NgayLam,
                clv.GioBatDau,
                clv.GioKetThuc,

                -- ‚úÖ Gi·ªù ch·∫•m c√¥ng th·ª±c t·∫ø (n·∫øu c√≥)
                FORMAT(cc.GioVao, 'HH:mm') AS GioVao,
                FORMAT(cc.GioRa, 'HH:mm') AS GioRa,

                -- ‚úÖ X√°c ƒë·ªãnh tr·∫°ng th√°i ch√≠nh x√°c
                CASE 
                    WHEN cc.MaChamCong IS NOT NULL THEN 1   -- ƒê√£ ch·∫•m c√¥ng
                    WHEN llv.TrangThai = 2 THEN 2           -- V·∫Øng
                    ELSE 0                                 -- Ch∆∞a ch·∫•m c√¥ng
                END AS TrangThai,

                CASE 
                    WHEN cc.MaChamCong IS NOT NULL THEN N'ƒê√£ ch·∫•m c√¥ng'
                    WHEN llv.TrangThai = 2 THEN N'V·∫Øng'
                    WHEN llv.TrangThai = 0 THEN N'Ch∆∞a ch·∫•m c√¥ng'
                    ELSE N'Kh√¥ng x√°c ƒë·ªãnh'
                END AS TrangThaiText

            FROM LichLamViec llv
            LEFT JOIN NhanVien nv ON llv.MaNV = nv.MaNV
            LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
            LEFT JOIN CaLamViec clv ON llv.MaCa = clv.MaCa

            OUTER APPLY (
                SELECT TOP 1 c.GioVao, c.GioRa, c.MaChamCong
                FROM ChamCong c
                WHERE c.MaNV = llv.MaNV 
                  AND c.NgayChamCong = llv.NgayLam
                  AND (c.MaCa = llv.MaCa OR c.MaCa IS NULL)
                ORDER BY 
                    CASE WHEN c.MaCa = llv.MaCa THEN 0 ELSE 1 END,
                    c.GioVao ASC
            ) AS cc

            WHERE llv.DaXoa = 0
            ORDER BY llv.NgayLam DESC, nv.HoTen
        """)

        deleted_shift_assignments = cursor.fetchall()

    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i danh s√°ch ph√¢n ca ƒë√£ x√≥a: {e}", "danger")
        deleted_shift_assignments = []

    finally:
        conn.close()

    # ==========================================================
    # üîπ Render ra template giao di·ªán deleted_records.html
    # ==========================================================
    return render_template(
        "deleted_records.html",
        active_tab="shift_assignments",
        deleted_shift_assignments=deleted_shift_assignments
    )



# QU·∫¢N L√ù T√ÄI KHO·∫¢N

# ========== DANH S√ÅCH T√ÄI KHO·∫¢N ==========
@app.route("/accounts")
@require_role("admin")
def accounts():
    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- Th·ªëng k√™ t·ªïng quan ---
    cursor.execute("SELECT COUNT(*) FROM TaiKhoan WHERE TrangThai = 1")
    total_accounts = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM TaiKhoan WHERE TrangThai = 1")
    active_accounts = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM TaiKhoan WHERE TrangThai = 0")
    inactive_accounts = cursor.fetchone()[0]

    # üßÆ T·ªïng s·ªë t√†i kho·∫£n qu·∫£n tr·ªã (ƒëang ho·∫°t ƒë·ªông)
    cursor.execute("""
        SELECT COUNT(*) 
        FROM TaiKhoan
        WHERE TrangThai = 1
        AND LOWER(VaiTro) IN (N'admin', N'qu·∫£n tr·ªã vi√™n', N'administrator')
    """)
    admin_accounts = cursor.fetchone()[0]

    # üßÆ T·ªïng s·ªë t√†i kho·∫£n ng∆∞·ªùi d√πng (ƒëang ho·∫°t ƒë·ªông)
    cursor.execute("""
        SELECT COUNT(*) 
        FROM TaiKhoan
        WHERE TrangThai = 1
        AND LOWER(VaiTro) IN (N'user', N'nhanvien', N'nh√¢n vi√™n', N'ng∆∞·ªùi d√πng')
    """)
    user_accounts = cursor.fetchone()[0]


    # --- L·∫•y danh s√°ch t√†i kho·∫£n ƒëang ho·∫°t ƒë·ªông ---
    cursor.execute("""
        SELECT 
            t.MaTK,
            t.TenDangNhap,
            ISNULL(n.HoTen, N'‚Äî') AS HoTen,
            ISNULL(n.Email, N'‚Äî') AS Email,
            CASE 
                WHEN LOWER(t.VaiTro) IN (N'admin', N'qu·∫£n tr·ªã vi√™n', N'administrator') THEN N'Qu·∫£n tr·ªã vi√™n'
                WHEN LOWER(t.VaiTro) IN (N'user', N'nhanvien', N'nh√¢n vi√™n', N'ng∆∞·ªùi d√πng') THEN N'Nh√¢n vi√™n'
                ELSE ISNULL(t.VaiTro, N'Kh√¥ng x√°c ƒë·ªãnh')
            END AS VaiTro,
            CASE 
                WHEN t.TrangThai = 1 THEN N'ƒêang ho·∫°t ƒë·ªông'
                ELSE N'Ng·ª´ng ho·∫°t ƒë·ªông'
            END AS TrangThai,
            t.TrangThai AS TrangThaiCode,
            CONVERT(VARCHAR(10), t.NgayTao, 103) AS NgayTao
        FROM TaiKhoan t
        LEFT JOIN NhanVien n ON t.MaNV = n.MaNV
        WHERE t.TrangThai = 1                -- üü¢ ch·ªâ l·∫•y t√†i kho·∫£n ho·∫°t ƒë·ªông
        ORDER BY t.NgayTao DESC
    """)
    accounts = cursor.fetchall()

    conn.close()

    # --- Tr·∫£ d·ªØ li·ªáu ra giao di·ªán ---
    return render_template(
        "accounts.html",
        accounts=accounts,
        total_accounts=total_accounts,
        active_accounts=active_accounts,
        inactive_accounts=inactive_accounts,
        admin_accounts=admin_accounts,
        user_accounts=user_accounts
    )

# ========== TH√äM T√ÄI KHO·∫¢N ==========
@app.route("/add_account", methods=["GET", "POST"])
@require_role("admin")
def add_account_route():
    if request.method == "POST":
        username = request.form.get("username", "").strip()
        password = request.form.get("password", "").strip()
        role = request.form.get("role", "").strip()

        if not username or not password or not role:
            flash("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", "danger")
            return redirect(url_for("add_account_route"))

        hashed_password = hashlib.sha256(password.encode("utf-8")).hexdigest()

        conn = get_sql_connection()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO TaiKhoan (TenDangNhap, MatKhauHash, VaiTro, TrangThai, NgayTao)
            VALUES (?, ?, ?, 1, GETDATE())
        """, (username, hashed_password, role))

        # Ghi log (n·∫øu c√≥ b·∫£ng LichSuThayDoi)
        cursor.execute("""
            INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
            VALUES ('TaiKhoan', ?, N'Th√™m', N'To√†n b·ªô', NULL, ?, GETDATE(), ?)
        """, (username, username, session.get("user_id")))

        conn.commit()
        conn.close()

        flash("‚úÖ Th√™m t√†i kho·∫£n th√†nh c√¥ng!", "success")
        return redirect(url_for("accounts"))

    return render_template("add_account.html")


# ========== S·ª¨A T√ÄI KHO·∫¢N ==========
@app.route("/edit_account/<username>", methods=["GET", "POST"])
@require_role("admin")
def edit_account(username):
    conn = get_sql_connection()
    cursor = conn.cursor()

    if request.method == "POST":
        password = request.form.get("password", "").strip()
        role = request.form.get("role", "").strip()

        if password:
            hashed_password = hashlib.sha256(password.encode("utf-8")).hexdigest()
            cursor.execute("""
                UPDATE TaiKhoan
                SET MatKhauHash = ?, VaiTro = ?
                WHERE TenDangNhap = ?
            """, (hashed_password, role, username))
        else:
            cursor.execute("""
                UPDATE TaiKhoan
                SET VaiTro = ?
                WHERE TenDangNhap = ?
            """, (role, username))

        # Ghi log thay ƒë·ªïi
        cursor.execute("""
            INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
            VALUES ('TaiKhoan', ?, N'C·∫≠p nh·∫≠t', N'VaiTro / MatKhau', NULL, ?, GETDATE(), ?)
        """, (username, role, session.get("user_id")))

        conn.commit()
        conn.close()
        flash("üìù C·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng!", "success")
        return redirect(url_for("accounts"))

    # L·∫•y th√¥ng tin hi·ªán t·∫°i
    cursor.execute("SELECT TenDangNhap, VaiTro FROM TaiKhoan WHERE TenDangNhap = ?", (username,))
    account = cursor.fetchone()
    conn.close()

    if not account:
        flash("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n.", "danger")
        return redirect(url_for("accounts"))

    return render_template("edit_account.html", account=account)


# ========== V√î HI·ªÜU H√ìA (X√ìA M·ªÄM) ==========
@app.route("/accounts/deactivate/<username>", methods=["POST"])
@require_role("admin")
def deactivate_account(username):
    conn = get_sql_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE TaiKhoan SET TrangThai = 0 WHERE TenDangNhap = ?", (username,))

    cursor.execute("""
        INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
        VALUES ('TaiKhoan', ?, N'V√¥ hi·ªáu h√≥a', N'TrangThai', 1, 0, GETDATE(), ?)
    """, (username, session.get("user_id")))

    conn.commit()
    conn.close()
    flash(f"üóëÔ∏è ƒê√£ v√¥ hi·ªáu h√≥a t√†i kho·∫£n: {username}", "warning")
    return redirect(url_for("accounts"))


# ========== K√çCH HO·∫†T (KH√îI PH·ª§C) ==========
@app.route("/accounts/activate/<username>", methods=["POST"])
@require_role("admin")
def activate_account(username):
    conn = get_sql_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE TaiKhoan SET TrangThai = 1 WHERE TenDangNhap = ?", (username,))

    cursor.execute("""
        INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
        VALUES ('TaiKhoan', ?, N'Kh√¥i ph·ª•c', N'TrangThai', 0, 1, GETDATE(), ?)
    """, (username, session.get("user_id")))

    conn.commit()
    conn.close()
    flash(f"‚ôªÔ∏è ƒê√£ k√≠ch ho·∫°t t√†i kho·∫£n: {username}", "success")
    return redirect(url_for("accounts"))


# ========== CHUY·ªÇN TR·∫†NG TH√ÅI (AJAX) ==========
@app.route("/accounts/toggle_status/<username>", methods=["POST"])
@require_role("admin")
def toggle_account_status(username):
    conn = get_sql_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT TrangThai FROM TaiKhoan WHERE TenDangNhap = ?", (username,))
    result = cursor.fetchone()

    if not result:
        conn.close()
        return jsonify({"success": False, "message": "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n."})

    current_status = result[0]
    new_status = 0 if current_status == 1 else 1

    cursor.execute("UPDATE TaiKhoan SET TrangThai = ? WHERE TenDangNhap = ?", (new_status, username))
    cursor.execute("""
        INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
        VALUES ('TaiKhoan', ?, N'Thay ƒë·ªïi tr·∫°ng th√°i', N'TrangThai', ?, ?, GETDATE(), ?)
    """, (username, current_status, new_status, session.get("user_id")))

    conn.commit()
    conn.close()

    return jsonify({
        "success": True,
        "username": username,
        "new_status": new_status,
        "status_text": "ƒêang ho·∫°t ƒë·ªông" if new_status == 1 else "Ng·ª´ng ho·∫°t ƒë·ªông"
    })


# ========== X√ìA M·ªÄM TR·ª∞C TI·∫æP ==========
@app.route("/delete_account/<username>", methods=["POST"])
@require_role("admin")
def delete_account(username):
    conn = get_sql_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE TaiKhoan SET TrangThai = 0 WHERE TenDangNhap = ?", (username,))
    cursor.execute("""
        INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
        VALUES ('TaiKhoan', ?, N'X√≥a m·ªÅm', N'TrangThai', 1, 0, GETDATE(), ?)
    """, (username, session.get("user_id")))

    conn.commit()
    conn.close()
    flash(f"üóëÔ∏è ƒê√£ v√¥ hi·ªáu h√≥a t√†i kho·∫£n {username}.", "warning")
    return redirect(url_for("accounts"))


# ========== KH√îI PH·ª§C ==========
@app.route("/restore_account/<username>", methods=["POST"])
@require_role("admin")
def restore_account(username):
    conn = get_sql_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE TaiKhoan SET TrangThai = 1 WHERE TenDangNhap = ?", (username,))
    cursor.execute("""
        INSERT INTO LichSuThayDoi (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
        VALUES ('TaiKhoan', ?, N'Kh√¥i ph·ª•c', N'TrangThai', 0, 1, GETDATE(), ?)
    """, (username, session.get("user_id")))

    conn.commit()
    conn.close()
    flash(f"‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c t√†i kho·∫£n {username}.", "success")
    return redirect(url_for("accounts"))

# ========== KH√îI PH·ª§C NHI·ªÄU T√ÄI KHO·∫¢N ==========
@app.route("/accounts/restore-multiple", methods=["POST"])
@require_role("admin")
def restore_multiple_accounts():
    selected_usernames = request.form.getlist("selected_accounts")

    if not selected_usernames:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn t√†i kho·∫£n n√†o ƒë·ªÉ kh√¥i ph·ª•c!", "warning")
        return redirect(url_for("deleted_accounts"))

    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        for uname in selected_usernames:
            # ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i
            cursor.execute("""
                UPDATE TaiKhoan
                SET TrangThai = 1
                WHERE TenDangNhap = ?
            """, (uname,))

            # ‚úÖ Ghi log
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, (
                "TaiKhoan",
                uname,
                "Kh√¥i ph·ª•c nhi·ªÅu",
                "TrangThai",
                0, 1,
                username
            ))

        conn.commit()
        flash(f"‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c {len(selected_usernames)} t√†i kho·∫£n th√†nh c√¥ng.", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c nhi·ªÅu t√†i kho·∫£n: {e}", "danger")

    finally:
        conn.close()

    return redirect(url_for("deleted_accounts"))

# B√ÅO C√ÅO TH·ªêNG K√ä

@app.route('/reports')
@require_role("admin")
def reports_view():
    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- 1. Danh s√°ch nh√¢n vi√™n ---
    cursor.execute("""
        SELECT NV.*, PB.TenPB,
               CASE NV.TrangThai 
                   WHEN 1 THEN N'ƒêang ho·∫°t ƒë·ªông'
                   ELSE N'Ng·ª´ng ho·∫°t ƒë·ªông'
               END AS TrangThaiText
        FROM NhanVien NV
        LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
    """)
    columns = [col[0] for col in cursor.description]
    employees = [dict(zip(columns, row)) for row in cursor.fetchall()]

    # --- 2. Danh s√°ch ph√≤ng ban ---
    cursor.execute("""
        SELECT PB.MaPB, PB.TenPB,
               COUNT(NV.MaNV) AS SoNhanVien,
               CASE 
                   WHEN LTRIM(RTRIM(LOWER(PB.TrangThai))) IN 
                        (N'ƒëang ho·∫°t ƒë·ªông', N'active', N'1') 
                        THEN N'ƒêang ho·∫°t ƒë·ªông'
                   ELSE N'Ng·ª´ng ho·∫°t ƒë·ªông'
               END AS TrangThaiText
        FROM PhongBan PB
        LEFT JOIN NhanVien NV ON PB.MaPB = NV.MaPB
        GROUP BY PB.MaPB, PB.TenPB, PB.TrangThai
        ORDER BY PB.MaPB
    """)
    columns_pb = [col[0] for col in cursor.description]
    departments = [dict(zip(columns_pb, row)) for row in cursor.fetchall()]

    # --- 3. Th·ªëng k√™ t·ªïng quan ---
    total_employees = len(employees)

    # ƒê·∫øm t·∫•t c·∫£ ph√≤ng ban, kh√¥ng ph√¢n bi·ªát tr·∫°ng th√°i
    total_departments = len(departments)

    # N·∫øu mu·ªën ch·ªâ ƒë·∫øm ph√≤ng ban "ƒêang ho·∫°t ƒë·ªông", d√πng d√≤ng n√†y:
    # total_departments = sum(1 for dept in departments if dept['TrangThaiText'] == 'ƒêang ho·∫°t ƒë·ªông')

    attendance_rate = 96.5  # (c√≥ th·ªÉ thay b·∫±ng t√≠nh to√°n th·ª±c t·∫ø)

    # Gi·ªù trung b√¨nh m·ªói tu·∫ßn
    cursor.execute("SELECT AVG(DATEDIFF(hour, GioVao, GioRa)) FROM ChamCong")
    avg_hours_per_week = cursor.fetchone()[0] or 0

    # T·ªïng l∆∞∆°ng ƒë√£ duy·ªát
    cursor.execute("SELECT SUM(TongTien) FROM Luong WHERE TrangThai = 1")
    total_salary = cursor.fetchone()[0] or 0

    # --- 4. Bi·ªÉu ƒë·ªì Chart.js ---

    # Pie chart: T·ªâ l·ªá tr·∫°ng th√°i nh√¢n vi√™n
    status_counts = {'ƒêang ho·∫°t ƒë·ªông': 0, 'Ng·ª´ng ho·∫°t ƒë·ªông': 0}
    for emp in employees:
        status_counts[emp['TrangThaiText']] += 1

    # Bar chart: Nh√¢n vi√™n theo ph√≤ng ban
    dept_counts = {}
    for emp in employees:
        dept_name = emp['TenPB'] or 'Ch∆∞a ph√¢n c√¥ng'
        dept_counts[dept_name] = dept_counts.get(dept_name, 0) + 1

    # Pie chart: Gi·ªõi t√≠nh
    gender_counts = {'Nam': 0, 'N·ªØ': 0}
    for emp in employees:
        if emp.get('GioiTinh') == 1:
            gender_counts['Nam'] += 1
        else:
            gender_counts['N·ªØ'] += 1

    # Bar chart: Nh√¢n vi√™n theo ca l√†m vi·ªác
    cursor.execute("""
        SELECT CL.TenCa, COUNT(LLV.MaNV)
        FROM LichLamViec LLV
        JOIN CaLamViec CL ON LLV.MaCa = CL.MaCa
        GROUP BY CL.TenCa
    """)
    shift_counts = dict(cursor.fetchall())
    total_shifts = len(shift_counts)
    max_shift_name = max(shift_counts, key=shift_counts.get) if shift_counts else None
    max_shift_count = shift_counts.get(max_shift_name, 0) if max_shift_name else 0

    conn.close()

    # --- 5. Tr·∫£ d·ªØ li·ªáu ra template ---
    return render_template(
        'reports.html',
        employees=employees,
        departments=departments,
        total_employees=total_employees,
        total_departments=total_departments,
        attendance_rate=attendance_rate,
        avg_hours_per_week=avg_hours_per_week,
        total_salary=total_salary,
        status_counts=status_counts,
        dept_counts=dept_counts,
        gender_counts=gender_counts,
        shift_counts=shift_counts,
        total_shifts=total_shifts,
        max_shift_name=max_shift_name,
        max_shift_count=max_shift_count
    )

# B√ÅO C√ÅO CH·∫§M C√îNG

@app.route("/attendance_report", methods=["GET"])
@require_role("admin")
def attendance_report():
    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- L·ªçc theo th√°ng / nƒÉm ---
    month = request.args.get("month")
    year = request.args.get("year")

    # ‚úÖ Th√™m ƒëi·ªÅu ki·ªán ch·ªâ l·∫•y b·∫£n ghi ch∆∞a x√≥a m·ªÅm
    filter_query, params = "WHERE CC.DaXoa = 1", []
    if month and year:
        filter_query += " AND MONTH(CC.NgayChamCong)=? AND YEAR(CC.NgayChamCong)=?"
        params = [month, year]
    elif year:
        filter_query += " AND YEAR(CC.NgayChamCong)=?"
        params = [year]

    # --- L·∫•y d·ªØ li·ªáu ch·∫•m c√¥ng ---
    cursor.execute(f"""
        SELECT 
            CC.MaChamCong,
            NV.MaNV,
            NV.HoTen,
            PB.TenPB AS PhongBan,
            FORMAT(CC.NgayChamCong, 'yyyy-MM-dd') AS NgayChamCong,
            FORMAT(CC.GioVao, 'HH:mm') AS GioVao,
            FORMAT(CC.GioRa, 'HH:mm') AS GioRa,
            CLV.TenCa AS CaLam,
            COALESCE(CC.GioBatDauThucTe, CLV.GioBatDau) AS GioBatDauDung,
            COALESCE(CC.GioKetThucThucTe, CLV.GioKetThuc) AS GioKetThucDung,
            CASE 
                WHEN CC.GioRa IS NOT NULL 
                    THEN ROUND(DATEDIFF(MINUTE, CC.GioVao, CC.GioRa) / 60.0, 2)
                ELSE 0
            END AS SoGioLam,
            CASE 
                WHEN CC.GioVao IS NULL THEN N'V·∫Øng'
                WHEN COALESCE(CC.GioBatDauThucTe, CLV.GioBatDau) IS NULL THEN N'Kh√¥ng x√°c ƒë·ªãnh'
                ELSE 
                    CASE 
                        WHEN CAST(CC.GioVao AS TIME) > CAST(COALESCE(CC.GioBatDauThucTe, CLV.GioBatDau) AS TIME) 
                            THEN N'ƒêi mu·ªôn'
                        ELSE N'ƒê√∫ng gi·ªù'
                    END
            END AS TrangThaiText
        FROM ChamCong CC
        LEFT JOIN NhanVien NV ON CC.MaNV = NV.MaNV
        LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
        LEFT JOIN CaLamViec CLV ON CC.MaCa = CLV.MaCa
        {filter_query}
        ORDER BY CC.NgayChamCong DESC, NV.MaNV
    """, params)

    # --- X·ª≠ l√Ω k·∫øt qu·∫£ ---
    columns = [c[0] for c in cursor.description]
    records = [dict(zip(columns, row)) for row in cursor.fetchall()]

    # --- Th·ªëng k√™ ---
    total_records = len(records)
    total_on_time = sum(1 for r in records if r["TrangThaiText"] == "ƒê√∫ng gi·ªù")
    total_late = sum(1 for r in records if r["TrangThaiText"] == "ƒêi mu·ªôn")
    total_absent = sum(1 for r in records if r["TrangThaiText"] == "V·∫Øng")
    attendance_rate = (total_on_time / total_records * 100) if total_records else 0

    conn.close()

    return render_template(
        "attendance_report.html",
        records=records,
        total_records=total_records,
        total_on_time=total_on_time,
        total_late=total_late,
        total_absent=total_absent,
        attendance_rate=attendance_rate,
        month=month,
        year=year
    )



#TH√äM CH·∫§M C√îNG

@app.route("/attendance/add", methods=["GET", "POST"])
def add_attendance():
    conn = get_sql_connection()
    cursor = conn.cursor()

    if request.method == "POST":
        try:
            MaNV = request.form["MaNV"]
            NgayChamCong = request.form["Ngay"]
            GioVao = request.form["GioVao"]
            GioRa = request.form.get("GioRa")
            TrangThai = int(request.form["TrangThai"])

            cursor.execute("""
                INSERT INTO ChamCong (MaNV, NgayChamCong, GioVao, GioRa, TrangThai)
                VALUES (?, ?, ?, ?, ?)
            """, (MaNV, NgayChamCong, GioVao, GioRa, TrangThai))

            conn.commit()
            flash("ƒê√£ th√™m b·∫£n ghi ch·∫•m c√¥ng m·ªõi!", "success")
            return redirect(url_for("attendance_report"))
        except Exception as e:
            flash(f"L·ªói khi th√™m ch·∫•m c√¥ng: {e}", "error")
        finally:
            conn.close()

    # Danh s√°ch nh√¢n vi√™n ƒëang ho·∫°t ƒë·ªông
    cursor.execute("SELECT MaNV, HoTen FROM NhanVien WHERE TrangThai=1")
    employees = cursor.fetchall()
    conn.close()
    return render_template("attendance_add.html", employees=employees)


# S·ª¨A CH·∫§M C√îNG

@app.route("/attendance/edit/<int:id>", methods=["GET", "POST"])
@require_role("admin")
def edit_attendance(id):
    conn = get_sql_connection()
    cursor = conn.cursor()

    if request.method == "POST":
        try:
            GioVao = request.form["GioVao"]
            GioRa = request.form.get("GioRa") or None
            TrangThai = int(request.form["TrangThai"])

            #Quan tr·ªçng: L·∫•y ƒë√∫ng t√™n field l√† MaCa (m√£ ca), KH√îNG ph·∫£i CaLam (nh√£n)
            MaCa = request.form.get("MaCa") or None

            # N·∫øu form kh√¥ng ch·ªçn m√£ ca ‚Üí gi·ªØ nguy√™n m√£ ca c≈© (tr√°nh set r·ªóng g√¢y l·ªói FK)
            if MaCa is None or MaCa.strip() == "":
                cursor.execute("SELECT MaCa FROM ChamCong WHERE MaChamCong = ?", (id,))
                row_ma = cursor.fetchone()
                MaCa = row_ma[0] if row_ma else None

            # Validate MaCa c√≥ t·ªìn t·∫°i trong CaLamViec
            if MaCa:
                cursor.execute("SELECT 1 FROM CaLamViec WHERE MaCa = ?", (MaCa,))
                if cursor.fetchone() is None:
                    flash("M√£ ca kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.", "error")
                    conn.close()
                    return redirect(url_for("attendance_edit", id=id))

            # C·∫≠p nh·∫≠t d·ªØ li·ªáu
            cursor.execute("""
                UPDATE ChamCong
                SET GioVao = ?, GioRa = ?, TrangThai = ?, MaCa = ?
                WHERE MaChamCong = ?
            """, (GioVao, GioRa, TrangThai, MaCa, id))

            conn.commit()
            flash("ƒê√£ c·∫≠p nh·∫≠t b·∫£n ghi ch·∫•m c√¥ng!", "info")
            conn.close()
            return redirect(url_for("attendance_report"))

        except Exception as e:
            conn.rollback()
            flash(f"L·ªói khi c·∫≠p nh·∫≠t: {e}", "error")
            conn.close()
            return redirect(url_for("attendance_report"))

    # ---------- GET: l·∫•y b·∫£n ghi + danh s√°ch ca ----------
    cursor.execute("""
        SELECT 
            CC.MaChamCong, CC.MaNV, NV.HoTen, PB.TenPB,
            CC.NgayChamCong, CC.GioVao, CC.GioRa, CC.TrangThai,
            CC.MaCa,                                 -- L·∫§Y ƒê√öNG M√É CA HI·ªÜN T·∫†I
            KM.DuongDanAnh,
            CASE 
                WHEN DATEPART(HOUR, CC.GioVao) BETWEEN 5 AND 11 THEN N'Ca s√°ng'
                WHEN DATEPART(HOUR, CC.GioVao) BETWEEN 11 AND 17 THEN N'Ca chi·ªÅu'
                WHEN DATEPART(HOUR, CC.GioVao) BETWEEN 17 AND 23 THEN N'Ca t·ªëi'
                ELSE N'Kh√¥ng x√°c ƒë·ªãnh'
            END AS CaLamNhanh                         -- ch·ªâ ƒë·ªÉ hi·ªÉn th·ªã tham kh·∫£o
        FROM ChamCong CC
        LEFT JOIN NhanVien NV ON CC.MaNV = NV.MaNV
        LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
        LEFT JOIN KhuonMat KM ON NV.MaNV = KM.MaNV
        WHERE CC.MaChamCong = ?
    """, (id,))
    row = cursor.fetchone()

    # L·∫•y danh s√°ch ca h·ª£p l·ªá cho dropdown
    cursor.execute("""
        SELECT MaCa, TenCa, 
               FORMAT(GioBatDau, 'HH:mm') + N' - ' + FORMAT(GioKetThuc, 'HH:mm') AS KhungGio
        FROM CaLamViec
        ORDER BY MaCa
    """)
    shifts = cursor.fetchall()

    # C·∫ßn l·∫•y description tr∆∞·ªõc khi ƒë√≥ng k·∫øt n·ªëi
    cols_main = [c[0] for c in cursor.description]  # t·∫°m cho shifts, s·∫Ω kh√¥ng d√πng
    conn.close()

    if not row:
        flash("Kh√¥ng t√¨m th·∫•y b·∫£n ghi ch·∫•m c√¥ng.", "error")
        return redirect(url_for("attendance_report"))

    # T·∫°o dict cho record
    # L∆∞u √Ω: mu·ªën l·∫•y t√™n c·ªôt c·ªßa SELECT b·∫£n ghi, ta rebuild theo SELECT ·ªü tr√™n:
    record_cols = [
        "MaChamCong","MaNV","HoTen","TenPB",
        "NgayChamCong","GioVao","GioRa","TrangThai",
        "MaCa","DuongDanAnh","CaLamNhanh"
    ]
    record = dict(zip(record_cols, row))

    avatar_path = record.get("DuongDanAnh")
    record["Avatar"] = "/" + avatar_path.replace("\\", "/") if (avatar_path and avatar_path.strip()) else "/static/photos/default.jpg"

    # Chu·∫©n h√≥a shifts th√†nh list dict cho Jinja
    shift_list = [{"MaCa": s[0], "TenCa": s[1], "KhungGio": s[2]} for s in shifts]

    return render_template("attendance_edit.html", record=record, shifts=shift_list)

# X√ìA CH·∫§M C√îNG

# ============================================================
# üßπ X√ìA M·ªÄM 1 B·∫¢N GHI CH·∫§M C√îNG
# ============================================================
@app.route("/attendance/delete/<int:id>", methods=["POST"])
@require_role("admin")
def delete_attendance(id):
    conn = get_sql_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            UPDATE ChamCong
            SET DaXoa = 0
            WHERE MaChamCong = ?
        """, (id,))
        conn.commit()
        flash("üóëÔ∏è ƒê√£ x√≥a m·ªÅm b·∫£n ghi ch·∫•m c√¥ng!", "warning")
    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a m·ªÅm: {e}", "error")
    finally:
        conn.close()
    return redirect(url_for("attendance_report"))

# ============================================================
# üßπ X√ìA M·ªÄM NHI·ªÄU B·∫¢N GHI CH·∫§M C√îNG
# ============================================================
@app.route("/attendance/delete_multiple", methods=["POST"])
@require_role("admin")
def delete_multiple_attendance():
    selected_ids = request.form.getlist("selected_attendance")

    if not selected_ids:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn b·∫£n ghi ch·∫•m c√¥ng n√†o ƒë·ªÉ x√≥a!", "warning")
        return redirect(url_for("attendance_report"))

    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        for ma_cc in selected_ids:
            # L·∫•y th√¥ng tin b·∫£n ghi tr∆∞·ªõc khi x√≥a
            cursor.execute("""
                SELECT MaNV, NgayChamCong, GioVao, GioRa, TrangThai
                FROM ChamCong
                WHERE MaChamCong = ?
            """, (ma_cc,))
            old_data = cursor.fetchone()

            if not old_data:
                continue

            # üîπ X√≥a m·ªÅm (DaXoa = 0)
            cursor.execute("""
                UPDATE ChamCong
                SET DaXoa = 0
                WHERE MaChamCong = ?
            """, (ma_cc,))

            # üîπ Ghi log thay ƒë·ªïi
            username = session.get("username", "H·ªá th·ªëng")
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi, 
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, (
                "ChamCong",
                ma_cc,
                "X√≥a m·ªÅm",
                "DaXoa",
                "1",  # Gi√° tr·ªã c≈© (ƒëang ho·∫°t ƒë·ªông)
                "0",  # Gi√° tr·ªã m·ªõi (ƒë√£ x√≥a)
                username
            ))

        conn.commit()
        flash(f"üóëÔ∏è ƒê√£ x√≥a m·ªÅm {len(selected_ids)} b·∫£n ghi ch·∫•m c√¥ng!", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a m·ªÅm ch·∫•m c√¥ng: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("attendance_report"))


# ============================================================
# üîÅ KH√îI PH·ª§C 1 B·∫¢N GHI CH·∫§M C√îNG
# ============================================================
@app.route("/attendance/restore/<int:id>", methods=["POST"])
@require_role("admin")
def restore_attendance(id):
    conn = get_sql_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            UPDATE ChamCong
            SET DaXoa = 1
            WHERE MaChamCong = ?
        """, (id,))
        conn.commit()
        flash("‚úÖ ƒê√£ kh√¥i ph·ª•c b·∫£n ghi ch·∫•m c√¥ng!", "success")
    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c: {e}", "error")
    finally:
        conn.close()

    # ‚úÖ Quay l·∫°i tab Ch·∫•m c√¥ng trong deleted_records.html
    return redirect(url_for("deleted_attendance"))

# ============================================================
# ============================================================
# üîÑ KH√îI PH·ª§C NHI·ªÄU B·∫¢N GHI CH·∫§M C√îNG
# ============================================================
@app.route("/attendance/restore_multiple", methods=["POST"])
@require_role("admin")
def restore_multiple_attendance():
    selected_ids = request.form.getlist("selected_ids")

    if not selected_ids:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn b·∫£n ghi n√†o ƒë·ªÉ kh√¥i ph·ª•c!", "warning")
        return redirect(url_for("deleted_attendance"))

    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        for ma_cc in selected_ids:
            # üîπ Ki·ªÉm tra b·∫£n ghi tr∆∞·ªõc khi kh√¥i ph·ª•c
            cursor.execute("""
                SELECT MaNV, NgayChamCong, DaXoa
                FROM ChamCong
                WHERE MaChamCong = ?
            """, (ma_cc,))
            record = cursor.fetchone()

            if not record:
                continue

            ma_nv, ngay, daxoa = record

            if daxoa == 1:
                # ƒê√£ kh√¥i ph·ª•c r·ªìi, b·ªè qua
                continue

            # üîπ Kh√¥i ph·ª•c (DaXoa = 1)
            cursor.execute("""
                UPDATE ChamCong
                SET DaXoa = 1
                WHERE MaChamCong = ?
            """, (ma_cc,))

            # üîπ Ghi log kh√¥i ph·ª•c
            username = session.get("username", "H·ªá th·ªëng")
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, (
                "ChamCong",
                ma_cc,
                "Kh√¥i ph·ª•c",
                "DaXoa",
                "0", "1",  # T·ª´ ƒë√£ x√≥a ‚Üí ho·∫°t ƒë·ªông
                username
            ))

        conn.commit()
        flash(f"‚úÖ ƒê√£ kh√¥i ph·ª•c {len(selected_ids)} b·∫£n ghi ch·∫•m c√¥ng!", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("deleted_attendance"))

@app.route("/attendance/deleted")
@require_role("admin")
def deleted_attendance():
    """Hi·ªÉn th·ªã danh s√°ch ch·∫•m c√¥ng ƒë√£ x√≥a - d√πng ri√™ng (ho·∫∑c t√°i s·ª≠ d·ª•ng cho tab g·ªôp)."""
    from datetime import datetime, time
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT 
                cc.MaChamCong,
                ISNULL(cc.MaNV, nv.MaNV) AS MaNV,
                nv.HoTen,
                pb.TenPB,
                clv.TenCa,
                cc.NgayChamCong,
                cc.GioVao,
                cc.GioRa,
                cc.TrangThai

            FROM ChamCong cc
            JOIN NhanVien nv ON cc.MaNV = nv.MaNV
            LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
            LEFT JOIN CaLamViec clv ON cc.MaCa = clv.MaCa
            WHERE cc.DaXoa = 0
            ORDER BY cc.NgayChamCong DESC
        """)
        rows = cursor.fetchall()

        def format_time(value):
            """Ch·ªâ l·∫•y ph·∫ßn gi·ªù:ph√∫t:gi√¢y, b·ªè ng√†y 1900."""
            if not value:
                return "‚Äî"
            if isinstance(value, (datetime, time)):
                return value.strftime("%H:%M:%S")
            val = str(value)
            if " " in val:
                val = val.split(" ")[-1]
            return val.replace("1900-01-01", "").strip() or "‚Äî"

        deleted_attendance = []
        for ma_cham_cong, ma_nv, ho_ten, ten_pb, ten_ca, ngay, gio_vao, gio_ra, trang_thai in rows:
            gio_vao_txt, gio_ra_txt = format_time(gio_vao), format_time(gio_ra)
            trang_thai = int(trang_thai or 0)

            if trang_thai == 1:
                status_text, status_class = "ƒê√∫ng gi·ªù", "bg-success"
            elif trang_thai == 2:
                status_text, status_class = "ƒêi mu·ªôn", "bg-warning text-dark"
            elif trang_thai == 0:
                status_text, status_class = "V·∫Øng", "bg-danger"
            else:
                status_text, status_class = "Kh√¥ng x√°c ƒë·ªãnh", "bg-secondary"

            deleted_attendance.append({
                "MaChamCong": str(ma_cham_cong),
                "MaNV": str(ma_nv) if ma_nv else "‚Äî",
                "HoTen": ho_ten or "‚Äî",
                "TenPB": ten_pb or "‚Äî",
                "TenCa": ten_ca or "‚Äî",
                "NgayChamCong": (
                    ngay.strftime("%Y-%m-%d") if isinstance(ngay, datetime)
                    else str(ngay)[:10] if ngay else ""
                ),
                "GioVao": gio_vao_txt,
                "GioRa": gio_ra_txt,
                "TrangThai": trang_thai,
                "TrangThaiText": status_text,
                "StatusClass": status_class
            })

    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i danh s√°ch ch·∫•m c√¥ng ƒë√£ x√≥a: {e}", "error")
        deleted_attendance = []
    finally:
        conn.close()

    return render_template(
        "deleted_records.html",
        active_tab="attendance",
        deleted_attendance=deleted_attendance
    )


# =============================================
# H√ÄM T√çNH L∆Ø∆†NG CHO 1 NH√ÇN VI√äN
# =============================================
from datetime import datetime, date, time


# 1Ô∏è‚É£ H√ÄM CHU·∫®N CHUY·ªÇN GI·ªú & T√çNH L∆Ø∆†NG CHUNG
# ============================================================
def to_datetime(val):
    """Chuy·ªÉn string/time/datetime v·ªÅ datetime h·ª£p l·ªá."""
    if isinstance(val, datetime): 
        return val
    if isinstance(val, time): 
        return datetime.combine(date.today(), val)
    if isinstance(val, str):
        val = val.split('.')[0].strip()
        for fmt in ("%H:%M:%S", "%H:%M"):
            try:
                return datetime.strptime(val, fmt)
            except:
                pass
    return None

def tinh_luong_nv(cursor, ma_nv, thangnam, nguoi_tinh, save_to_db=True, return_detail=False):
    current_month = thangnam.month
    current_year = thangnam.year

    # --- L·∫•y ch·ª©c v·ª• ---
    cursor.execute("SELECT ChucVu FROM NhanVien WHERE MaNV=?", (ma_nv,))
    row = cursor.fetchone()
    chucvu = (row[0] or "").lower() if row else ""

    # --- H·ªá s·ªë ch·ª©c v·ª• ---
    if "tr∆∞·ªüng ph√≤ng" in chucvu:
        he_so = 1.2
    elif "ph√≥ ph√≤ng" in chucvu:
        he_so = 1.1
    elif "th·ª±c t·∫≠p" in chucvu or "intern" in chucvu:
        he_so = 0.9
    else:
        he_so = 1.0  # nh√¢n vi√™n

    # --- L·∫•y d·ªØ li·ªáu ch·∫•m c√¥ng ---
    cursor.execute("""
        SELECT 
            ISNULL(CC.MaCa, CLV.MaCa) AS MaCa,
            CC.NgayChamCong, 
            CC.GioVao, CC.GioRa, 
            CLV.GioBatDau, CLV.GioKetThuc, 
            ISNULL(CLV.TenCa, N'Kh√¥ng x√°c ƒë·ªãnh') AS TenCa
        FROM ChamCong CC
        LEFT JOIN CaLamViec CLV ON CC.MaCa = CLV.MaCa
        WHERE CC.MaNV=? AND MONTH(CC.NgayChamCong)=? AND YEAR(CC.NgayChamCong)=?
    """, (ma_nv, current_month, current_year))
    cham_cong_records = cursor.fetchall()

    if not cham_cong_records:
        return (0, 0, []) if return_detail else (0, 0)

    tong_tien, tong_gio, chi_tiet_ca = 0, 0, []

    # --- Chuy·ªÉn ƒë·ªïi th·ªùi gian ---
    def to_datetime(val):
        if isinstance(val, datetime):
            return val
        if isinstance(val, time):
            return datetime.combine(date.today(), val)
        if isinstance(val, str):
            val = val.split('.')[0].strip()
            for fmt in ("%H:%M:%S", "%H:%M"):
                try:
                    return datetime.strptime(val, fmt)
                except:
                    pass
        return None

    # --- Duy·ªát t·ª´ng b·∫£n ghi ---
    for ma_ca, ngay, gio_vao, gio_ra, gio_bd, gio_kt, ten_ca in cham_cong_records:
        if isinstance(ngay, str):
            try:
                ngay_obj = datetime.strptime(ngay.split(" ")[0], "%Y-%m-%d")
            except:
                ngay_obj = datetime.today()
        else:
            ngay_obj = ngay

        gio_vao, gio_ra, gio_bd, gio_kt = map(to_datetime, [gio_vao, gio_ra, gio_bd, gio_kt])
        if not all([gio_vao, gio_ra, gio_bd, gio_kt]):
            continue
        if gio_ra < gio_vao:
            gio_ra += timedelta(days=1)

        # --- T√≠nh s·ªë gi·ªù l√†m & ph√∫t tr·ªÖ ---
        so_gio = (gio_ra - gio_vao).total_seconds() / 3600
        di_tre = max((gio_vao - gio_bd).total_seconds() / 60, 0)
        gio_chuan = (gio_kt - gio_bd).total_seconds() / 3600

        # --- Lo·∫°i ca ---
        ca_str = (ten_ca or ma_ca).lower()
        la_ca_toi = any(x in ca_str for x in ["t·ªëi", "dem", "ƒë√™m", "ca 3", "ca3"])
        muc_ca_nv = 800_000 if la_ca_toi else 500_000
        muc_gio_nv = 150_000 if la_ca_toi else 100_000

        # --- Ph·∫°t ƒëi tr·ªÖ ---
        phat, ly_do = 0, ""
        gio_tinh_luong = so_gio  # m·∫∑c ƒë·ªãnh t√≠nh to√†n b·ªô gi·ªù l√†m

        if di_tre <= 5:
            ly_do = "ƒê√∫ng gi·ªù ho·∫∑c tr·ªÖ ‚â§5p"
        elif di_tre <= 30:
            phat = 50_000
            ly_do = f"ƒêi tr·ªÖ {int(di_tre)}p (ph·∫°t 50k)"
        elif di_tre <= 60:
            phat = 100_000
            ly_do = f"ƒêi tr·ªÖ {int(di_tre)}p (ph·∫°t 100k)"
        else:
            # Tr·ªÖ >60p ‚Üí ch·ªâ t√≠nh n·ª≠a s·ªë gi·ªù l√†m
            gio_tinh_luong = so_gio / 2
            ly_do = f"ƒêi tr·ªÖ {int(di_tre)}p (ch·ªâ t√≠nh 50% gi·ªù l√†m: {round(gio_tinh_luong,2)}h)"

        # --- T√≠nh ti·ªÅn ---
        if gio_tinh_luong >= gio_chuan - 0.1:  # ƒë·ªß full ca
            tien = muc_ca_nv * he_so - phat
            ly_do = (ly_do + "; " if ly_do else "") + "L√†m ƒë·ªß ca"
        elif gio_tinh_luong < 4:  # ch∆∞a ƒë·ªß 4 ti·∫øng
            tien = gio_tinh_luong * muc_gio_nv * he_so - phat
            ly_do = (ly_do + "; " if ly_do else "") + "L√†m ch∆∞a ƒë·ªß 4 ti·∫øng"
        elif gio_tinh_luong >= 4.5:  # l√†m >4h30
            tien_full = muc_ca_nv * he_so
            them_gio = gio_tinh_luong - gio_chuan
            tien = tien_full + (them_gio * 100_000 * he_so) - phat
            ly_do = (ly_do + "; " if ly_do else "") + f"L√†m th√™m {round(them_gio,2)}h"
        else:
            # L√†m gi·ªØa 4h v√† ƒë·ªß ca
            ty_le = gio_tinh_luong / gio_chuan
            tien = muc_ca_nv * ty_le * he_so - phat
            ly_do = (ly_do + "; " if ly_do else "") + "L√†m ch∆∞a ƒë·ªß ca"

        tong_tien += tien
        tong_gio += so_gio

        if return_detail:
            chi_tiet_ca.append({
                "NgayChamCong": ngay_obj.strftime("%d/%m/%Y"),
                "Ca": ten_ca or ma_ca,
                "GioVao": gio_vao.strftime("%H:%M"),
                "GioRa": gio_ra.strftime("%H:%M"),
                "SoGio": round(so_gio, 2),
                "GioTinhLuong": round(gio_tinh_luong, 2),
                "HeSo": he_so,
                "Tien": round(tien, 0),
                "LyDoTru": ly_do or "‚Äî"
            })

    # --- L∆∞u DB ---
    if save_to_db:
        cursor.execute("""
            DELETE FROM Luong 
            WHERE MaNV=? AND MONTH(ThangNam)=? AND YEAR(ThangNam)=?
        """, (ma_nv, current_month, current_year))
        cursor.execute("""
            INSERT INTO Luong (MaNV, ThangNam, SoGioLam, TongTien, TrangThai, NguoiTinhLuong, NgayTinhLuong)
            VALUES (?, ?, ?, ?, 1, ?, GETDATE())
        """, (ma_nv, thangnam, tong_gio, tong_tien, nguoi_tinh))

    return (round(tong_gio, 2), round(tong_tien, 0), chi_tiet_ca) if return_detail else (round(tong_gio, 2), round(tong_tien, 0))


@app.route("/salary")
@require_role("admin")
def salary_view():
    conn = get_sql_connection()
    cursor = conn.cursor()

    current_year = datetime.now().year
    current_month = datetime.now().month

    # üü¢ T·ªïng s·ªë nh√¢n vi√™n ƒëang ho·∫°t ƒë·ªông
    cursor.execute("""
        SELECT COUNT(*) 
        FROM NhanVien 
        WHERE TrangThai = 1
    """)
    total_employees = cursor.fetchone()[0] or 0

    # üü¢ S·ªë nh√¢n vi√™n ƒë√£ c√≥ l∆∞∆°ng th√°ng n√†y (ch·ªâ t√≠nh nh√¢n vi√™n c√≤n ho·∫°t ƒë·ªông)
    cursor.execute("""
        SELECT COUNT(DISTINCT L.MaNV)
        FROM Luong L
        JOIN NhanVien NV ON L.MaNV = NV.MaNV
        WHERE MONTH(L.ThangNam)=? 
          AND YEAR(L.ThangNam)=? 
          AND L.DaXoa = 1
          AND L.TrangThai = 1
          AND NV.TrangThai = 1
    """, (current_month, current_year))
    total_salaried = cursor.fetchone()[0] or 0

    # üü¢ S·ªë nh√¢n vi√™n ch∆∞a t√≠nh
    total_unsalaried = max(total_employees - total_salaried, 0)

    # üü¢ T·ªïng qu·ªπ l∆∞∆°ng th√°ng n√†y (ch·ªâ t√≠nh l∆∞∆°ng h·ª£p l·ªá c·ªßa nh√¢n vi√™n c√≤n ho·∫°t ƒë·ªông)
    cursor.execute("""
        SELECT SUM(L.TongTien)
        FROM Luong L
        JOIN NhanVien NV ON L.MaNV = NV.MaNV
        WHERE MONTH(L.ThangNam)=? 
          AND YEAR(L.ThangNam)=? 
          AND L.DaXoa = 1
          AND L.TrangThai = 1
          AND NV.TrangThai = 1
    """, (current_month, current_year))
    total_salary = cursor.fetchone()[0] or 0

    # üü¢ Danh s√°ch nh√¢n vi√™n ƒëang ho·∫°t ƒë·ªông + l∆∞∆°ng c√≤n hi·ªáu l·ª±c
    cursor.execute("""
        SELECT 
            NV.MaNV,
            NV.HoTen,
            PB.TenPB AS PhongBan,
            ISNULL(L.SoGioLam, 0) AS SoGioLam,
            ISNULL(L.TongTien, 0) AS TongTien,
            ISNULL(L.TrangThai, 0) AS TrangThai,
            ISNULL(L.DaXoa, 1) AS DaXoa
        FROM NhanVien NV
        LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
        LEFT JOIN Luong L 
            ON NV.MaNV = L.MaNV 
            AND MONTH(L.ThangNam)=? 
            AND YEAR(L.ThangNam)=?
            AND (L.DaXoa = 1 OR L.DaXoa IS NULL)
        WHERE NV.TrangThai = 1
        ORDER BY NV.MaNV
    """, (current_month, current_year))

    cols = [c[0] for c in cursor.description]
    salaries = [dict(zip(cols, row)) for row in cursor.fetchall()]

    conn.close()

    # üßæ Render k·∫øt qu·∫£ ra giao di·ªán
    return render_template(
        "salary.html",
        total_employees=total_employees,
        total_salaried=total_salaried,
        total_unsalaried=total_unsalaried,
        total_salary=total_salary,
        salaries=salaries,
        current_month=current_month,
        current_year=current_year
    )



# ============================================================
# 3Ô∏è‚É£ T√çNH L∆Ø∆†NG TO√ÄN B·ªò
# ============================================================
@app.route("/calculate_salary")
@require_role("admin")
def calculate_all_salary():
    conn = get_sql_connection()
    cursor = conn.cursor()

    today = datetime.now()
    thangnam = datetime(today.year, today.month, 1)
    nguoi_tinh = session.get("username", "Admin")

    try:
        cursor.execute("SELECT MaNV FROM NhanVien")
        nhanvien = cursor.fetchall()
        if not nhanvien:
            return jsonify({"success": False, "message": "‚ö†Ô∏è Kh√¥ng c√≥ nh√¢n vi√™n n√†o trong h·ªá th·ªëng."})

        da_tinh = 0
        for (ma_nv,) in nhanvien:
            try:
                tinh_luong_nv(cursor, ma_nv, thangnam, nguoi_tinh)
                da_tinh += 1
            except Exception as e:
                print(f"L·ªói khi t√≠nh l∆∞∆°ng {ma_nv}: {e}")

        conn.commit()
        return jsonify({"success": True, "message": f"‚úÖ ƒê√£ t√≠nh l∆∞∆°ng cho {da_tinh}/{len(nhanvien)} nh√¢n vi√™n!"})
    except Exception as e:
        conn.rollback()
        return jsonify({"success": False, "message": f"‚ùå L·ªói khi t√≠nh l∆∞∆°ng: {str(e)}"})
    finally:
        cursor.close()
        conn.close()

# ============================================================
# üîπ T√çNH L∆Ø∆†NG RI√äNG CHO 1 NH√ÇN VI√äN
# ============================================================
@app.route("/calculate_salary/<ma_nv>")
@require_role("admin")
def calculate_salary_for_one(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()

    today = datetime.now()
    thangnam = datetime(today.year, today.month, 1)
    nguoi_tinh = session.get("username", "Admin")

    try:
        tong_gio, tong_tien, _ = tinh_luong_nv(
            cursor, ma_nv, thangnam, nguoi_tinh, save_to_db=True, return_detail=True
        )
        conn.commit()
        return jsonify({
            "success": True,
            "message": f"‚úÖ ƒê√£ t√≠nh l∆∞∆°ng cho {ma_nv}: {tong_gio:.2f} gi·ªù, {tong_tien:,.0f} VND"
        })
    except Exception as e:
        conn.rollback()
        return jsonify({
            "success": False,
            "message": f"‚ùå L·ªói khi t√≠nh l∆∞∆°ng {ma_nv}: {str(e)}"
        })
    finally:
        cursor.close()
        conn.close()

# ============================================================
# 4Ô∏è‚É£ CHI TI·∫æT L∆Ø∆†NG M·ªñI NH√ÇN VI√äN
# ============================================================
@app.route("/salary/<ma_nv>")
@require_role("admin")
def salary_detail(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()
    now = datetime.now()
    thangnam = datetime(now.year, now.month, 1)

    cursor.execute("""
        SELECT NV.MaNV, NV.HoTen, NV.ChucVu, PB.TenPB
        FROM NhanVien NV
        LEFT JOIN PhongBan PB ON NV.MaPB=PB.MaPB
        WHERE NV.MaNV=?
    """, (ma_nv,))
    emp = cursor.fetchone()
    if not emp:
        conn.close()
        return f"<h3>‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n {ma_nv}</h3>"

    # ‚öôÔ∏è Xem chi ti·∫øt ch·ªâ t√≠nh, kh√¥ng ghi DB
    tong_gio, tong_tien, records = tinh_luong_nv(
    cursor, ma_nv, thangnam, "Xem chi ti·∫øt", save_to_db=False, return_detail=True
)
    conn.close()

    # --- G√°n bi·ªÉu t∆∞·ª£ng ---
    chucvu = (emp[2] or "").lower()
    if "tr∆∞·ªüng ph√≤ng" in chucvu:
        role_label, role_icon = "Tr∆∞·ªüng ph√≤ng", "fa-star text-warning"
    elif "ph√≥ ph√≤ng" in chucvu:
        role_label, role_icon = "Ph√≥ ph√≤ng", "fa-crown text-info"
    elif "th·ª±c t·∫≠p" in chucvu or "intern" in chucvu:
        role_label, role_icon = "Th·ª±c t·∫≠p sinh", "fa-user-graduate text-secondary"
    else:
        role_label, role_icon = "Nh√¢n vi√™n", "fa-user text-primary"

    return render_template("salary_detail.html",
        emp=emp,
        records=records,
        tong_gio=tong_gio,
        tong_tien=tong_tien,
        role_label=role_label,
        role_icon=role_icon,
        current_month=now.month,
        current_year=now.year
    )

# ============================================================
# ‚ùå X√ìA M·ªÄM 1 B·∫¢N GHI L∆Ø∆†NG THEO M√É NH√ÇN VI√äN
# ============================================================
@app.route("/salary/delete/<ma_nv>", methods=["POST"])
@require_role("admin")
def delete_salary(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        cursor.execute("""
            UPDATE Luong
            SET DaXoa = 0
            WHERE MaNV = ?
        """, (ma_nv,))

        cursor.execute("""
            INSERT INTO LichSuThayDoi (
                TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
            )
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, ("Luong", ma_nv, "X√≥a m·ªÅm", "DaXoa", 1, 0, username))

        conn.commit()
        flash(f"üóëÔ∏è ƒê√£ x√≥a m·ªÅm l∆∞∆°ng c·ªßa nh√¢n vi√™n {ma_nv}!", "warning")
    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a m·ªÅm: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("salary_view"))


# ============================================================
# üßπ X√ìA M·ªÄM NHI·ªÄU B·∫¢N GHI L∆Ø∆†NG
# ============================================================
@app.route("/salary/delete-multiple", methods=["POST"])
@require_role("admin")
def delete_multiple_salary():
    ma_nv_list = request.form.getlist("selected_salaries")
    if not ma_nv_list:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn nh√¢n vi√™n n√†o ƒë·ªÉ x√≥a l∆∞∆°ng!", "warning")
        return redirect(url_for("salary_view"))

    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        for ma_nv in ma_nv_list:
            cursor.execute("UPDATE Luong SET DaXoa = 0 WHERE MaNV = ?", (ma_nv,))
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, ("Luong", ma_nv, "X√≥a m·ªÅm", "DaXoa", 1, 0, username))
        conn.commit()
        flash(f"üóëÔ∏è ƒê√£ x√≥a m·ªÅm {len(ma_nv_list)} b·∫£n ghi l∆∞∆°ng!", "warning")
    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a nhi·ªÅu: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("salary_view"))


# ============================================================
# ‚ôªÔ∏è KH√îI PH·ª§C 1 B·∫¢N GHI L∆Ø∆†NG
# ============================================================
@app.route("/salary/restore/<int:id>", methods=["POST"])
@require_role("admin")
def restore_salary(id):
    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        cursor.execute("UPDATE Luong SET DaXoa = 1 WHERE MaLuong = ?", (id,))
        cursor.execute("""
            INSERT INTO LichSuThayDoi (
                TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
            )
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, ("Luong", id, "Kh√¥i ph·ª•c", "DaXoa", 0, 1, username))

        conn.commit()
        flash("‚úÖ ƒê√£ kh√¥i ph·ª•c b·∫£n ghi l∆∞∆°ng!", "success")
    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("deleted_salaries"))


# ============================================================
# üîÅ KH√îI PH·ª§C NHI·ªÄU B·∫¢N GHI L∆Ø∆†NG
# ============================================================
@app.route("/salary/restore_multiple", methods=["POST"])
@require_role("admin")
def restore_multiple_salaries():
    ids = request.form.getlist("selected_salaries")
    if not ids:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn b·∫£n ghi n√†o ƒë·ªÉ kh√¥i ph·ª•c!", "warning")
        return redirect(url_for("deleted_salaries"))

    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        for salary_id in ids:
            cursor.execute("UPDATE Luong SET DaXoa = 1 WHERE MaLuong = ?", (salary_id,))
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, ("Luong", salary_id, "Kh√¥i ph·ª•c nhi·ªÅu", "DaXoa", 0, 1, username))
        conn.commit()
        flash(f"‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c {len(ids)} b·∫£n ghi l∆∞∆°ng!", "success")
    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c nhi·ªÅu: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("deleted_salaries"))


# ============================================================
# üìã DANH S√ÅCH L∆Ø∆†NG ƒê√É X√ìA
# ============================================================
@app.route("/salary/deleted")
@require_role("admin")
def deleted_salaries():
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT 
                L.MaLuong,
                NV.MaNV,
                NV.HoTen,
                PB.TenPB,
                L.SoGioLam,
                L.TongTien,
                L.ThangNam
            FROM Luong L
            JOIN NhanVien NV ON L.MaNV = NV.MaNV
            LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
            WHERE L.DaXoa = 0
            ORDER BY L.ThangNam DESC
        """)
        rows = cursor.fetchall()
        cols = [c[0] for c in cursor.description]
        deleted_salaries = [dict(zip(cols, row)) for row in rows]
    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i danh s√°ch l∆∞∆°ng ƒë√£ x√≥a: {e}", "error")
        deleted_salaries = []
    finally:
        conn.close()

    # ‚úÖ ƒê·∫∑t ƒë√∫ng t√™n tab: 'salaries'
    return render_template(
        "deleted_records.html",
        deleted_salaries=deleted_salaries,
        active_tab="salaries"   # ‚úÖ S·ª≠a ·ªü ƒë√¢y
    )

# L·ªãch s·ª≠ thay ƒë·ªïi

@app.route("/history")
@require_role("admin")
def history():
    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- L·∫•y tham s·ªë t·ª´ form ---
    selected_table = request.args.get("table")
    selected_action = request.args.get("action")
    keyword_user = request.args.get("user", "").strip()

    # --- C√¢u truy v·∫•n ch√≠nh ---
    base_query = """
        SELECT 
            ls.*, 
            COALESCE(tk.TenDangNhap, ls.NguoiThucHien) AS TenDangNhap
        FROM LichSuThayDoi ls
        LEFT JOIN TaiKhoan tk 
            ON TRY_CAST(ls.NguoiThucHien AS INT) = tk.MaTK
    """

    filters = []
    params = []

    # --- L·ªçc theo b·∫£ng ---
    if selected_table:
        filters.append("ls.TenBang = ?")
        params.append(selected_table)

    # --- L·ªçc theo h√†nh ƒë·ªông ---
    if selected_action:
        filters.append("ls.HanhDong = ?")
        params.append(selected_action)

    # --- L·ªçc theo ng∆∞·ªùi th·ª±c hi·ªán (LIKE) ---
    if keyword_user:
        filters.append("(tk.TenDangNhap LIKE ? OR ls.NguoiThucHien LIKE ?)")
        like_pattern = f"%{keyword_user}%"
        params.extend([like_pattern, like_pattern])

    if filters:
        base_query += " WHERE " + " AND ".join(filters)

    base_query += " ORDER BY ls.ThoiGian DESC"

    cursor.execute(base_query, params)
    rows = cursor.fetchall()

    # --- Danh s√°ch b·∫£ng v√† h√†nh ƒë·ªông (th√™m ‚ÄúXem chi ti·∫øt‚Äù) ---
    cursor.execute("SELECT DISTINCT TenBang FROM LichSuThayDoi ORDER BY TenBang")
    table_names = [r[0] for r in cursor.fetchall()]

    cursor.execute("""
        SELECT DISTINCT HanhDong 
        FROM LichSuThayDoi 
        WHERE HanhDong IN (N'Th√™m', N'S·ª≠a', N'X√≥a', N'Xem chi ti·∫øt')
        ORDER BY HanhDong
    """)
    action_names = [r[0] for r in cursor.fetchall()]

    conn.close()
    return render_template(
        "history.html",
        histories=rows,
        tables=table_names,
        actions=action_names,
        selected_table=selected_table,
        selected_action=selected_action,
        keyword_user=keyword_user
    )

@app.route("/settings", endpoint='settings')
@require_role("admin")
def settings_view():
    return "<h1>Trang C√†i ƒë·∫∑t (Settings)</h1>"

from flask import send_from_directory

@app.route('/photos/<path:filename>')
def serve_photos(filename):
    """Cho ph√©p Flask hi·ªÉn th·ªã ·∫£nh t·ª´ th∆∞ m·ª•c photos/"""
    import os
    photo_dir = os.path.join(os.getcwd(), 'photos')  # ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi
    return send_from_directory(photo_dir, filename)

@app.route("/export_report/word")
def export_report_word():
    # L·∫•y d·ªØ li·ªáu th·ªëng k√™
    total_employees = 6
    total_departments = 4
    attendance_rate = "96.5%"
    avg_hours = 4
    total_shifts = 1
    total_salary = 0

    # T·∫°o file Word
    doc = Document()
    doc.add_heading("B√ÅO C√ÅO T·ªîNG QUAN H·ªÜ TH·ªêNG", level=1)
    doc.add_paragraph(f"T·ªïng nh√¢n vi√™n: {total_employees}")
    doc.add_paragraph(f"T·ªïng ph√≤ng ban: {total_departments}")
    doc.add_paragraph(f"T·ªâ l·ªá ch·∫•m c√¥ng: {attendance_rate}")
    doc.add_paragraph(f"Gi·ªù trung b√¨nh/Tu·∫ßn: {avg_hours}")
    doc.add_paragraph(f"T·ªïng s·ªë ca: {total_shifts}")
    doc.add_paragraph(f"T·ªïng l∆∞∆°ng: {total_salary}")

    # L∆∞u ra b·ªô nh·ªõ t·∫°m
    file_stream = io.BytesIO()
    doc.save(file_stream)
    file_stream.seek(0)

    return send_file(
        file_stream,
        as_attachment=True,
        download_name="BaoCaoTongQuan.docx",
        mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

@app.route("/export_report/excel")
@require_role("admin")
def export_report_excel():
    wb = Workbook()
    ws = wb.active
    ws.title = "B√°o c√°o t·ªïng quan"

    ws.append(["Ch·ªâ ti√™u", "Gi√° tr·ªã"])
    ws.append(["T·ªïng nh√¢n vi√™n", 6])
    ws.append(["T·ªïng ph√≤ng ban", 4])
    ws.append(["T·ªâ l·ªá ch·∫•m c√¥ng", "96.5%"])
    ws.append(["Gi·ªù TB/Tu·∫ßn", 4])
    ws.append(["T·ªïng s·ªë ca", 1])
    ws.append(["T·ªïng l∆∞∆°ng", 0])

    file_stream = io.BytesIO()
    wb.save(file_stream)
    file_stream.seek(0)

    return send_file(
        file_stream,
        as_attachment=True,
        download_name="BaoCaoTongQuan.xlsx",
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

def cap_nhat_vang_va_phep():
    conn = get_sql_connection()
    cursor = conn.cursor()

    cursor.execute("""
        INSERT INTO ChamCong (MaNV, MaLLV, MaCa, NgayChamCong, TrangThai, DaXoa, GhiChu)
        SELECT 
            llv.MaNV, llv.MaLLV, llv.MaCa, llv.NgayLam, 0, 1, N'Kh√¥ng ch·∫•m c√¥ng'
        FROM LichLamViec llv
        LEFT JOIN ChamCong cc
            ON llv.MaNV = cc.MaNV 
           AND llv.MaCa = cc.MaCa 
           AND llv.NgayLam = cc.NgayChamCong
        WHERE cc.MaChamCong IS NULL 
          AND llv.NgayLam < CAST(GETDATE() AS DATE)
          AND llv.DaXoa = 1
    """)

    conn.commit()
    conn.close()
@app.route("/update_absences", methods=["POST"])
@require_role("admin")
def update_absences():
    try:
        cap_nhat_vang_va_phep()
        flash("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i V·∫ÆNG cho nh√¢n vi√™n ch∆∞a ch·∫•m c√¥ng!", "success")
    except Exception as e:
        flash(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t v·∫Øng: {e}", "error")
    return redirect(url_for("attendance_report"))


#NH√ÇN VI√äN
# TRANG CH√çNH C·ª¶A NH√ÇN VI√äN

@app.route("/employee/dashboard")
def employee_dashboard():
    # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    if "manv" not in session:
        return redirect(url_for("login"))

    ma_nv = session["manv"]

    conn = get_sql_connection()
    cursor = conn.cursor()

    # 1. L·∫•y th√¥ng tin nh√¢n vi√™n
    cursor.execute("""
        SELECT nv.MaNV, nv.HoTen, nv.Email, nv.NgaySinh, nv.ChucVu, nv.DiaChi, 
               pb.TenPB, nv.LuongGioCoBan
        FROM NhanVien nv
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        WHERE nv.MaNV = ?
    """, (ma_nv,))
    row = cursor.fetchone()
    nhanvien = dict(zip([col[0] for col in cursor.description], row)) if row else {}

    # 2. L·∫•y th√¥ng tin ca l√†m vi·ªác c·ªßa nh√¢n vi√™n
    cursor.execute("""
        SELECT clv.MaCa, clv.TenCa, clv.GioBatDau, clv.GioKetThuc, clv.HeSo, hsl.DonGia
        FROM LichLamViec llv
        JOIN CaLamViec clv ON llv.MaCa = clv.MaCa
        LEFT JOIN HeSoLuong hsl ON clv.MaHSL = hsl.MaHSL
        WHERE llv.MaNV = ?
    """, (ma_nv,))
    calamviec = [dict(zip([col[0] for col in cursor.description], r)) for r in cursor.fetchall()]

    # 3. L·ªãch s·ª≠ ch·∫•m c√¥ng
    cursor.execute("""
        SELECT MaChamCong, NgayChamCong, GioVao, GioRa, TrangThai
        FROM ChamCong
        WHERE MaNV = ?
        ORDER BY NgayChamCong DESC
    """, (ma_nv,))
    chamcong = [dict(zip([col[0] for col in cursor.description], r)) for r in cursor.fetchall()]

    # 4. L·ªãch s·ª≠ ho·∫°t ƒë·ªông
    cursor.execute("""
        SELECT ThoiGian, TenBang, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi
        FROM LichSuThayDoi
        WHERE NguoiThucHien = ?
        ORDER BY ThoiGian DESC
    """, (session["hoten"],))
    lichsu = [dict(zip([col[0] for col in cursor.description], r)) for r in cursor.fetchall()]

    conn.close()

    return render_template(
        "employee_dashboard.html",
        nhanvien=nhanvien,
        calamviec=calamviec,
        chamcong=chamcong,
        lichsu=lichsu
    )

# Trang xem ca l√†m c·ªßa nh√¢n vi√™n

@app.route("/employee/shifts")

def employee_shifts():
    if "manv" not in session:
        return redirect(url_for("login"))

    ma_nv = session["manv"]

    conn = get_sql_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT clv.MaCa, clv.TenCa, clv.GioBatDau, clv.GioKetThuc, clv.HeSo, hsl.DonGia
        FROM LichLamViec llv
        JOIN CaLamViec clv ON llv.MaCa = clv.MaCa
        LEFT JOIN HeSoLuong hsl ON clv.MaHSL = hsl.MaHSL
        WHERE llv.MaNV = ?
    """, (ma_nv,))

    calamviec = [dict(zip([col[0] for col in cursor.description], r)) for r in cursor.fetchall()]
    conn.close()

    return render_template("employee_shifts.html", calamviec=calamviec)

# Trang xem l·ªãch s·ª≠ ch·∫•m c√¥ng c·ªßa nh√¢n vi√™n

@app.route("/employee/attendance")
def employee_attendance():
    if "manv" not in session:
        return redirect(url_for("login"))

    ma_nv = session["manv"]
    conn = get_sql_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT NgayChamCong, GioVao, GioRa, TrangThai
        FROM ChamCong
        WHERE MaNV = ?
        ORDER BY NgayChamCong DESC
    """, (ma_nv,))
    chamcong = [dict(zip([col[0] for col in cursor.description], r)) for r in cursor.fetchall()]
    conn.close()

    return render_template("employee_attendance.html", chamcong=chamcong)

# Trang xem l·ªãch s·ª≠ ho·∫°t ƒë·ªông c·ªßa nh√¢n vi√™n

@app.route("/employee/history")
def employee_history():
    if "manv" not in session:
        return redirect(url_for("login"))

    hoten = session["hoten"]

    conn = get_sql_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT ThoiGian, TenBang, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi
        FROM LichSuThayDoi
        WHERE NguoiThucHien = ?
        ORDER BY ThoiGian DESC
    """, (hoten,))
    lichsu = [dict(zip([col[0] for col in cursor.description], r)) for r in cursor.fetchall()]
    conn.close()

    return render_template("employee_history.html", lichsu=lichsu)

# ƒêƒÉng xu·∫•t

@app.route("/logout")
def logout():
    session.clear()
    flash("ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!", "success")
    return redirect(url_for("login"))

# Trang th√¥ng tin nh√¢n vi√™n

@app.route("/employee/profile")
def employee_profile():
    if "role" not in session or session["role"].lower() != "nhanvien":
        flash("Ch·ªâ nh√¢n vi√™n m·ªõi truy c·∫≠p ƒë∆∞·ª£c trang n√†y!", "warning")
        return redirect(url_for("login"))

    ma_nv = session.get("manv")

    conn = get_sql_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT nv.MaNV, nv.HoTen, nv.Email, nv.SDT, nv.NgaySinh, nv.DiaChi, 
               nv.ChucVu, pb.TenPB, km.DuongDanAnh
        FROM NhanVien nv
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat km ON nv.MaNV = km.MaNV
        WHERE nv.MaNV = ?
    """, (ma_nv,))
    emp = cursor.fetchone()
    conn.close()

    if not emp:
        flash("Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n!", "danger")
        return redirect(url_for("login"))

    fields = [col[0] for col in cursor.description]
    emp_dict = dict(zip(fields, emp))

    return render_template("employee_profile.html", employee=emp_dict)


# Run app
# ======================
if __name__ == "__main__":
    app.run(debug=True)


