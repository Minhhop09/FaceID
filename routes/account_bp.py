from flask import Blueprint, render_template, request, redirect, url_for, flash, session
from core.db_utils import get_sql_connection
from core.decorators import require_role
import hashlib
from flask import jsonify
from core.email_utils import send_email_notification
from threading import Thread

account_bp = Blueprint("account_bp", __name__)

# DANH S√ÅCH T√ÄI KHO·∫¢N

@account_bp.route("/accounts")
@require_role("admin")
def accounts():
    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- Th·ªëng k√™ t·ªïng quan ---
    cursor.execute("SELECT COUNT(*) FROM TaiKhoan WHERE TrangThai = 1")
    total_accounts = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM TaiKhoan WHERE TrangThai = 1")
    active_accounts = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM TaiKhoan WHERE TrangThai = 0")
    inactive_accounts = cursor.fetchone()[0]

    # --- ƒê·∫øm lo·∫°i t√†i kho·∫£n ---
    cursor.execute("""
        SELECT COUNT(*) 
        FROM TaiKhoan
        WHERE TrangThai = 1
        AND LOWER(VaiTro) IN (N'admin', N'qu·∫£n tr·ªã vi√™n', N'administrator')
    """)
    admin_accounts = cursor.fetchone()[0]

    cursor.execute("""
        SELECT COUNT(*) 
        FROM TaiKhoan
        WHERE TrangThai = 1
        AND LOWER(VaiTro) IN (N'user', N'nhanvien', N'nh√¢n vi√™n', N'ng∆∞·ªùi d√πng')
    """)
    user_accounts = cursor.fetchone()[0]

    # --- Danh s√°ch t√†i kho·∫£n ---
    cursor.execute("""
        SELECT 
            t.MaTK,
            t.TenDangNhap,
            ISNULL(n.HoTen, N'‚Äî') AS HoTen,
            ISNULL(n.Email, N'‚Äî') AS Email,
            CASE 
                WHEN LOWER(t.VaiTro) IN (N'admin', N'qu·∫£n tr·ªã vi√™n', N'administrator') THEN N'Qu·∫£n tr·ªã vi√™n'
                WHEN LOWER(t.VaiTro) IN (N'user', N'nhanvien', N'nh√¢n vi√™n', N'ng∆∞·ªùi d√πng') THEN N'Nh√¢n vi√™n'
                ELSE ISNULL(t.VaiTro, N'Kh√¥ng x√°c ƒë·ªãnh')
            END AS VaiTro,
            CASE 
                WHEN t.TrangThai = 1 THEN N'ƒêang ho·∫°t ƒë·ªông'
                ELSE N'Ng·ª´ng ho·∫°t ƒë·ªông'
            END AS TrangThai,
            t.TrangThai AS TrangThaiCode,
            CONVERT(VARCHAR(10), t.NgayTao, 103) AS NgayTao
        FROM TaiKhoan t
        LEFT JOIN NhanVien n ON t.MaNV = n.MaNV
        WHERE t.TrangThai = 1
        ORDER BY t.NgayTao DESC
    """)
    accounts = cursor.fetchall()

    conn.close()

    return render_template(
        "accounts.html",
        accounts=accounts,
        total_accounts=total_accounts,
        active_accounts=active_accounts,
        inactive_accounts=inactive_accounts,
        admin_accounts=admin_accounts,
        user_accounts=user_accounts
    )

# TH√äM T√ÄI KHO·∫¢N

@account_bp.route("/accounts/add", methods=["GET", "POST"])
@require_role("admin")
def add_account():
    if request.method == "POST":
        username = request.form.get("username", "").strip()
        password = request.form.get("password", "").strip()
        role = request.form.get("role", "").strip()

        if not username or not password or not role:
            flash("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", "danger")
            return redirect(url_for("account_bp.add_account"))

        hashed_password = hashlib.sha256(password.encode("utf-8")).hexdigest()

        conn = get_sql_connection()
        cursor = conn.cursor()

        try:
            # --- Ki·ªÉm tra tr√πng t√™n ƒëƒÉng nh·∫≠p ---
            cursor.execute("SELECT COUNT(*) FROM TaiKhoan WHERE TenDangNhap = ?", (username,))
            if cursor.fetchone()[0] > 0:
                flash("T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i!", "warning")
                conn.close()
                return redirect(url_for("account_bp.add_account"))

            # --- Th√™m t√†i kho·∫£n ---
            cursor.execute("""
                INSERT INTO TaiKhoan (TenDangNhap, MatKhauHash, VaiTro, TrangThai, NgayTao)
                VALUES (?, ?, ?, 1, GETDATE())
            """, (username, hashed_password, role))

            # --- Ghi log thay ƒë·ªïi ---
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES ('TaiKhoan', ?, N'Th√™m m·ªõi', N'To√†n b·ªô', NULL, ?, GETDATE(), ?)
            """, (username, username, session.get("user_id", "H·ªá th·ªëng")))

            conn.commit()
            flash("Th√™m t√†i kho·∫£n th√†nh c√¥ng!", "success")

        except Exception as e:
            conn.rollback()
            flash(f"L·ªói khi th√™m t√†i kho·∫£n: {e}", "danger")
        finally:
            conn.close()

        return redirect(url_for("account_bp.accounts"))

    return render_template("add_account.html")

# S·ª¨A T√ÄI KHO·∫¢N

@account_bp.route("/accounts/edit/<username>", methods=["GET", "POST"])
@require_role("admin")
def edit_account(username):
    conn = get_sql_connection()
    cursor = conn.cursor()

    if request.method == "POST":
        password = request.form.get("password", "").strip()
        role = request.form.get("role", "").strip()

        if not role:
            flash("Vai tr√≤ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", "warning")
            return redirect(url_for("account_bp.edit_account", username=username))

        try:
            if password:
                hashed_password = hashlib.sha256(password.encode("utf-8")).hexdigest()
                cursor.execute("""
                    UPDATE TaiKhoan
                    SET MatKhauHash = ?, VaiTro = ?
                    WHERE TenDangNhap = ?
                """, (hashed_password, role, username))
            else:
                cursor.execute("""
                    UPDATE TaiKhoan
                    SET VaiTro = ?
                    WHERE TenDangNhap = ?
                """, (role, username))

            # Ghi log
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES ('TaiKhoan', ?, N'C·∫≠p nh·∫≠t', N'VaiTro / MatKhau', NULL, ?, GETDATE(), ?)
            """, (username, role, session.get("user_id", "H·ªá th·ªëng")))

            conn.commit()
            flash("C·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng!", "success")

        except Exception as e:
            conn.rollback()
            flash(f"L·ªói khi c·∫≠p nh·∫≠t t√†i kho·∫£n: {e}", "danger")
        finally:
            conn.close()

        return redirect(url_for("account_bp.accounts"))

    # --- GET: L·∫•y th√¥ng tin t√†i kho·∫£n ---
    cursor.execute("SELECT TenDangNhap, VaiTro FROM TaiKhoan WHERE TenDangNhap = ?", (username,))
    account = cursor.fetchone()
    conn.close()

    if not account:
        flash("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n.", "danger")
        return redirect(url_for("account_bp.accounts"))

    return render_template("edit_account.html", account=account)

# H√ÄM CHUNG ‚Äì C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI T√ÄI KHO·∫¢N
def send_mail_background(email, subject, body):
    """H√†m g·ª≠i email trong thread n·ªÅn (kh√¥ng l√†m ch·∫≠m request ch√≠nh)."""
    try:
        send_email_notification(email, subject, body)
    except Exception as e:
        print(f"‚ùå [THREAD] L·ªói g·ª≠i email n·ªÅn: {e}")


def change_account_status(ma_nv, new_status, action_name):
    """
    C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n (kh√≥a / k√≠ch ho·∫°t),
    g·ª≠i email th√¥ng b√°o cho nh√¢n vi√™n (n·ªÅn),
    v√† ghi log v√†o LichSuThayDoi + LichSuEmail.
    """
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        print(f"üîç [DEBUG] B·∫Øt ƒë·∫ßu thay ƒë·ªïi tr·∫°ng th√°i cho nh√¢n vi√™n {ma_nv} ‚Üí {new_status}")

        # 1Ô∏è‚É£ L·∫•y tr·∫°ng th√°i c≈©
        cursor.execute("SELECT TrangThai FROM TaiKhoan WHERE MaNV = ?", (ma_nv,))
        old_row = cursor.fetchone()
        old_status = old_row[0] if old_row else None

        if old_status is None:
            flash("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n t∆∞∆°ng ·ª©ng v·ªõi nh√¢n vi√™n n√†y!", "danger")
            print("‚ö†Ô∏è Kh√¥ng c√≥ t√†i kho·∫£n ·ª©ng v·ªõi nh√¢n vi√™n.")
            return False

        # 2Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi
        cursor.execute("""
            UPDATE TaiKhoan
            SET TrangThai = ?
            WHERE MaNV = ?
        """, (new_status, ma_nv))
        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n.")

        # 3Ô∏è‚É£ Ghi log thay ƒë·ªïi
        cursor.execute("""
            INSERT INTO LichSuThayDoi (
                TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
            )
            VALUES (
                N'TaiKhoan', ?, ?, N'TrangThai',
                ?, ?, GETDATE(), ?
            )
        """, (
            ma_nv,
            action_name,
            str(old_status),
            str(new_status),
            session.get("user_id", "H·ªá th·ªëng")
        ))
        print("üìù ƒê√£ ghi log LichSuThayDoi.")

        # 4Ô∏è‚É£ L·∫•y th√¥ng tin nh√¢n vi√™n
        cursor.execute("""
            SELECT TK.MaTK, NV.Email, NV.HoTen
            FROM TaiKhoan TK
            JOIN NhanVien NV ON TK.MaNV = NV.MaNV
            WHERE NV.MaNV = ?
        """, (ma_nv,))
        row = cursor.fetchone()

        if not row:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n c√≥ m√£ {ma_nv} ƒë·ªÉ g·ª≠i email.")
        else:
            ma_tk, email, hoten = row
            print(f"üìß Chu·∫©n b·ªã g·ª≠i email cho {hoten} ({email})")

            # 5Ô∏è‚É£ Chu·∫©n b·ªã n·ªôi dung email
            if new_status == 0:
                subject = "üîí T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a"
                body = (
                    f"K√≠nh g·ª≠i {hoten},\n\n"
                    f"T√†i kho·∫£n c·ªßa b·∫°n (M√£ NV: {ma_nv}) ƒë√£ b·ªã kh√≥a b·ªüi qu·∫£n tr·ªã vi√™n.\n"
                    f"Vui l√≤ng li√™n h·ªá ph√≤ng nh√¢n s·ª± ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.\n\n"
                    f"Tr√¢n tr·ªçng,\nH·ªá th·ªëng FaceID"
                )
                loai_thong_bao = "Kh√≥a t√†i kho·∫£n"
            else:
                subject = "üîì T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t"
                body = (
                    f"K√≠nh g·ª≠i {hoten},\n\n"
                    f"T√†i kho·∫£n c·ªßa b·∫°n (M√£ NV: {ma_nv}) ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t tr·ªü l·∫°i.\n"
                    f"Ch√∫c b·∫°n l√†m vi·ªác hi·ªáu qu·∫£!\n\n"
                    f"Tr√¢n tr·ªçng,\nH·ªá th·ªëng FaceID"
                )
                loai_thong_bao = "M·ªü kh√≥a t√†i kho·∫£n"

            # 6Ô∏è‚É£ G·ª≠i email n·ªÅn (Thread) + ghi log LichSuEmail
            try:
                Thread(target=send_mail_background, args=(email, subject, body), daemon=True).start()
                print(f"üì§ ƒêang g·ª≠i email n·ªÅn {loai_thong_bao} ƒë·∫øn {email}...")

                cursor.execute("""
                    INSERT INTO LichSuEmail (MaTK, EmailTo, LoaiThongBao, ThoiGian, TrangThai)
                    VALUES (?, ?, ?, GETDATE(), N'ƒêang g·ª≠i (n·ªÅn)')
                """, (ma_tk, email, loai_thong_bao))
            except Exception as e:
                print(f"‚ùå L·ªói kh·ªüi t·∫°o thread g·ª≠i email: {e}")
                cursor.execute("""
                    INSERT INTO LichSuEmail (MaTK, EmailTo, LoaiThongBao, ThoiGian, TrangThai)
                    VALUES (?, ?, ?, GETDATE(), N'L·ªói kh·ªüi t·∫°o thread')
                """, (ma_tk, email, loai_thong_bao))

        # 7Ô∏è‚É£ L∆∞u t·∫•t c·∫£ thay ƒë·ªïi
        conn.commit()
        print("üíæ COMMIT HO√ÄN T·∫§T.")
        flash("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n th√†nh c√¥ng!", "success")
        return True

    except Exception as e:
        conn.rollback()
        print(f"‚ùå ROLLBACK do l·ªói: {e}")
        flash(f"L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i t√†i kho·∫£n: {e}", "danger")
        return False

    finally:
        conn.close()
        print("üîö ƒê√£ ƒë√≥ng k·∫øt n·ªëi SQL.")
        
#V√î HI·ªÜU H√ìA (X√ìA M·ªÄM)

@account_bp.route("/accounts/deactivate/<username>", methods=["POST"])
@require_role("admin")
def deactivate_account(username):
    if change_account_status(username, 0, "V√¥ hi·ªáu h√≥a"):
        flash(f"ƒê√£ v√¥ hi·ªáu h√≥a t√†i kho·∫£n: {username}", "warning")
    return redirect(url_for("account_bp.accounts"))

# CHUY·ªÇN TR·∫†NG TH√ÅI (AJAX)

@account_bp.route("/accounts/toggle_status/<username>", methods=["POST"])
@require_role("admin")
def toggle_account_status(username):
    conn = get_sql_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT TrangThai FROM TaiKhoan WHERE TenDangNhap = ?", (username,))
    result = cursor.fetchone()
    conn.close()

    if not result:
        return jsonify({"success": False, "message": "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n."})

    new_status = 0 if result[0] == 1 else 1
    change_account_status(username, new_status, "Chuy·ªÉn tr·∫°ng th√°i")

    return jsonify({
        "success": True,
        "username": username,
        "new_status": new_status,
        "status_text": "ƒêang ho·∫°t ƒë·ªông" if new_status == 1 else "Ng·ª´ng ho·∫°t ƒë·ªông"
    })

#X√ìA M·ªÄM (CHO N√öT RI√äNG)

@account_bp.route("/accounts/delete/<username>", methods=["POST"])
@require_role("admin")
def delete_account(username):
    """V√¥ hi·ªáu h√≥a (x√≥a m·ªÅm) m·ªôt t√†i kho·∫£n."""
    if change_account_status(username, 0, "X√≥a m·ªÅm"):
        flash(f"ƒê√£ v√¥ hi·ªáu h√≥a t√†i kho·∫£n {username}.", "warning")
    else:
        flash(f"L·ªói khi v√¥ hi·ªáu h√≥a t√†i kho·∫£n {username}.", "danger")
    return redirect(url_for("account_bp.accounts"))

# KH√îI PH·ª§C M·ªòT T√ÄI KHO·∫¢N

@account_bp.route("/accounts/activate/<username>", methods=["POST"])
@require_role("admin")
def activate_account(username):
    """Kh√¥i ph·ª•c (m·ªü l·∫°i) m·ªôt t√†i kho·∫£n."""
    if change_account_status(username, 1, "Kh√¥i ph·ª•c"):
        flash(f"ƒê√£ kh√¥i ph·ª•c t√†i kho·∫£n {username} th√†nh c√¥ng!", "success")
    else:
        flash("L·ªói khi kh√¥i ph·ª•c t√†i kho·∫£n!", "danger")
    return redirect(request.referrer or url_for("deleted_records", tab="accounts"))

# KH√îI PH·ª§C NHI·ªÄU T√ÄI KHO·∫¢N

@account_bp.route("/accounts/restore-multiple", methods=["POST"])
@require_role("admin")
def restore_multiple_accounts():
    """Kh√¥i ph·ª•c nhi·ªÅu t√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a."""
    selected_usernames = request.form.getlist("selected_accounts")
    print("üì¶ DANH S√ÅCH G·ª¨I L√äN:", selected_usernames)  # debug t·∫°m th·ªùi

    if not selected_usernames:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn t√†i kho·∫£n n√†o ƒë·ªÉ kh√¥i ph·ª•c!", "warning")
        return redirect(url_for("deleted_records", tab="accounts"))

    count = 0
    for uname in selected_usernames:
        if change_account_status(uname, 1, "Kh√¥i ph·ª•c nhi·ªÅu"):
            count += 1

    flash(f"√£ kh√¥i ph·ª•c {count} t√†i kho·∫£n th√†nh c√¥ng.", "success")
    return redirect(url_for("deleted_records", tab="accounts"))

# DANH S√ÅCH T√ÄI KHO·∫¢N ƒê√É V√î HI·ªÜU H√ìA

@account_bp.route("/accounts/deleted")
@require_role("admin")
def deleted_accounts_list():
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT 
                TK.TenDangNhap,
                ISNULL(NV.HoTen, N'‚Äî') AS HoTen,
                ISNULL(NV.Email, N'‚Äî') AS Email,
                TK.VaiTro,
                TK.NgayTao
            FROM TaiKhoan TK
            LEFT JOIN NhanVien NV ON TK.MaNV = NV.MaNV
            WHERE TK.TrangThai = 0
            ORDER BY TK.NgayTao DESC

        """)
        deleted_accounts = cursor.fetchall()

    except Exception as e:
        flash(f"L·ªói khi t·∫£i danh s√°ch t√†i kho·∫£n ƒë√£ v√¥ hi·ªáu h√≥a: {e}", "danger")
        deleted_accounts = []

    finally:
        conn.close()

    return render_template(
        "deleted_records.html",
        active_tab="accounts",
        deleted_accounts=deleted_accounts
    )
