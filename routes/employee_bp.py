# ============================================================
# üìÑ employee_bp.py ‚Äì Qu·∫£n l√Ω nh√¢n vi√™n
# ============================================================
from flask import Blueprint, render_template, request, session, redirect, url_for, flash
from core.db_utils import get_sql_connection
from core.decorators import require_role
from threading import Thread
from core.face_utils import async_encode_face

import os
employee_bp = Blueprint("employee_bp", __name__)

# ===========================
# H√†m encode n·ªÅn (thread)
# ===========================
def async_encode_face(ma_nv, image_path):
    from core.db_utils import get_connection
    import cv2, face_recognition, time as tm

    conn = get_connection()
    cursor = conn.cursor()
    try:
        print(f"‚öôÔ∏è [THREAD] B·∫Øt ƒë·∫ßu encode cho {ma_nv}...")
        start_encode = tm.time()

        image = face_recognition.load_image_file(image_path)
        small = cv2.resize(image, (0, 0), fx=0.25, fy=0.25)
        encodings = face_recognition.face_encodings(small)

        if not encodings:
            print(f"‚ö†Ô∏è [THREAD] Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t cho {ma_nv}.")
            return

        face_encoding = encodings[0]
        cursor.execute("""
            IF EXISTS(SELECT 1 FROM KhuonMat WHERE MaNV=? AND TrangThai=1)
                UPDATE KhuonMat SET MaHoaNhanDang=? WHERE MaNV=? AND TrangThai=1
            ELSE
                INSERT INTO KhuonMat (MaNV, MaHoaNhanDang, TrangThai)
                VALUES (?, ?, 1)
        """, (ma_nv, face_encoding.tobytes(), ma_nv, ma_nv, face_encoding.tobytes()))
        conn.commit()
        print(f"‚úÖ [THREAD] ƒê√£ encode xong cho {ma_nv} ({tm.time() - start_encode:.2f}s)")
    except Exception as e:
        print(f"‚ùå [THREAD] L·ªói encode n·ªÅn: {e}")
    finally:
        conn.close()


# ============================================================
# üë• TRANG DANH S√ÅCH NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/employees")
@require_role("admin", "hr", "quanlyphongban")
def employee_list():
    conn = get_sql_connection()
    cursor = conn.cursor()

    role = session.get("role")
    username = session.get("username")

    # ============================================================
    # 1Ô∏è‚É£ N·∫øu l√† Qu·∫£n l√Ω ph√≤ng ban ‚Üí ch·ªâ xem nh√¢n vi√™n ph√≤ng m√¨nh
    # ============================================================
    ma_pb_user = None
    if role == "quanlyphongban":
        cursor.execute("""
            SELECT nv.MaPB
            FROM NhanVien nv
            JOIN TaiKhoan tk ON nv.MaNV = tk.MaNV
            WHERE tk.TenDangNhap = ?
        """, (username,))
        row = cursor.fetchone()
        if row:
            ma_pb_user = row[0]

    # ============================================================
    # 2Ô∏è‚É£ T√¨m ki·∫øm v√† s·∫Øp x·∫øp
    # ============================================================
    keyword = request.args.get("q", "").strip()
    sort = request.args.get("sort", "ma")
    order = request.args.get("order", "asc")

    # ============================================================
    # 3Ô∏è‚É£ Truy v·∫•n danh s√°ch nh√¢n vi√™n
    # ============================================================
    query = """
        SELECT nv.MaNV, nv.HoTen, nv.Email, nv.ChucVu, nv.NgaySinh,
               pb.TenPB, km.DuongDanAnh
        FROM NhanVien nv
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat km ON nv.MaNV = km.MaNV
        WHERE nv.TrangThai = 1
    """
    params = []

    if ma_pb_user:
        query += " AND nv.MaPB = ?"
        params.append(ma_pb_user)

    if keyword:
        query += """
            AND (nv.HoTen LIKE ? OR nv.MaNV LIKE ? OR nv.ChucVu LIKE ? OR pb.TenPB LIKE ?)
        """
        params.extend([f"%{keyword}%"] * 4)

    sort_map = {
        "ma": "nv.MaNV",
        "ten": "nv.HoTen",
        "phongban": "pb.TenPB",
        "chucvu": "nv.ChucVu"
    }
    sort_col = sort_map.get(sort, "nv.MaNV")
    order_sql = "ASC" if order == "asc" else "DESC"
    query += f" ORDER BY {sort_col} {order_sql}"

    cursor.execute(query, params)
    rows = cursor.fetchall()
    columns = [col[0] for col in cursor.description]

    employees = []
    for row in rows:
        emp = dict(zip(columns, row))
        avatar = emp.get("DuongDanAnh")

        if avatar:
            duong_dan = avatar.replace("\\", "/")
            if not duong_dan.startswith("/"):
                duong_dan = "/" + duong_dan
            emp["AnhDaiDien"] = duong_dan
        else:
            emp["AnhDaiDien"] = "/photos/default.jpg"

        employees.append(emp)

    # ============================================================
    # 5Ô∏è‚É£ Th·ªëng k√™
    # ============================================================
    total_employees = total_departments = total_managers = birthday_this_month = 0
    total_employees_in_department = total_shifts_in_department = 0
    attendance_rate = 0
    total_managers_in_department = 0

    if role in ("admin", "hr"):
        cursor.execute("SELECT COUNT(*) FROM NhanVien WHERE TrangThai = 1")
        total_employees = cursor.fetchone()[0] or 0

        cursor.execute("SELECT COUNT(*) FROM PhongBan WHERE TrangThai = 1")
        total_departments = cursor.fetchone()[0] or 0

        cursor.execute("""
            SELECT COUNT(*)
            FROM NhanVien
            WHERE ChucVu LIKE N'%Tr∆∞·ªüng ph√≤ng%' AND TrangThai = 1
        """)
        total_managers = cursor.fetchone()[0] or 0

        cursor.execute("""
            SELECT COUNT(*)
            FROM NhanVien
            WHERE TrangThai = 1
              AND TRY_CONVERT(DATE, NgaySinh, 103) IS NOT NULL
              AND MONTH(TRY_CONVERT(DATE, NgaySinh, 103)) = MONTH(GETDATE())
        """)
        birthday_this_month = cursor.fetchone()[0] or 0

    elif role == "quanlyphongban" and ma_pb_user:
        cursor.execute("""
            SELECT COUNT(*) FROM NhanVien WHERE MaPB = ? AND TrangThai = 1
        """, (ma_pb_user,))
        total_employees_in_department = cursor.fetchone()[0] or 0

        cursor.execute("""
            SELECT COUNT(*) FROM NhanVien
            WHERE MaPB = ? AND TrangThai = 1 AND ChucVu LIKE N'%Tr∆∞·ªüng ph√≤ng%'
        """, (ma_pb_user,))
        total_managers_in_department = cursor.fetchone()[0] or 0

        cursor.execute("""
            SELECT COUNT(DISTINCT llv.MaCa)
            FROM LichLamViec llv
            JOIN NhanVien nv ON llv.MaNV = nv.MaNV
            WHERE nv.MaPB = ? AND llv.DaXoa = 1
        """, (ma_pb_user,))
        total_shifts_in_department = cursor.fetchone()[0] or 0

        cursor.execute("""
            SELECT COUNT(*) AS Tong, SUM(CASE WHEN cc.TrangThai = 1 THEN 1 ELSE 0 END) AS DiLam
            FROM ChamCong cc
            JOIN NhanVien nv ON cc.MaNV = nv.MaNV
            WHERE nv.MaPB = ? AND cc.DaXoa = 1
        """, (ma_pb_user,))
        row = cursor.fetchone()
        total_cc = row[0] or 1
        total_present = row[1] or 0
        attendance_rate = round(total_present / total_cc * 100, 2)

        cursor.execute("""
            SELECT COUNT(*) FROM NhanVien
            WHERE MaPB = ? AND TrangThai = 1
              AND TRY_CONVERT(DATE, NgaySinh, 103) IS NOT NULL
              AND MONTH(TRY_CONVERT(DATE, NgaySinh, 103)) = MONTH(GETDATE())
        """, (ma_pb_user,))
        birthday_this_month = cursor.fetchone()[0] or 0

    conn.close()

    if role == "hr":
        template = "hr_employees.html"
    elif role == "quanlyphongban":
        template = "qlpb_employees.html"
    else:
        template = "employees.html"

    return render_template(
        template,
        employees=employees,
        total_employees=total_employees,
        total_departments=total_departments,
        total_managers=total_managers,
        birthday_this_month=birthday_this_month,
        total_employees_in_department=total_employees_in_department,
        total_managers_in_department=total_managers_in_department,
        total_shifts_in_department=total_shifts_in_department,
        attendance_rate=attendance_rate,
        keyword=keyword,
        sort=sort,
        order=order,
        role=role,
        ma_pb_user=ma_pb_user
    )

# ============================================================
# üë§ TRANG CHI TI·∫æT NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/employees/<ma_nv>")
@require_role("admin", "hr", "quanlyphongban")
def employee_detail(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()
    role = session.get("role")
    username = session.get("username")

    # --- N·∫øu l√† qu·∫£n l√Ω ph√≤ng ban ‚Üí ch·ªâ xem nh√¢n vi√™n c√πng ph√≤ng ---
    if role == "quanlyphongban":
        cursor.execute("""
            SELECT nv.MaPB
            FROM NhanVien nv
            JOIN TaiKhoan tk ON nv.MaNV = tk.MaNV
            WHERE tk.TenDangNhap = ?
        """, (username,))
        row = cursor.fetchone()
        ma_pb_user = row[0] if row else None

        cursor.execute("SELECT MaPB FROM NhanVien WHERE MaNV = ?", (ma_nv,))
        emp_pb = cursor.fetchone()
        if not emp_pb or emp_pb[0] != ma_pb_user:
            conn.close()
            flash("‚ùå B·∫°n ch·ªâ ƒë∆∞·ª£c xem nh√¢n vi√™n thu·ªôc ph√≤ng ban c·ªßa m√¨nh!", "error")
            return redirect(url_for("employee_bp.employee_list"))

    # --- L·∫•y th√¥ng tin nh√¢n vi√™n ---
    cursor.execute("""
        SELECT 
            nv.MaNV, nv.MaHienThi, nv.HoTen, nv.Email, nv.SDT, nv.GioiTinh, nv.NgaySinh,
            nv.DiaChi, pb.TenPB AS TenPhongBan, nv.ChucVu, nv.TrangThai,
            nv.NgayVaoLam, nv.NgayTao, nv.NgayCapNhat, km.DuongDanAnh
        FROM NhanVien nv
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat km ON nv.MaNV = km.MaNV
        WHERE nv.MaNV = ?
    """, (ma_nv,))
    row = cursor.fetchone()

    if not row:
        conn.close()
        flash("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n!", "error")
        return redirect(url_for("employee_bp.employee_list"))

    columns = [col[0] for col in cursor.description]
    employee = dict(zip(columns, row))

    # --- ƒê·ªãnh d·∫°ng ng√†y th√°ng ---
    def fmt(date_value):
        if not date_value:
            return "‚Äî"
        try:
            if isinstance(date_value, str):
                return date_value[:10]
            return date_value.strftime("%d/%m/%Y")
        except Exception:
            return str(date_value)

    employee["NgaySinh"] = fmt(employee.get("NgaySinh"))
    employee["NgayVaoLam"] = fmt(employee.get("NgayVaoLam"))
    employee["NgayTao"] = fmt(employee.get("NgayTao"))
    employee["NgayCapNhat"] = fmt(employee.get("NgayCapNhat"))

    # üîπ Gi·ªõi t√≠nh
    employee["GioiTinhText"] = "Nam" if employee.get("GioiTinh") == 1 else "N·ªØ"

    # üîπ ·∫¢nh ƒë·∫°i di·ªán
    avatar = employee.get("DuongDanAnh")
    if avatar:
        duong_dan = avatar.replace("\\", "/")
        if not duong_dan.startswith("/"):
            duong_dan = "/" + duong_dan
        employee["AnhDaiDien"] = duong_dan
    else:
        employee["AnhDaiDien"] = "/photos/default.jpg"

    # üîπ Tr·∫°ng th√°i
    employee["TrangThaiText"] = "ƒêang l√†m vi·ªác" if employee.get("TrangThai") == 1 else "Ng·ª´ng l√†m vi·ªác"

    # --- Ghi log xem chi ti·∫øt ---
    try:
        cursor.execute("""
            INSERT INTO LichSuThayDoi 
                (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, (
            "NhanVien",
            ma_nv,
            "Xem chi ti·∫øt",
            "To√†n b·ªô d√≤ng",
            None,
            employee.get("HoTen"),
            username or "unknown"
        ))
        conn.commit()
    except Exception as e:
        print("‚ö†Ô∏è L·ªói ghi log xem chi ti·∫øt:", e)

    conn.close()

    # ============================================================
    # üîπ Render ƒë√∫ng template theo vai tr√≤
    # ============================================================
    if role == "hr":
        template_name = "hr_employee_detail.html"
    elif role == "quanlyphongban":
        template_name = "qlpb_employee_detail.html"
    else:
        template_name = "employee_detail.html"

    return render_template(template_name, employee=employee, role=role)

# ============================================================
# ‚ûï TH√äM NH√ÇN VI√äN M·ªöI
# ============================================================
@employee_bp.route("/employees/add", methods=["GET", "POST"])
@require_role("admin")
def add_employee_web():
    from core.db_utils import get_phongbans  # N·∫øu c√≥ t√°ch ra core ri√™ng
    import os, base64, threading
    from core.db_utils import get_sql_connection
    from core.face_utils import encode_and_save
    from routes.capture_photo_and_save import capture_photo_and_save

    departments = get_phongbans()

    if request.method == "POST":
        HoTen = request.form.get("HoTen", "").strip()
        Email = request.form.get("Email", "").strip()
        SDT = request.form.get("SDT", "").strip()
        GioiTinh = int(request.form.get("GioiTinh", 1))
        NgaySinh = request.form.get("NgaySinh")
        MaPB = request.form.get("MaPB")
        DiaChi = request.form.get("DiaChi", "").strip()
        ChucVu = request.form.get("ChucVu", "").strip()

        conn = None
        try:
            conn = get_sql_connection()
            cursor = conn.cursor()

            # 1Ô∏è‚É£ Sinh m√£ nh√¢n vi√™n m·ªõi
            cursor.execute("SELECT TOP 1 MaNV FROM NhanVien ORDER BY MaNV DESC")
            row = cursor.fetchone()
            next_num = int(''.join(filter(str.isdigit, row[0]))) + 1 if row and row[0] else 1
            MaNV = f"NV{next_num:05d}"

            # 2Ô∏è‚É£ Ki·ªÉm tra tr√πng email/SƒêT
            cursor.execute("SELECT COUNT(*) FROM NhanVien WHERE Email = ? OR SDT = ?", (Email, SDT))
            if cursor.fetchone()[0] > 0:
                flash("‚ö†Ô∏è Email ho·∫∑c SƒêT ƒë√£ t·ªìn t·∫°i!", "warning")
                conn.close()
                return redirect(url_for("employee_bp.employee_list"))

            # 3Ô∏è‚É£ Th√™m nh√¢n vi√™n
            cursor.execute("""
                INSERT INTO NhanVien 
                (MaNV, HoTen, Email, SDT, GioiTinh, NgaySinh, MaPB, DiaChi, ChucVu, TrangThai, NgayTao)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 1, GETDATE())
            """, (MaNV, HoTen, Email, SDT, GioiTinh, NgaySinh, MaPB, DiaChi, ChucVu))

            # 3Ô∏è‚É£.1Ô∏è‚É£ T·ª± ƒë·ªông t·∫°o t√†i kho·∫£n ƒëƒÉng nh·∫≠p
            from werkzeug.security import generate_password_hash
            role = "nhanvien"
            role_id = 4

            if "hr" in ChucVu.lower():
                role = "hr"
                role_id = 2
            elif "qu·∫£n l√Ω" in ChucVu.lower() or "tr∆∞·ªüng ph√≤ng" in ChucVu.lower():
                role = "quanlyphongban"
                role_id = 3

            username = MaNV
            password_hash = generate_password_hash("123456", method="scrypt")

            cursor.execute("""
                INSERT INTO TaiKhoan 
                (TenDangNhap, MatKhauHash, VaiTro, MaVT, TrangThai, NgayTao, MaNV, DaDangKyKhuonMat)
                VALUES (?, ?, ?, ?, 1, GETDATE(), ?, 0)
            """, (username, password_hash, role, role_id, MaNV))

            print(f"üîë ƒê√£ t·∫°o t√†i kho·∫£n cho {MaNV} ({role.upper()}) ‚Äî m·∫≠t kh·∫©u: 123456")

            # 4Ô∏è‚É£ L∆∞u nh·∫≠t k√Ω th√™m m·ªõi
            cursor.execute("""
                INSERT INTO LichSuThayDoi
                (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien)
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, (
                "NhanVien",
                MaNV,
                "TH√äM",
                "To√†n b·ªô d√≤ng",
                None,
                f"H·ªç t√™n={HoTen}, Email={Email}, Ch·ª©c v·ª•={ChucVu}, Ph√≤ng ban={MaPB}",
                session.get("username", "admin")
            ))

            conn.commit()
            print(f"‚úÖ ƒê√£ th√™m nh√¢n vi√™n {MaNV} ({HoTen}) th√†nh c√¥ng.")

            # 5Ô∏è‚É£ X·ª≠ l√Ω ·∫£nh khu√¥n m·∫∑t
            image_data = request.form.get("face_image")
            image_path = None

            if image_data:
                print("üñºÔ∏è Nh·∫≠n ·∫£nh base64 t·ª´ tr√¨nh duy·ªát, ƒëang l∆∞u...")
                image_data = image_data.split(",")[1]
                image_bytes = base64.b64decode(image_data)

                os.makedirs("photos", exist_ok=True)
                image_path = os.path.join("photos", f"{MaNV}.jpg")
                with open(image_path, "wb") as f:
                    f.write(image_bytes)

                encode_and_save(MaNV, image_path, conn)
                flash("‚úÖ ƒê√£ th√™m nh√¢n vi√™n v√† l∆∞u ·∫£nh khu√¥n m·∫∑t t·ª´ tr√¨nh duy·ªát!", "success")

            else:
                print("üì∏ Kh√¥ng c√≥ ·∫£nh t·ª´ tr√¨nh duy·ªát ‚Üí ch·ª•p b·∫±ng camera server...")

                def capture_and_encode():
                    img_path = capture_photo_and_save(MaNV)
                    if img_path and os.path.exists(img_path):
                        conn_inner = get_sql_connection()
                        try:
                            encode_and_save(MaNV, img_path, conn_inner)
                            print(f"‚úÖ ƒê√£ encode khu√¥n m·∫∑t cho {MaNV}")
                        except Exception as e:
                            print(f"‚ö†Ô∏è L·ªói encode: {e}")
                        finally:
                            conn_inner.close()
                    else:
                        conn_del = get_sql_connection()
                        cur = conn_del.cursor()
                        cur.execute("DELETE FROM NhanVien WHERE MaNV = ?", (MaNV,))
                        conn_del.commit()
                        conn_del.close()
                        print(f"üóëÔ∏è ƒê√£ x√≥a nh√¢n vi√™n {MaNV} do kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá.")

                threading.Thread(target=capture_and_encode, daemon=True).start()
                flash("‚úÖ Nh√¢n vi√™n ƒë√£ th√™m, h·ªá th·ªëng ƒëang ch·ª•p v√† x·ª≠ l√Ω khu√¥n m·∫∑t...", "info")

            conn.close()
            return redirect(url_for("employee_bp.employee_list"))

        except Exception as e:
            print(f"‚ùå L·ªói khi th√™m nh√¢n vi√™n: {e}")
            flash(f"‚ùå L·ªói khi th√™m nh√¢n vi√™n: {e}", "danger")
            if conn:
                try:
                    conn.rollback()
                    conn.close()
                except:
                    pass
            return redirect(url_for("employee_bp.employee_list"))

    # N·∫øu GET ‚Üí hi·ªÉn th·ªã form th√™m nh√¢n vi√™n
    return render_template("add_employee.html", departments=departments)


# ============================================================
# ‚ùå X√ìA M·ªÄM 1 NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/employees/delete/<ma_nv>")
@require_role("admin", "hr")
def delete_employee_web(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        # üîπ L·∫•y t√™n nh√¢n vi√™n
        cursor.execute("SELECT HoTen FROM NhanVien WHERE MaNV = ?", (ma_nv,))
        row = cursor.fetchone()
        old_name = row[0] if row else "(Kh√¥ng t√¨m th·∫•y)"

        # üîπ Kh√¥ng cho ph√©p x√≥a qu·∫£n l√Ω ph√≤ng ban
        cursor.execute("SELECT MaPB FROM PhongBan WHERE QuanLyPB = ?", (ma_nv,))
        if cursor.fetchone():
            flash(f"‚ö†Ô∏è Nh√¢n vi√™n {old_name} ({ma_nv}) ƒëang l√† qu·∫£n l√Ω ph√≤ng ban, kh√¥ng th·ªÉ x√≥a!", "warning")
            conn.close()
            return redirect(url_for("employee_bp.employee_list"))

        # üîπ X√≥a m·ªÅm nh√¢n vi√™n
        cursor.execute("""
            UPDATE NhanVien
            SET TrangThai = 0, NgayCapNhat = GETDATE()
            WHERE MaNV = ?
        """, (ma_nv,))

        # üîπ V√¥ hi·ªáu h√≥a t√†i kho·∫£n
        cursor.execute("UPDATE TaiKhoan SET TrangThai = 0 WHERE MaNV = ?", (ma_nv,))

        # üîπ Ghi log
        nguoi_thuc_hien = session.get("username", "H·ªá th·ªëng")
        cursor.execute("""
            INSERT INTO LichSuThayDoi (
                TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
            )
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, ("NhanVien", ma_nv, "X√≥a m·ªÅm", "TrangThai", 1, 0, nguoi_thuc_hien))

        conn.commit()
        flash(f"‚úÖ ƒê√£ ·∫©n (x√≥a m·ªÅm) nh√¢n vi√™n {old_name} ({ma_nv}).", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a m·ªÅm nh√¢n vi√™n: {e}", "danger")

    finally:
        conn.close()

    return redirect(url_for("employee_bp.employee_list"))


# ============================================================
# ‚ùå X√ìA M·ªÄM NHI·ªÄU NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/employees/delete_selected", methods=["POST"])
@require_role("admin", "hr")
def delete_selected_employees():
    selected_ids = request.form.getlist("selected_employees")
    if not selected_ids:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn nh√¢n vi√™n n√†o ƒë·ªÉ x√≥a!", "warning")
        return redirect(url_for("employee_bp.employee_list"))

    conn = get_sql_connection()
    cursor = conn.cursor()

    skipped = []  # nh√¢n vi√™n kh√¥ng th·ªÉ x√≥a (ƒëang l√† qu·∫£n l√Ω)
    deleted = []  # nh√¢n vi√™n ƒë√£ x√≥a

    try:
        nguoi_thuc_hien = session.get("username", "H·ªá th·ªëng")

        for ma_nv in selected_ids:
            # üîπ Ki·ªÉm tra n·∫øu l√† qu·∫£n l√Ω ph√≤ng ban ‚Üí b·ªè qua
            cursor.execute("SELECT MaPB FROM PhongBan WHERE QuanLyPB = ?", (ma_nv,))
            if cursor.fetchone():
                skipped.append(ma_nv)
                continue

            # üîπ L·∫•y h·ªç t√™n nh√¢n vi√™n (ƒë·ªÉ ghi log)
            cursor.execute("SELECT HoTen FROM NhanVien WHERE MaNV = ?", (ma_nv,))
            row = cursor.fetchone()
            old_name = row[0] if row else "(Kh√¥ng t√¨m th·∫•y)"

            # üîπ X√≥a m·ªÅm nh√¢n vi√™n
            cursor.execute("""
                UPDATE NhanVien
                SET TrangThai = 0, NgayCapNhat = GETDATE()
                WHERE MaNV = ?
            """, (ma_nv,))

            # üîπ V√¥ hi·ªáu h√≥a t√†i kho·∫£n
            cursor.execute("UPDATE TaiKhoan SET TrangThai = 0 WHERE MaNV = ?", (ma_nv,))

            # üîπ Ghi log
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, ("NhanVien", ma_nv, "X√≥a m·ªÅm", "TrangThai", 1, 0, nguoi_thuc_hien))

            deleted.append(f"{old_name} ({ma_nv})")

        conn.commit()

        # üîπ Hi·ªÉn th·ªã k·∫øt qu·∫£
        msg = ""
        if deleted:
            msg += f"üóë ƒê√£ x√≥a m·ªÅm {len(deleted)} nh√¢n vi√™n. "
        if skipped:
            msg += f"‚ö†Ô∏è {len(skipped)} nh√¢n vi√™n ƒëang l√† qu·∫£n l√Ω, kh√¥ng th·ªÉ x√≥a."
        flash(msg.strip(), "info" if skipped else "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a nhi·ªÅu nh√¢n vi√™n: {e}", "danger")

    finally:
        conn.close()

    return redirect(url_for("employee_bp.employee_list"))


# ============================================================
# üóÉ DANH S√ÅCH NH√ÇN VI√äN ƒê√É X√ìA
# ============================================================
@employee_bp.route("/employees/deleted")
@require_role("admin")
def employee_list_deleted():
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        # üß© L·∫•y danh s√°ch nh√¢n vi√™n ƒë√£ x√≥a (TrangThai = 0)
        cursor.execute("""
            SELECT 
                nv.MaNV, 
                nv.HoTen, 
                nv.Email, 
                nv.SDT, 
                nv.ChucVu, 
                pb.TenPB, 
                ql.HoTen AS TenQuanLy,
                nv.NgayCapNhat,
                k.DuongDanAnh
            FROM NhanVien nv
            LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
            LEFT JOIN NhanVien ql ON pb.QuanLyPB = ql.MaNV
            LEFT JOIN KhuonMat k ON nv.MaNV = k.MaNV
            WHERE nv.TrangThai = 0
            ORDER BY nv.NgayCapNhat DESC
        """)
        deleted_employees = cursor.fetchall()

        # üè¢ L·∫•y danh s√°ch ph√≤ng ban ƒë√£ x√≥a (TrangThai = 0)
        cursor.execute("""
            SELECT 
                pb.MaPB, 
                pb.TenPB, 
                ql.HoTen AS TenQuanLy, 
                pb.NgayTao
            FROM PhongBan pb
            LEFT JOIN NhanVien ql ON pb.QuanLyPB = ql.MaNV
            WHERE pb.TrangThai = 0
            ORDER BY pb.NgayTao DESC
        """)
        deleted_departments = cursor.fetchall()

    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i danh s√°ch ƒë√£ x√≥a: {str(e)}", "danger")
        deleted_employees, deleted_departments = [], []

    finally:
        conn.close()

    return render_template(
        "deleted_records.html",
        deleted_employees=deleted_employees,
        deleted_departments=deleted_departments,
        active_tab="employees"
    )

# ============================================================
# ‚ôªÔ∏è KH√îI PH·ª§C NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/employees/restore/<ma_nv>")
@require_role("admin")
def restore_employee(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        # üîπ Kh√¥i ph·ª•c tr·∫°ng th√°i nh√¢n vi√™n
        cursor.execute("""
            UPDATE NhanVien
            SET TrangThai = 1, NgayCapNhat = GETDATE()
            WHERE MaNV = ?
        """, (ma_nv,))
        cursor.execute("UPDATE TaiKhoan SET TrangThai = 1 WHERE MaNV = ?", (ma_nv,))

        # üîπ Ghi l·ªãch s·ª≠
        cursor.execute("""
            INSERT INTO LichSuThayDoi (
                TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
            )
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, ("NhanVien", ma_nv, "Kh√¥i ph·ª•c", "TrangThai", 0, 1, session.get("username", "H·ªá th·ªëng")))

        conn.commit()
        flash(f"‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c nh√¢n vi√™n {ma_nv} th√†nh c√¥ng.", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c nh√¢n vi√™n: {e}", "danger")

    finally:
        conn.close()

    # üîπ Tr·∫£ v·ªÅ danh s√°ch nh√¢n vi√™n ƒë√£ x√≥a
    return redirect(url_for("employee_bp.employee_list_deleted"))


# ============================================================
# ‚ôªÔ∏è KH√îI PH·ª§C NHI·ªÄU NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/employees/restore_selected", methods=["POST"])
@require_role("admin")
def restore_selected_employees():
    selected_ids = request.form.getlist("selected_employees")
    if not selected_ids:
        flash("‚ö†Ô∏è Ch∆∞a ch·ªçn nh√¢n vi√™n n√†o ƒë·ªÉ kh√¥i ph·ª•c!", "warning")
        return redirect(url_for("employee_bp.employee_list_deleted"))

    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        for ma_nv in selected_ids:
            # üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i
            cursor.execute("""
                UPDATE NhanVien
                SET TrangThai = 1, NgayCapNhat = GETDATE()
                WHERE MaNV = ?
            """, (ma_nv,))
            cursor.execute("UPDATE TaiKhoan SET TrangThai = 1 WHERE MaNV = ?", (ma_nv,))

            # üîπ Ghi l·ªãch s·ª≠ kh√¥i ph·ª•c
            cursor.execute("""
                INSERT INTO LichSuThayDoi (
                    TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                    GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
                )
                VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
            """, ("NhanVien", ma_nv, "Kh√¥i ph·ª•c", "TrangThai", 0, 1, session.get("username", "H·ªá th·ªëng")))

        conn.commit()
        flash(f"‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c {len(selected_ids)} nh√¢n vi√™n th√†nh c√¥ng.", "success")

    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi kh√¥i ph·ª•c nhi·ªÅu nh√¢n vi√™n: {e}", "danger")

    finally:
        conn.close()

    return redirect(url_for("employee_bp.employee_list_deleted"))

# ============================================================
# ‚úèÔ∏è CH·ªàNH S·ª¨A NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/employees/edit/<ma_nv>", methods=["GET", "POST"], endpoint="edit_employee_web")
@require_role("admin", "hr", "quanlyphongban")
def edit_employee_web(ma_nv):
    import os
    conn = get_sql_connection()
    cursor = conn.cursor()

    role = session.get("role")
    username = session.get("username")

    # üîπ N·∫øu l√† qu·∫£n l√Ω ph√≤ng ban ‚Üí ki·ªÉm tra nh√¢n vi√™n c√≥ thu·ªôc ph√≤ng ban m√¨nh kh√¥ng
    if role == "quanlyphongban":
        cursor.execute("""
            SELECT nv.MaPB
            FROM NhanVien nv
            JOIN TaiKhoan tk ON nv.MaNV = tk.MaNV
            WHERE tk.TenDangNhap = ?
        """, (username,))
        row = cursor.fetchone()
        ma_pb_user = row[0] if row else None

        cursor.execute("SELECT MaPB FROM NhanVien WHERE MaNV = ?", (ma_nv,))
        emp_pb = cursor.fetchone()
        if not emp_pb or emp_pb[0] != ma_pb_user:
            conn.close()
            flash("‚ùå B·∫°n ch·ªâ ƒë∆∞·ª£c ch·ªânh s·ª≠a nh√¢n vi√™n thu·ªôc ph√≤ng ban c·ªßa m√¨nh!", "error")
            return redirect(url_for("employee_bp.employee_list"))

    # --- L·∫•y th√¥ng tin nh√¢n vi√™n ---
    cursor.execute("""
        SELECT nv.MaNV, nv.MaHienThi, nv.HoTen, nv.Email, nv.SDT, nv.GioiTinh, nv.NgaySinh, nv.DiaChi,
               nv.MaPB, nv.ChucVu, nv.TrangThai, pb.TenPB, km.DuongDanAnh
        FROM NhanVien nv
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat km ON nv.MaNV = km.MaNV
        WHERE nv.MaNV = ?
    """, (ma_nv,))
    row = cursor.fetchone()

    if not row:
        conn.close()
        flash(f"‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n {ma_nv}", "error")
        return redirect(url_for("employee_bp.employee_list"))

    columns = [col[0] for col in cursor.description]
    employee = dict(zip(columns, row))

    # --- ·∫¢nh ƒë·∫°i di·ªán ---
    avatar = employee.get("DuongDanAnh")
    if avatar and avatar.strip():
        avatar = avatar.replace("\\", "/")
        if not avatar.startswith("/"):
            avatar = f"/{avatar}"
        employee["AnhDaiDien"] = avatar
    else:
        employee["AnhDaiDien"] = "/photos/default.jpg"

    # --- Danh s√°ch ph√≤ng ban ---
    cursor.execute("SELECT MaPB, TenPB FROM PhongBan")
    departments = [dict(zip([c[0] for c in cursor.description], r)) for r in cursor.fetchall()]
    conn.close()

    # --- N·∫øu ng∆∞·ªùi d√πng c·∫≠p nh·∫≠t ---
    if request.method == "POST":
        hoten = request.form.get("HoTen", "").strip()
        email = request.form.get("Email", "").strip()
        sdt = request.form.get("SDT", "").strip()
        ngaysinh = request.form.get("NgaySinh", "").strip() or None
        diachi = request.form.get("DiaChi", "").strip()
        ma_pb_moi = request.form.get("MaPB", "").strip()
        chucvu = request.form.get("ChucVu", "").strip()

        gioitinh = 1 if request.form.get("GioiTinh", "").lower() in ["1", "nam", "true"] else 0
        trangthai = 1 if request.form.get("TrangThai", "").lower() in ["1", "ho·∫°t ƒë·ªông", "active", "true"] else 0

        file = request.files.get("avatar")
        nguoi_thuc_hien = session.get("username", "H·ªá th·ªëng")

        conn = get_sql_connection()
        cursor = conn.cursor()

        # üîπ L·∫•y ph√≤ng ban v√† m√£ hi·ªÉn th·ªã hi·ªán t·∫°i
        cursor.execute("SELECT MaPB, MaHienThi FROM NhanVien WHERE MaNV=?", (ma_nv,))
        row = cursor.fetchone()
        old_pb = row[0] if row else None
        old_ma_hienthi = row[1] if row else None

        # üü¶ N·∫øu ƒë·ªïi ph√≤ng ban ‚Üí sinh MaHienThi m·ªõi
        if ma_pb_moi != old_pb:
            cursor.execute("SELECT MaHienThi FROM PhongBan WHERE MaPB=?", (ma_pb_moi,))
            row = cursor.fetchone()
            pb_short = row[0].strip().upper() if row and row[0] else ma_pb_moi[-2:].upper()
            if len(pb_short) < 1:
                pb_short = "XX"

            cursor.execute("""
                SELECT TOP 1 MaHienThi FROM NhanVien 
                WHERE MaPB=? AND MaHienThi LIKE ?
                ORDER BY MaHienThi DESC
            """, (ma_pb_moi, f"NV{pb_short}%"))
            row = cursor.fetchone()
            if row and row[0]:
                num_part = ''.join([c for c in row[0] if c.isdigit()])
                next_num = int(num_part) + 1 if num_part else 1
            else:
                next_num = 1
            new_ma_hienthi = f"NV{pb_short}{next_num}"

            # üîπ C·∫≠p nh·∫≠t nh√¢n vi√™n
            cursor.execute("""
                UPDATE NhanVien
                SET HoTen=?, Email=?, SDT=?, GioiTinh=?, NgaySinh=?, DiaChi=?, 
                    MaPB=?, ChucVu=?, TrangThai=?, NgayCapNhat=GETDATE()
                WHERE MaNV=?
            """, (hoten, email, sdt, gioitinh, ngaysinh, diachi,
                  ma_pb_moi, chucvu, trangthai, ma_nv))

            # üîπ Ghi log
            cursor.execute("""
                INSERT INTO LichSuThayDoi 
                (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, NguoiThucHien)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, ("NhanVien", ma_nv, "S·ª≠a", "MaPB", old_pb, ma_pb_moi, nguoi_thuc_hien))
            cursor.execute("""
                INSERT INTO LichSuThayDoi 
                (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi, NguoiThucHien)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, ("NhanVien", ma_nv, "S·ª≠a", "MaHienThi", old_ma_hienthi, new_ma_hienthi, nguoi_thuc_hien))
        else:
            # üîπ Kh√¥ng ƒë·ªïi ph√≤ng ban
            cursor.execute("""
                UPDATE NhanVien
                SET HoTen=?, Email=?, SDT=?, GioiTinh=?, NgaySinh=?, DiaChi=?, 
                    MaPB=?, ChucVu=?, TrangThai=?
                WHERE MaNV=?
            """, (hoten, email, sdt, gioitinh, ngaysinh, diachi,
                  ma_pb_moi, chucvu, trangthai, ma_nv))
            new_ma_hienthi = old_ma_hienthi

        # --- ·∫¢nh ƒë·∫°i di·ªán ---
        if file and file.filename != "":
            os.makedirs("photos", exist_ok=True)
            filename = f"{new_ma_hienthi}.jpg"
            save_path = os.path.join("photos", filename)
            file.save(save_path)
            db_path = f"photos/{filename}"

            cursor.execute("SELECT COUNT(*) FROM KhuonMat WHERE MaNV=?", (ma_nv,))
            exists = cursor.fetchone()[0]
            if exists:
                cursor.execute("UPDATE KhuonMat SET DuongDanAnh=? WHERE MaNV=?", (db_path, ma_nv))
            else:
                cursor.execute("""
                    INSERT INTO KhuonMat (MaNV, DuongDanAnh, TrangThai) 
                    VALUES (?, ?, 1)
                """, (ma_nv, db_path))

            # üîπ Ghi log ·∫£nh
            cursor.execute("""
                INSERT INTO LichSuThayDoi
                (TenBang, MaBanGhi, HanhDong, TruongThayDoi, GiaTriMoi, NguoiThucHien)
                VALUES (?, ?, ?, ?, ?, ?)
            """, ("KhuonMat", ma_nv, "C·∫≠p nh·∫≠t", "DuongDanAnh", db_path, nguoi_thuc_hien))

        conn.commit()
        conn.close()

        flash("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n th√†nh c√¥ng!", "success")
        return redirect(url_for("employee_bp.employee_detail", ma_nv=ma_nv))

    return render_template("edit_employee.html", employee=employee, departments=departments)

# ============================================================
# üßæ L·ªäCH L√ÄM VI·ªÜC C·ª¶A NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/my_schedule")
@require_role("nhanvien")
def my_schedule():
    username = session.get("username")
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT nv.MaNV, nv.HoTen, pb.TenPB, clv.TenCa, llv.NgayLam, 
                   clv.GioBatDau, clv.GioKetThuc
            FROM LichLamViec llv
            JOIN NhanVien nv ON llv.MaNV = nv.MaNV
            LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
            LEFT JOIN CaLamViec clv ON llv.MaCa = clv.MaCa
            JOIN TaiKhoan tk ON tk.MaNV = nv.MaNV
            WHERE tk.TenDangNhap = ? AND llv.DaXoa = 1
            ORDER BY llv.NgayLam DESC
        """, (username,))
        rows = cursor.fetchall()

    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i l·ªãch l√†m vi·ªác: {e}", "danger")
        rows = []
    finally:
        conn.close()

    # ‚úÖ ƒê·ªãnh d·∫°ng th·ªùi gian
    def fmt_time(t):
        if not t:
            return ""
        if hasattr(t, "strftime"):
            return t.strftime("%H:%M")
        return str(t)[:5]

    schedules = []
    for r in rows:
        ma_nv, hoten, tenpb, tenca, ngaylam, giobd, giokt = r
        schedules.append({
            "MaNV": ma_nv,
            "HoTen": hoten,
            "TenPB": tenpb,
            "TenCa": tenca,
            "NgayLam": ngaylam,
            "GioBatDau": fmt_time(giobd),
            "GioKetThuc": fmt_time(giokt)
        })

    return render_template("my_schedule.html", schedules=schedules)

# ============================================================
# üè† TRANG CH√çNH C·ª¶A NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/employee/dashboard")
@require_role("nhanvien")
def employee_dashboard():
    if "manv" not in session:
        return redirect(url_for("login"))

    ma_nv = session["manv"]
    ho_ten_session = session.get("hoten", "")

    conn = get_sql_connection()
    cursor = conn.cursor()

    # 1Ô∏è‚É£ Th√¥ng tin nh√¢n vi√™n
    cursor.execute("""
        SELECT nv.MaNV, nv.HoTen, nv.Email, nv.NgaySinh, nv.ChucVu, nv.DiaChi, 
               pb.TenPB AS PhongBan, nv.LuongGioCoBan, k.DuongDanAnh
        FROM NhanVien nv
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat k ON nv.MaNV = k.MaNV
        WHERE nv.MaNV = ?
    """, (ma_nv,))
    row = cursor.fetchone()
    nhanvien = dict(zip([col[0] for col in cursor.description], row)) if row else {}

    # 2Ô∏è‚É£ Ca l√†m vi·ªác h√¥m nay
    cursor.execute("""
        SELECT clv.TenCa, clv.GioBatDau, clv.GioKetThuc
        FROM LichLamViec llv
        JOIN CaLamViec clv ON llv.MaCa = clv.MaCa
        WHERE llv.MaNV = ?
          AND CAST(llv.NgayLam AS DATE) = CAST(GETDATE() AS DATE)
          AND llv.DaXoa = 1
    """, (ma_nv,))
    ca_rows = cursor.fetchall()

    def fmt_time(t):
        if not t:
            return ""
        if hasattr(t, "strftime"):
            return t.strftime("%H:%M")
        return str(t)[:5]

    ca_hom_nay = ", ".join(
        [f"{r[0]} ({fmt_time(r[1])} - {fmt_time(r[2])})" for r in ca_rows]
    ) if ca_rows else "Kh√¥ng c√≥ ca h√¥m nay"

    # 3Ô∏è‚É£ L·ªãch s·ª≠ ch·∫•m c√¥ng
    cursor.execute("""
        SELECT MaChamCong, NgayChamCong, GioVao, GioRa, TrangThai
        FROM ChamCong
        WHERE MaNV = ?
        ORDER BY NgayChamCong DESC
    """, (ma_nv,))
    chamcong = [dict(zip([col[0] for col in cursor.description], r)) for r in cursor.fetchall()]

    # 4Ô∏è‚É£ L·ªãch s·ª≠ ho·∫°t ƒë·ªông
    cursor.execute("""
        SELECT ThoiGian, TenBang, HanhDong, TruongThayDoi, GiaTriCu, GiaTriMoi
        FROM LichSuThayDoi
        WHERE NguoiThucHien = ?
        ORDER BY ThoiGian DESC
    """, (ho_ten_session,))
    lichsu = [dict(zip([col[0] for col in cursor.description], r)) for r in cursor.fetchall()]

    conn.close()

    return render_template(
        "employee_dashboard.html",
        nhanvien=nhanvien,
        chamcong=chamcong,
        lichsu=lichsu,
        ho_ten=nhanvien.get("HoTen", "(Kh√¥ng r√µ)"),
        phongban=nhanvien.get("PhongBan", "(Ch∆∞a c√≥)"),
        ca_hom_nay=ca_hom_nay,
        anh_nv=nhanvien.get("DuongDanAnh", "")
    )


# ============================================================
# üßç‚Äç‚ôÇÔ∏è TRANG TH√îNG TIN NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/employee/profile")
@require_role("nhanvien")
def employee_profile():
    ma_nv = session.get("manv")

    if not ma_nv:
        flash("‚ö†Ô∏è Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", "warning")
        return redirect(url_for("login"))

    conn = get_sql_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT 
            nv.MaNV, nv.HoTen, nv.Email, nv.SDT, nv.GioiTinh, nv.NgaySinh, nv.DiaChi, 
            nv.ChucVu, pb.TenPB, km.DuongDanAnh
        FROM NhanVien nv
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat km ON nv.MaNV = km.MaNV
        WHERE nv.MaNV = ?
    """, (ma_nv,))
    emp = cursor.fetchone()

    if not emp:
        conn.close()
        flash("Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n!", "danger")
        return redirect(url_for("login"))

    fields = [col[0] for col in cursor.description]
    employee = dict(zip(fields, emp))
    conn.close()

    # ·∫¢nh ƒë·∫°i di·ªán
    avatar = employee.get("DuongDanAnh")
    if avatar and avatar.strip():
        avatar = avatar.replace("\\", "/")
        if not avatar.startswith("/"):
            avatar = f"/{avatar}"
        employee["AnhDaiDien"] = avatar
    else:
        employee["AnhDaiDien"] = "/photos/default.jpg"

    # Gi·ªõi t√≠nh
    gt = employee.get("GioiTinh")
    if gt is None:
        employee["GioiTinhText"] = "Ch∆∞a c·∫≠p nh·∫≠t"
    elif gt == 1:
        employee["GioiTinhText"] = "Nam"
    else:
        employee["GioiTinhText"] = "N·ªØ"

    return render_template("employee_profile.html", employee=employee)


# ============================================================
# ‚úèÔ∏è CH·ªàNH S·ª¨A H·ªí S∆† C√Å NH√ÇN
# ============================================================
@employee_bp.route("/profile/edit", methods=["GET", "POST"])
@require_role("nhanvien")
def edit_profile():
    username = session.get("username")

    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- L·∫•y th√¥ng tin nh√¢n vi√™n ---
    cursor.execute("""
        SELECT 
            nv.MaNV, nv.HoTen, nv.Email, nv.SDT, nv.GioiTinh, nv.NgaySinh, nv.DiaChi,
            pb.TenPB, nv.ChucVu, km.DuongDanAnh
        FROM TaiKhoan tk
        JOIN NhanVien nv ON tk.MaNV = nv.MaNV
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat km ON nv.MaNV = km.MaNV
        WHERE tk.TenDangNhap = ?
    """, (username,))
    emp = cursor.fetchone()

    if not emp:
        conn.close()
        flash("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n!", "danger")
        return redirect(url_for("employee_dashboard"))

    columns = [col[0] for col in cursor.description]
    employee = dict(zip(columns, emp))

    # ·∫¢nh ƒë·∫°i di·ªán
    avatar = employee.get("DuongDanAnh")
    if avatar and avatar.strip():
        avatar = avatar.replace("\\", "/")
        if not avatar.startswith("/"):
            avatar = f"/{avatar}"
        employee["AnhDaiDien"] = avatar
    else:
        employee["AnhDaiDien"] = "/photos/default.jpg"

    # Gi·ªõi t√≠nh hi·ªÉn th·ªã
    gt = employee.get("GioiTinh")
    employee["GioiTinhText"] = "Nam" if gt == 1 else "N·ªØ" if gt == 0 else "Ch∆∞a c·∫≠p nh·∫≠t"

    # --- N·∫øu nh√¢n vi√™n g·ª≠i form c·∫≠p nh·∫≠t ---
    if request.method == "POST":
        hoten = request.form.get("HoTen", "").strip()
        email = request.form.get("Email", "").strip()
        sdt = request.form.get("SDT", "").strip()
        diachi = request.form.get("DiaChi", "").strip()
        ngaysinh = request.form.get("NgaySinh", "").strip() or None
        gioitinh_raw = request.form.get("GioiTinh", "").lower().strip()
        gioitinh = 1 if gioitinh_raw in ["1", "nam", "male", "true"] else 0
        file = request.files.get("avatar")

        try:
            cursor.execute("DISABLE TRIGGER trg_Check_QuanLyPhongBan ON PhongBan")

            # ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin h·ªì s∆°
            cursor.execute("""
                EXEC sp_UpdateEmployeeProfile ?, ?, ?, ?, ?, ?, ?
            """, (
                employee["MaNV"], hoten, email, sdt, gioitinh, ngaysinh, diachi
            ))

            cursor.execute("ENABLE TRIGGER trg_Check_QuanLyPhongBan ON PhongBan")

            # ‚úÖ C·∫≠p nh·∫≠t ·∫£nh
            if file and file.filename:
                os.makedirs("photos", exist_ok=True)
                filename = f"{employee['MaNV']}.jpg"
                save_path = os.path.join("photos", filename)
                file.save(save_path)
                db_path = f"photos/{filename}"

                cursor.execute("""
                    MERGE KhuonMat AS target
                    USING (SELECT ? AS MaNV, ? AS DuongDanAnh) AS src
                    ON target.MaNV = src.MaNV
                    WHEN MATCHED THEN UPDATE SET target.DuongDanAnh = src.DuongDanAnh, target.TrangThai = 1
                    WHEN NOT MATCHED THEN INSERT (MaNV, DuongDanAnh, TrangThai) VALUES (src.MaNV, src.DuongDanAnh, 1);
                """, (employee["MaNV"], db_path))

            conn.commit()
            flash("‚úÖ C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!", "success")
            return redirect(url_for("employee_bp.employee_profile"))

        except Exception as e:
            conn.rollback()
            flash(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t h·ªì s∆°: {e}", "danger")

        finally:
            conn.close()

    conn.close()
    return render_template("edit_profile.html", employee=employee)

# ============================================================
# üì∏ TRANG KHU√îN M·∫∂T C·ª¶A NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/my_face")
@require_role("nhanvien")
def my_face():
    username = session.get("username")

    conn = get_sql_connection()
    cursor = conn.cursor()

    # üß© L·∫•y th√¥ng tin nh√¢n vi√™n + ·∫£nh ƒë·∫°i di·ªán (1 d√≤ng)
    cursor.execute("""
        SELECT nv.HoTen, km.DuongDanAnh
        FROM NhanVien nv
        JOIN TaiKhoan tk ON tk.MaNV = nv.MaNV
        LEFT JOIN KhuonMat km ON nv.MaNV = km.MaNV AND km.TrangThai = 1
        WHERE tk.TenDangNhap = ?
    """, (username,))
    emp = cursor.fetchone()
    ho_ten, duongdananh = emp if emp else ("Kh√¥ng r√µ", None)

    # ‚úÖ Chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n ·∫£nh
    if duongdananh and duongdananh.strip():
        duongdananh = duongdananh.replace("\\", "/")
        if not duongdananh.startswith("/"):
            duongdananh = f"/{duongdananh}"
    else:
        duongdananh = "/photos/default.jpg"

    # üß© L·∫•y danh s√°ch khu√¥n m·∫∑t (n·∫øu nh√¢n vi√™n c√≥ nhi·ªÅu b·∫£n ghi)
    cursor.execute("""
        SELECT nv.MaNV, nv.HoTen, pb.TenPB, k.FaceID, k.DuongDanAnh, 
               k.NgayDangKy, k.TrangThai
        FROM KhuonMat k
        JOIN NhanVien nv ON k.MaNV = nv.MaNV
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        JOIN TaiKhoan tk ON tk.MaNV = nv.MaNV
        WHERE tk.TenDangNhap = ?
    """, (username,))
    face_data = cursor.fetchall()
    conn.close()

    return render_template(
        "my_face.html",
        face_data=face_data,
        ho_ten=ho_ten,
        anh_nv=duongdananh
    )
# ============================================================
# üóìÔ∏è TRANG L·ªäCH L√ÄM VI·ªÜC C·ª¶A NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/my_schedule")
@require_role("nhanvien")
def employee_shifts():
    if "manv" not in session:
        return redirect(url_for("login"))

    ma_nv = session["manv"]
    username = session.get("username")

    conn = get_sql_connection()
    cursor = conn.cursor()

    # üß© L·∫•y th√¥ng tin nh√¢n vi√™n + ph√≤ng ban + ·∫£nh khu√¥n m·∫∑t
    cursor.execute("""
        SELECT 
            nv.MaNV, 
            nv.HoTen, 
            nv.ChucVu, 
            pb.TenPB,
            k.DuongDanAnh
        FROM NhanVien nv
        JOIN TaiKhoan tk ON nv.MaNV = tk.MaNV
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat k ON nv.MaNV = k.MaNV AND k.TrangThai = 1
        WHERE tk.TenDangNhap = ?
    """, (username,))
    emp = cursor.fetchone()

    if not emp:
        conn.close()
        flash("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n!", "danger")
        return redirect(url_for("employee_bp.employee_dashboard"))

    ma_nv, ho_ten, chuc_vu, ten_pb, duongdananh = emp

    # ‚úÖ Chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n ·∫£nh (·∫£nh n·∫±m ngo√†i static)
    import os
    if duongdananh and duongdananh.strip():
        duongdananh = duongdananh.replace("\\", "/")
        file_name = os.path.basename(duongdananh)
        duongdananh = f"/photos/{file_name}"
    else:
        duongdananh = "/photos/default.jpg"

    # üß© L·∫•y danh s√°ch l·ªãch l√†m vi·ªác c·ªßa nh√¢n vi√™n
    cursor.execute("""
        SELECT 
            llv.NgayLam,
            clv.TenCa,
            clv.GioBatDau,
            clv.GioKetThuc,
            pb.TenPB,
            llv.TrangThai
        FROM LichLamViec llv
        JOIN CaLamViec clv ON llv.MaCa = clv.MaCa
        JOIN NhanVien nv ON llv.MaNV = nv.MaNV
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        WHERE llv.MaNV = ? AND llv.DaXoa = 1
        ORDER BY llv.NgayLam DESC
    """, (ma_nv,))
    rows = cursor.fetchall()
    conn.close()

    # üß© Chuy·ªÉn d·ªØ li·ªáu th√†nh danh s√°ch dict ƒë·ªÉ d·ªÖ hi·ªÉn th·ªã
    schedules = []
    for row in rows:
        ngaylam, tenca, giobd, giokt, phongban, trangthai = row

        # Chuy·ªÉn gi·ªù d·∫°ng string ho·∫∑c datetime th√†nh text
        try:
            thoi_gian = f"{str(giobd)[:5]} - {str(giokt)[:5]}" if giobd and giokt else "‚Äî"
        except Exception:
            thoi_gian = "‚Äî"

        # Chuy·ªÉn tr·∫°ng th√°i s·ªë sang ch·ªØ + CSS class
        if trangthai == 1:
            tt_text = "ƒê√£ ho√†n th√†nh"
            tt_class = "status-done"
        elif trangthai == 2:
            tt_text = "V·∫Øng"
            tt_class = "status-absent"
        elif trangthai == 0:
            tt_text = "Ch∆∞a ch·∫•m c√¥ng"
            tt_class = "status-pending"
        else:
            tt_text = "ƒê√£ l√™n l·ªãch"
            tt_class = "status-upcoming"

        schedules.append({
            "NgayLam": ngaylam.strftime("%Y-%m-%d") if ngaylam else "",
            "TenCa": tenca or "‚Äî",
            "ThoiGian": thoi_gian,
            "PhongBan": phongban or ten_pb or "Ch∆∞a c√≥",
            "TrangThai": tt_text,
            "TrangThaiClass": tt_class
        })

    # üß© Render ra giao di·ªán
    return render_template(
        "employee_shifts.html",
        schedules=schedules,
        ho_ten=ho_ten,
        anh_nv=duongdananh
    )

# ============================================================
# üïì TRANG XEM L·ªäCH S·ª¨ CH·∫§M C√îNG C·ª¶A NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/employee/attendance")
@require_role("nhanvien")
def employee_attendance():
    if "manv" not in session:
        return redirect(url_for("login"))

    ma_nv = session["manv"]
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT NgayChamCong, GioVao, GioRa, TrangThai
            FROM ChamCong
            WHERE MaNV = ?
            ORDER BY NgayChamCong DESC
        """, (ma_nv,))
        chamcong = [dict(zip([col[0] for col in cursor.description], r)) for r in cursor.fetchall()]
    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i l·ªãch s·ª≠ ch·∫•m c√¥ng: {e}", "danger")
        chamcong = []
    finally:
        conn.close()

    return render_template("employee_attendance.html", chamcong=chamcong)


# ============================================================
# üí∞ TRANG XEM L∆Ø∆†NG C·ª¶A NH√ÇN VI√äN
# ============================================================
@employee_bp.route("/my_salary")
@require_role("nhanvien")
def my_salary():
    from datetime import datetime
    from core.salary_utils import tinh_luong_nv  # ƒë·∫£m b·∫£o b·∫°n ƒë√£ t√°ch h√†m n√†y ra module ri√™ng

    username = session.get("username")
    conn = get_sql_connection()
    cursor = conn.cursor()
    now = datetime.now()
    thangnam = datetime(now.year, now.month, 1)

    # üß© L·∫•y th√¥ng tin nh√¢n vi√™n + ·∫£nh khu√¥n m·∫∑t
    cursor.execute("""
        SELECT 
            nv.MaNV, 
            nv.HoTen, 
            nv.ChucVu, 
            pb.TenPB,
            k.DuongDanAnh
        FROM NhanVien nv
        JOIN TaiKhoan tk ON nv.MaNV = tk.MaNV
        LEFT JOIN PhongBan pb ON nv.MaPB = pb.MaPB
        LEFT JOIN KhuonMat k ON nv.MaNV = k.MaNV AND k.TrangThai = 1
        WHERE tk.TenDangNhap = ?
    """, (username,))
    emp = cursor.fetchone()

    if not emp:
        conn.close()
        flash("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n!", "danger")
        return redirect(url_for("employee_bp.employee_dashboard"))

    ma_nv, ho_ten, chuc_vu, ten_pb, anh_nv = emp

    # ‚úÖ Chu·∫©n h√≥a ·∫£nh
    if anh_nv and anh_nv.strip():
        anh_nv = anh_nv.replace("\\", "/")
        if not anh_nv.startswith("/"):
            anh_nv = f"/{anh_nv}"
    else:
        anh_nv = "/photos/default.jpg"

    # üß© G·ªçi h√†m t√≠nh l∆∞∆°ng chi ti·∫øt (ch·ªâ xem, kh√¥ng l∆∞u DB)
    try:
        tong_gio, tong_tien, records = tinh_luong_nv(
            cursor, ma_nv, thangnam, "Xem l∆∞∆°ng c√° nh√¢n",
            save_to_db=False, return_detail=True
        )
    except Exception as e:
        flash(f"‚ùå L·ªói khi t√≠nh l∆∞∆°ng: {e}", "danger")
        tong_gio, tong_tien, records = 0, 0, []

    conn.close()

    # üîπ Chu·∫©n h√≥a d·ªØ li·ªáu chi ti·∫øt l∆∞∆°ng
    salary_details = []
    for r in records:
        salary_details.append({
            "NgayLam": r.get("NgayChamCong"),
            "TenCa": r.get("Ca"),
            "GioBatDau": r.get("GioBatDau"),
            "GioKetThuc": r.get("GioKetThuc"),
            "GioVao": r.get("GioVao"),
            "GioRa": r.get("GioRa"),
            "SoGio": r.get("SoGio"),
            "HeSo": r.get("HeSo"),
            "ThanhTien": r.get("Tien"),
            "LyDo": r.get("LyDoTru"),
        })

    # üß© G√°n bi·ªÉu t∆∞·ª£ng ch·ª©c v·ª•
    chucvu_lower = (chuc_vu or "").lower()
    if "tr∆∞·ªüng ph√≤ng" in chucvu_lower:
        role_label, role_icon = "Tr∆∞·ªüng ph√≤ng", "fa-star text-warning"
    elif "ph√≥ ph√≤ng" in chucvu_lower:
        role_label, role_icon = "Ph√≥ ph√≤ng", "fa-crown text-info"
    elif "th·ª±c t·∫≠p" in chucvu_lower or "intern" in chucvu_lower:
        role_label, role_icon = "Th·ª±c t·∫≠p sinh", "fa-user-graduate text-secondary"
    else:
        role_label, role_icon = "Nh√¢n vi√™n", "fa-user text-primary"

    # ‚úÖ Render giao di·ªán
    return render_template(
        "my_salary.html",
        emp=emp,
        salary_details=salary_details,
        tong_gio=tong_gio,
        tong_tien=tong_tien,
        role_label=role_label,
        role_icon=role_icon,
        current_month=now.month,
        current_year=now.year,
        ho_ten=ho_ten,
        anh_nv=anh_nv,
        now=now
    )
