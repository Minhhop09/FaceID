from flask import Blueprint, render_template, jsonify, session, request, redirect, url_for, flash
from datetime import datetime, date
from core.db_utils import get_sql_connection
from core.salary_utils import tinh_luong_nv, get_tham_so_luong
from core.decorators import require_role
import uuid
from decimal import Decimal
from core.payment_utils import calc_fee, normalize_account, fake_gateway_charge, generate_txid
from core.email_utils import send_email_notification, send_email_with_attachment
from core.log_utils import ghi_lich_su, log_change, log_payment
import csv
from io import BytesIO, StringIO
import os
from flask import send_file, current_app
import core.payment_utils as payment_utils




salary_bp = Blueprint("salary_bp", __name__)

# ============================================================
# üí∞ TRANG XEM L∆Ø∆†NG (Admin + HR)
# ============================================================
from core.log_utils import ghi_lich_su  # ‚úÖ import h√†m log ti·ªán √≠ch
@salary_bp.route("/salary")
@require_role("admin", "hr")
def salary_view():
    conn = get_sql_connection()
    conn.rollback()  # ‚úÖ Reset transaction l·ªói c≈©
    cursor = conn.cursor()

    # üë§ Th√¥ng tin ng∆∞·ªùi d√πng
    role = session.get("role", "admin")
    username = session.get("username", "H·ªá th·ªëng")
    ip_address = request.remote_addr or "Unknown"
    device_id = request.user_agent.string or "Unknown"

    # üìÖ X√°c ƒë·ªãnh th√°ng - nƒÉm hi·ªán t·∫°i
    today = datetime.now()
    year, month = today.year, today.month
    print(f"[DEBUG] Xem l∆∞∆°ng cho: {year}-{month:02d}")

    # ============================================================
    # üü¢ T·ªïng s·ªë nh√¢n vi√™n ƒëang ho·∫°t ƒë·ªông
    # ============================================================
    cursor.execute("SELECT COUNT(*) FROM NhanVien WHERE TrangThai = 1")
    total_employees = cursor.fetchone()[0] or 0

    # ============================================================
    # üü¢ S·ªë nh√¢n vi√™n ƒë√£ c√≥ l∆∞∆°ng (ƒë√£ t√≠nh ho·∫∑c ƒë√£ thanh to√°n)
    # ============================================================
    cursor.execute("""
        SELECT COUNT(DISTINCT L.MaNV)
        FROM Luong L
        JOIN NhanVien NV ON L.MaNV = NV.MaNV
        WHERE YEAR(L.ThangNam) = ? 
          AND MONTH(L.ThangNam) = ?
          AND (L.DaXoa = 1 OR L.DaXoa IS NULL)
          AND L.TrangThai IN (1, 2)
          AND NV.TrangThai = 1
    """, (year, month))
    total_salaried = cursor.fetchone()[0] or 0

    # ============================================================
    # üü¢ S·ªë nh√¢n vi√™n ch∆∞a ƒë∆∞·ª£c t√≠nh l∆∞∆°ng
    # ============================================================
    total_unsalaried = max(total_employees - total_salaried, 0)

    # ============================================================
    # üü¢ T·ªïng qu·ªπ l∆∞∆°ng th√°ng n√†y (bao g·ªìm ƒë√£ thanh to√°n)
    # ============================================================
    cursor.execute("""
        SELECT SUM(L.TongTien)
        FROM Luong L
        JOIN NhanVien NV ON L.MaNV = NV.MaNV
        WHERE YEAR(L.ThangNam) = ? 
          AND MONTH(L.ThangNam) = ?
          AND (L.DaXoa = 1 OR L.DaXoa IS NULL)
          AND L.TrangThai IN (1, 2)
          AND NV.TrangThai = 1
    """, (year, month))
    total_salary = cursor.fetchone()[0] or 0

    # ============================================================
    # üü¢ Danh s√°ch chi ti·∫øt l∆∞∆°ng (b·∫£n m·ªõi nh·∫•t c·ªßa t·ª´ng nh√¢n vi√™n)
    # ============================================================
    cursor.execute("""
        SELECT 
            L.MaLuong,
            NV.MaNV,
            NV.HoTen,
            PB.TenPB AS PhongBan,
            ISNULL(L.SoGioLam, 0) AS SoGioLam,
            ISNULL(L.TongTien, 0) AS TongTien,
            ISNULL(L.TrangThai, 0) AS TrangThai,
            CASE 
                WHEN L.TrangThai = 0 THEN N'Ch∆∞a t√≠nh'
                WHEN L.TrangThai = 1 THEN N'ƒê√£ t√≠nh'
                WHEN L.TrangThai = 2 THEN N'ƒê√£ thanh to√°n'
                ELSE N'Kh√°c'
            END AS TrangThaiText,
            ISNULL(L.NgayThanhToan, NULL) AS NgayThanhToan,
            ISNULL(L.PhuongThucChiTra, '') AS PhuongThucChiTra,
            ISNULL(L.NguoiThanhToan, '') AS NguoiThanhToan,
            ISNULL(L.DaXoa, 1) AS DaXoa
        FROM NhanVien NV
        LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
        OUTER APPLY (
            SELECT TOP 1 L2.*
            FROM Luong L2
            WHERE L2.MaNV = NV.MaNV
              AND YEAR(L2.ThangNam) = ?
              AND MONTH(L2.ThangNam) = ?
              AND (L2.DaXoa = 1 OR L2.DaXoa IS NULL)
            ORDER BY 
                ISNULL(L2.NgayThanhToan, L2.NgayTinhLuong) DESC,
                L2.TrangThai DESC
        ) AS L
        WHERE NV.TrangThai = 1
        ORDER BY NV.MaNV;
    """, (year, month))

    # üß± G·∫Øn k·∫øt qu·∫£ th√†nh dict
    cols = [c[0] for c in cursor.description]
    salaries = []
    for row in cursor.fetchall():
        record = dict(zip(cols, row))
        record["TrangThai"] = int(record["TrangThai"] or 0)
        salaries.append(record)

    # ============================================================
    # üßæ Ghi l·ªãch s·ª≠ xem l∆∞∆°ng
    # ============================================================
    try:
        ghi_lich_su(
            ten_bang="Luong",
            ma_ban_ghi=None,
            hanh_dong="Xem danh s√°ch l∆∞∆°ng",
            gia_tri_moi=f"Xem danh s√°ch l∆∞∆°ng th√°ng {year}-{month:02d}",
            nguoi_thuc_hien=username,
            ip=ip_address,
            device=device_id,
            scope=f"Xem danh s√°ch l∆∞∆°ng th√°ng {year}-{month:02d}"
        )
    except Exception as log_err:
        print(f"[WARN] ‚ö†Ô∏è Kh√¥ng th·ªÉ ghi log xem danh s√°ch l∆∞∆°ng: {log_err}")

    conn.close()

    # ============================================================
    # üìÑ Render Template
    # ============================================================
    template_name = "hr_salary.html" if role == "hr" else "salary.html"

    return render_template(
        template_name,
        total_employees=total_employees,
        total_salaried=total_salaried,
        total_unsalaried=total_unsalaried,
        total_salary=total_salary,
        salaries=salaries,
        current_month=f"{month:02d}",
        current_year=str(year),
        role=role
    )

# ============================================================
# üí∞ T√çNH L∆Ø∆†NG TO√ÄN B·ªò NH√ÇN VI√äN
# ============================================================
@salary_bp.route("/calculate_salary")
@require_role("admin", "hr")
def calculate_all_salary():
    conn = get_sql_connection()
    cursor = conn.cursor()

    nguoi_tinh = session.get("username", "H·ªá th·ªëng")
    ip_address = request.remote_addr or "Unknown"
    device_id = request.user_agent.string or "Unknown"
    thang_nam = date.today().replace(day=1)
    scope_text = f"T√≠nh l∆∞∆°ng th√°ng {thang_nam.strftime('%Y-%m')}"

    try:
        # 1Ô∏è‚É£ L·∫•y danh s√°ch nh√¢n vi√™n ƒëang ho·∫°t ƒë·ªông
        cursor.execute("SELECT MaNV FROM NhanVien WHERE TrangThai = 1")
        nhanvien = cursor.fetchall()
        if not nhanvien:
            ghi_lich_su(
                ten_bang="Luong",
                ma_ban_ghi=None,
                hanh_dong="T√≠nh l∆∞∆°ng to√†n b·ªô nh√¢n vi√™n",
                gia_tri_moi="Kh√¥ng c√≥ nh√¢n vi√™n n√†o trong h·ªá th·ªëng.",
                nguoi_thuc_hien=nguoi_tinh,
                ip=ip_address,
                device=device_id,
                scope=scope_text
            )
            return jsonify({"success": False, "message": "‚ö†Ô∏è Kh√¥ng c√≥ nh√¢n vi√™n n√†o trong h·ªá th·ªëng."})

        # 2Ô∏è‚É£ T√≠nh l∆∞∆°ng t·ª´ng nh√¢n vi√™n
        da_tinh = 0
        loi_list = []

        for (ma_nv,) in nhanvien:
            try:
                tinh_luong_nv(cursor, ma_nv, thang_nam, nguoi_tinh, save_to_db=True, return_detail=False)
                da_tinh += 1
            except Exception as e:
                loi_list.append(f"{ma_nv}: {e}")
                print(f"[ERROR] ‚ùå L·ªói khi t√≠nh l∆∞∆°ng {ma_nv}: {e}")

        conn.commit()

        # 3Ô∏è‚É£ T·∫°o th√¥ng ƒëi·ªáp k·∫øt qu·∫£
        if loi_list:
            msg = f"‚ö†Ô∏è ƒê√£ t√≠nh xong {da_tinh}/{len(nhanvien)} nh√¢n vi√™n, nh∆∞ng c√≥ {len(loi_list)} l·ªói:\n" + "\n".join(loi_list)
            success = False
        else:
            msg = f"‚úÖ ƒê√£ t√≠nh l∆∞∆°ng th√†nh c√¥ng cho {da_tinh}/{len(nhanvien)} nh√¢n vi√™n!"
            success = True

        # 4Ô∏è‚É£ Ghi log k·∫øt qu·∫£ (d√πng ghi_lich_su)
        try:
            ghi_lich_su(
                ten_bang="Luong",
                ma_ban_ghi=None,
                hanh_dong="T√≠nh l∆∞∆°ng to√†n b·ªô nh√¢n vi√™n",
                gia_tri_moi=msg,
                nguoi_thuc_hien=nguoi_tinh,
                ip=ip_address,
                device=device_id,
                scope=scope_text
            )
        except Exception as log_err:
            print(f"[WARN] ‚ö†Ô∏è Kh√¥ng ghi ƒë∆∞·ª£c log t√≠nh l∆∞∆°ng: {log_err}")

        return jsonify({"success": success, "message": msg})

    except Exception as e:
        conn.rollback()
        print(f"[FATAL] ‚ùå L·ªói to√†n h·ªá th·ªëng khi t√≠nh l∆∞∆°ng: {e}")

        # 5Ô∏è‚É£ Ghi log l·ªói h·ªá th·ªëng
        try:
            ghi_lich_su(
                ten_bang="Luong",
                ma_ban_ghi=None,
                hanh_dong="L·ªói khi t√≠nh l∆∞∆°ng to√†n b·ªô nh√¢n vi√™n",
                gia_tri_moi=str(e),
                nguoi_thuc_hien=nguoi_tinh,
                ip=ip_address,
                device=device_id,
                scope=scope_text
            )
        except Exception as log_err:
            print(f"[WARN] ‚ö†Ô∏è Kh√¥ng th·ªÉ ghi log l·ªói t√≠nh l∆∞∆°ng: {log_err}")

        return jsonify({
            "success": False,
            "message": f"‚ùå L·ªói to√†n h·ªá th·ªëng khi t√≠nh l∆∞∆°ng: {str(e)}"
        })

    finally:
        cursor.close()
        conn.close()
# ============================================================
# üí∞ T√çNH L∆Ø∆†NG CHO 1 NH√ÇN VI√äN
# ============================================================
@salary_bp.route("/calculate_salary/<ma_nv>")
@require_role("admin", "hr")
def calculate_salary_for_one(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()

    nguoi_tinh = session.get("username", "H·ªá th·ªëng")
    ip_address = request.remote_addr or "Unknown"
    device_id = request.user_agent.string or "Unknown"
    thang_nam = date.today().replace(day=1)
    scope_text = f"T√≠nh l∆∞∆°ng th√°ng {thang_nam.strftime('%Y-%m')}"

    try:
        # 1Ô∏è‚É£ Th·ª±c hi·ªán t√≠nh l∆∞∆°ng cho nh√¢n vi√™n
        tong_gio, tong_tien, _ = tinh_luong_nv(
            cursor, ma_nv, thang_nam, nguoi_tinh, save_to_db=True, return_detail=True
        )
        conn.commit()

        # 2Ô∏è‚É£ T·∫°o n·ªôi dung log
        msg = f"T√≠nh l∆∞∆°ng cho {ma_nv}: {tong_gio:.2f} gi·ªù, {tong_tien:,.0f} VND"
        print(f"‚úÖ {msg}")

        # 3Ô∏è‚É£ Ghi log th√†nh c√¥ng (s·ª≠ d·ª•ng h√†m ti·ªán √≠ch)
        try:
            ghi_lich_su(
                ten_bang="Luong",
                ma_ban_ghi=ma_nv,
                hanh_dong="T√≠nh l∆∞∆°ng cho nh√¢n vi√™n",
                gia_tri_moi=msg,
                nguoi_thuc_hien=nguoi_tinh,
                ip=ip_address,
                device=device_id,
                scope=scope_text
            )
        except Exception as log_err:
            print(f"[WARN] ‚ö†Ô∏è Kh√¥ng ghi ƒë∆∞·ª£c log t√≠nh l∆∞∆°ng {ma_nv}: {log_err}")

        # 4Ô∏è‚É£ Tr·∫£ k·∫øt qu·∫£ cho client
        return jsonify({
            "success": True,
            "message": f"‚úÖ ƒê√£ t√≠nh l∆∞∆°ng cho {ma_nv}: {tong_gio:.2f} gi·ªù, {tong_tien:,.0f} VND"
        })

    except Exception as e:
        conn.rollback()
        print(f"[ERROR] ‚ùå L·ªói khi t√≠nh l∆∞∆°ng {ma_nv}: {e}")

        # 5Ô∏è‚É£ Ghi log l·ªói ri√™ng bi·ªát
        try:
            ghi_lich_su(
                ten_bang="Luong",
                ma_ban_ghi=ma_nv,
                hanh_dong="L·ªói khi t√≠nh l∆∞∆°ng cho nh√¢n vi√™n",
                gia_tri_moi=str(e),
                nguoi_thuc_hien=nguoi_tinh,
                ip=ip_address,
                device=device_id,
                scope=scope_text
            )
        except Exception as log_err:
            print(f"[WARN] ‚ö†Ô∏è Kh√¥ng th·ªÉ ghi log l·ªói t√≠nh l∆∞∆°ng {ma_nv}: {log_err}")

        return jsonify({
            "success": False,
            "message": f"‚ùå L·ªói khi t√≠nh l∆∞∆°ng {ma_nv}: {str(e)}"
        })

    finally:
        cursor.close()
        conn.close()


# ============================================================
# üí∞ XEM CHI TI·∫æT L∆Ø∆†NG 1 NH√ÇN VI√äN
# ============================================================
@salary_bp.route("/salary/<ma_nv>")
@require_role("admin", "hr")
def salary_detail(ma_nv):
    """
    Trang xem chi ti·∫øt l∆∞∆°ng c·ªßa 1 nh√¢n vi√™n trong th√°ng hi·ªán t·∫°i.
    - G·ªçi h√†m t√≠nh l∆∞∆°ng (ch·ªâ xem, kh√¥ng l∆∞u DB)
    - Hi·ªÉn th·ªã chi ti·∫øt c√°c ca l√†m vi·ªác, ph·ª• c·∫•p, thu·∫ø, t·ªïng l∆∞∆°ng th·ª±c nh·∫≠n
    """
    conn = get_sql_connection()
    cursor = conn.cursor()

    role = session.get("role", "admin")
    nguoi_xem = session.get("username", "H·ªá th·ªëng")
    ip_address = request.remote_addr or "Unknown"
    device_id = request.user_agent.string or "Unknown"
    thang_nam = date.today().replace(day=1)
    scope_text = f"Xem chi ti·∫øt l∆∞∆°ng th√°ng {thang_nam.strftime('%Y-%m')}"

    try:
        # ============================================================
        # 1Ô∏è‚É£ L·∫•y th√¥ng tin nh√¢n vi√™n
        # ============================================================
        cursor.execute("""
            SELECT NV.MaNV, NV.HoTen, NV.ChucVu, PB.TenPB
            FROM NhanVien NV
            LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
            WHERE NV.MaNV = ?
        """, (ma_nv,))
        emp = cursor.fetchone()
        if not emp:
            return render_template("error.html", message=f"‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n c√≥ m√£ {ma_nv}")

        # ============================================================
        # 2Ô∏è‚É£ G·ªçi h√†m t√≠nh l∆∞∆°ng (ch·ªâ xem, kh√¥ng l∆∞u DB)
        # ============================================================
        tong_gio, tong_tien_thuc, records = tinh_luong_nv(
            cursor,
            ma_nv,
            thang_nam,
            nguoi_xem,
            save_to_db=False,
            return_detail=True
        )

        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng
        if not records:
            return render_template(
                "salary_detail.html",
                emp=emp,
                records=[],
                tong_gio=0,
                tong_tien=0,
                phu_cap=0,
                pit=0,
                tong_tien_thuc=0,
                role_label="Nh√¢n vi√™n",
                role_icon="fa-user text-primary",
                current_month=thang_nam.month,
                current_year=thang_nam.year,
                message="‚ö†Ô∏è Nh√¢n vi√™n n√†y ch∆∞a c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng trong th√°ng."
            )

        # ============================================================
        # 3Ô∏è‚É£ T√≠nh ph·ª• c·∫•p & thu·∫ø ƒë·ªÉ hi·ªÉn th·ªã c√¥ng th·ª©c t·ªïng
        # ============================================================
        params = get_tham_so_luong(cursor)
        phu_cap_xang = params.get("PhuCapXangXe", 500000)
        phu_cap_an = params.get("PhuCapAnTrua", 30000) * len(records)
        phu_cap_khac = params.get("PhuCapKhac", 200000)
        phu_cap = phu_cap_xang + phu_cap_an + phu_cap_khac

        pit = max((tong_tien_thuc - phu_cap) * params.get("PIT_ThueThuNhap", 0.05), 0)
        tong_tien = max(tong_tien_thuc - phu_cap + pit, 0)

        # ============================================================
        # 4Ô∏è‚É£ Ghi log "Xem chi ti·∫øt l∆∞∆°ng"
        # ============================================================
        try:
            log_msg = f"Xem chi ti·∫øt l∆∞∆°ng {ma_nv}: {tong_gio:.2f} gi·ªù, {tong_tien_thuc:,.0f} VND"
            ghi_lich_su(
                ten_bang="Luong",
                ma_ban_ghi=ma_nv,
                hanh_dong="Xem chi ti·∫øt l∆∞∆°ng nh√¢n vi√™n",
                gia_tri_moi=log_msg,
                nguoi_thuc_hien=nguoi_xem,
                ip=ip_address,
                device=device_id,
                scope=scope_text
            )
        except Exception as log_err:
            print(f"[WARN] ‚ö†Ô∏è Kh√¥ng th·ªÉ ghi log xem chi ti·∫øt l∆∞∆°ng {ma_nv}: {log_err}")

        # ============================================================
        # 5Ô∏è‚É£ Ph√¢n lo·∫°i vai tr√≤ (icon + nh√£n ch·ª©c v·ª•)
        # ============================================================
        chucvu = (emp[2] or "").lower()
        if "tr∆∞·ªüng ph√≤ng" in chucvu:
            role_label, role_icon = "Tr∆∞·ªüng ph√≤ng", "fa-star text-warning"
        elif "ph√≥ ph√≤ng" in chucvu:
            role_label, role_icon = "Ph√≥ ph√≤ng", "fa-crown text-info"
        elif "hr" in chucvu:
            role_label, role_icon = "Nh√¢n s·ª±", "fa-users text-success"
        elif "th·ª±c t·∫≠p" in chucvu or "intern" in chucvu:
            role_label, role_icon = "Th·ª±c t·∫≠p sinh", "fa-user-graduate text-secondary"
        else:
            role_label, role_icon = "Nh√¢n vi√™n", "fa-user text-primary"

        # ============================================================
        # 6Ô∏è‚É£ Render giao di·ªán chi ti·∫øt
        # ============================================================
        template_name = "hr_salary_detail.html" if role == "hr" else "salary_detail.html"
        return render_template(
            template_name,
            emp=emp,
            records=records,
            tong_gio=tong_gio or 0,
            tong_tien=tong_tien or 0,
            phu_cap=phu_cap or 0,
            pit=pit or 0,
            tong_tien_thuc=tong_tien_thuc or 0,
            role_label=role_label,
            role_icon=role_icon,
            current_month=thang_nam.month,
            current_year=thang_nam.year
        )

    except Exception as e:
        print(f"[ERROR] ‚ùå L·ªói khi xem chi ti·∫øt l∆∞∆°ng {ma_nv}: {e}")

        # Ghi log l·ªói xem chi ti·∫øt l∆∞∆°ng
        try:
            ghi_lich_su(
                ten_bang="Luong",
                ma_ban_ghi=ma_nv,
                hanh_dong="L·ªói khi xem chi ti·∫øt l∆∞∆°ng nh√¢n vi√™n",
                gia_tri_moi=str(e),
                nguoi_thuc_hien=nguoi_xem,
                ip=ip_address,
                device=device_id,
                scope=scope_text
            )
        except Exception as log_err:
            print(f"[WARN] ‚ö†Ô∏è Kh√¥ng th·ªÉ ghi log l·ªói xem chi ti·∫øt l∆∞∆°ng {ma_nv}: {log_err}")

        return render_template("error.html", message=f"L·ªói khi xem chi ti·∫øt l∆∞∆°ng: {e}")

    finally:
        conn.close()

# ============================================================
# ‚ùå X√ìA M·ªÄM 1 B·∫¢N GHI L∆Ø∆†NG
# ============================================================
@salary_bp.route("/salary/delete/<ma_nv>", methods=["POST"])
@require_role("admin", "hr")
def delete_salary(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        cursor.execute("UPDATE Luong SET DaXoa = 0 WHERE MaNV = ?", (ma_nv,))
        cursor.execute("""
            INSERT INTO LichSuThayDoi (
                TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
            )
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, ("Luong", ma_nv, "X√≥a m·ªÅm", "DaXoa", 1, 0, username))
        conn.commit()
        flash(f"üóëÔ∏è ƒê√£ x√≥a m·ªÅm l∆∞∆°ng c·ªßa nh√¢n vi√™n {ma_nv}!", "success")
    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a m·ªÅm: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("salary_bp.salary_view"))

# ============================================================
# üóëÔ∏è X√ìA NHI·ªÄU B·∫¢N L∆Ø∆†NG
# ============================================================
@salary_bp.route("/delete_multiple_salary", methods=["POST"])
@require_role("admin", "hr")
def delete_multiple_salary():
    selected_ids = request.form.getlist("selected_ids")  # danh s√°ch c√°c MaLuong ƒë∆∞·ª£c ch·ªçn

    if not selected_ids:
        flash("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt b·∫£n l∆∞∆°ng ƒë·ªÉ x√≥a.", "warning")
        return redirect(url_for("salary_bp.salary_view"))

    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        for ma_luong in selected_ids:
            cursor.execute("UPDATE Luong SET DaXoa = 1 WHERE MaLuong = ?", (ma_luong,))
        conn.commit()
        flash(f"ƒê√£ x√≥a {len(selected_ids)} b·∫£n l∆∞∆°ng.", "success")
    except Exception as e:
        conn.rollback()
        flash(f"L·ªói khi x√≥a nhi·ªÅu b·∫£n l∆∞∆°ng: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("salary_bp.salary_view"))

# ============================================================
# üìã DANH S√ÅCH L∆Ø∆†NG ƒê√É X√ìA
# ============================================================
@salary_bp.route("/salary/deleted")
@require_role("admin")
def deleted_salaries():
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT 
                L.MaLuong,
                NV.MaNV,
                NV.HoTen,
                PB.TenPB,
                L.SoGioLam,
                L.TongTien,
                CONVERT(varchar(7), L.ThangNam, 126) AS ThangNam   -- ‚úÖ an to√†n h∆°n FORMAT()
            FROM Luong L
            JOIN NhanVien NV ON L.MaNV = NV.MaNV
            LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
            WHERE L.DaXoa = 0
            ORDER BY L.ThangNam DESC
        """)
        rows = cursor.fetchall()
        cols = [c[0] for c in cursor.description]
        deleted_salaries = [dict(zip(cols, row)) for row in rows]
    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i danh s√°ch l∆∞∆°ng ƒë√£ x√≥a: {e}", "error")
        deleted_salaries = []
    finally:
        conn.close()

    return render_template(
        "deleted_records.html",
        deleted_salaries=deleted_salaries,
        active_tab="salary"
    )

@salary_bp.route("/salary_rules")
@require_role("admin", "hr", "manager", "employee")
def salary_rules():
    """Hi·ªÉn th·ªã trang quy t·∫Øc t√≠nh l∆∞∆°ng theo vai tr√≤"""
    role = session.get("role", "employee")

    # üü¢ Ch·ªçn file template ph√π h·ª£p
    if role == "hr":
        template_name = "hr_salary_rules.html"
    else:
        template_name = "salary_rules.html"

    return render_template(template_name)

# üîé L·∫§Y TH√îNG TIN THANH TO√ÅN CHO 1 B·∫¢N L∆Ø∆†NG
# ============================================================
@salary_bp.route("/salary/<string:ma_luong>/payment-info", methods=["GET"])
@require_role("admin", "hr")
def get_payment_info(ma_luong: str):
    """
    ‚úÖ Tr·∫£ v·ªÅ th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ hi·ªÉn th·ªã modal thanh to√°n.
    - Ki·ªÉm tra tr·∫°ng th√°i l∆∞∆°ng (ch∆∞a t√≠nh / ƒë√£ thanh to√°n)
    - Ghi log h√†nh ƒë·ªông xem th√¥ng tin thanh to√°n
    - Tr·∫£ th√¥ng tin nh√¢n vi√™n v√† l∆∞∆°ng ƒë·ªÉ hi·ªÉn th·ªã modal
    """
    conn = get_sql_connection()
    cursor = conn.cursor()
    nguoi_thuc_hien = session.get("username", "H·ªá th·ªëng")
    ip = request.remote_addr or "Unknown"
    device = request.user_agent.string or "Unknown"

    try:
        # ============================================================
        # üßæ L·∫•y th√¥ng tin l∆∞∆°ng + nh√¢n vi√™n
        # ============================================================
        cursor.execute("""
            SELECT 
                L.MaLuong, L.MaNV, L.SoGioLam, L.TongTien, L.TrangThai, 
                L.NgayTinhLuong, L.NguoiTinhLuong, L.NgayThanhToan, L.GhiChu,
                L.PhuongThucChiTra, L.SoTaiKhoan, L.NganHang, L.PhiGiaoDich,
                L.LoaiLuong, L.ThangNam, L.NguoiThanhToan,
                N.HoTen, N.Email
            FROM Luong L
            LEFT JOIN NhanVien N ON L.MaNV = N.MaNV
            WHERE L.MaLuong = ?
        """, (ma_luong,))
        row = cursor.fetchone()

        if not row:
            return jsonify({
                "success": False,
                "message": f"Kh√¥ng t√¨m th·∫•y b·∫£n l∆∞∆°ng {ma_luong}."
            }), 404

        # ============================================================
        # üß± Chuy·ªÉn k·∫øt qu·∫£ th√†nh dict
        # ============================================================
        cols = [
            "MaLuong","MaNV","SoGioLam","TongTien","TrangThai",
            "NgayTinhLuong","NguoiTinhLuong","NgayThanhToan","GhiChu",
            "PhuongThucChiTra","SoTaiKhoan","NganHang","PhiGiaoDich",
            "LoaiLuong","ThangNam","NguoiThanhToan",
            "HoTen","Email"
        ]
        data = {c: row[i] for i, c in enumerate(cols)}

        # ============================================================
        # üö´ Ki·ªÉm tra tr·∫°ng th√°i ƒë·ªÉ ch·∫∑n thao t√°c
        # ============================================================
        if data["TrangThai"] == 0:
            return jsonify({
                "success": False,
                "message": f"‚ö†Ô∏è B·∫£ng l∆∞∆°ng {ma_luong} ch∆∞a ƒë∆∞·ª£c t√≠nh. Vui l√≤ng t√≠nh l∆∞∆°ng tr∆∞·ªõc khi thanh to√°n."
            }), 400

        if data["TrangThai"] == 2:
            return jsonify({
                "success": False,
                "message": f"‚ùå B·∫£ng l∆∞∆°ng {ma_luong} ƒë√£ ƒë∆∞·ª£c thanh to√°n. H√£y x√≥a v√† t√≠nh l·∫°i tr∆∞·ªõc khi thanh to√°n l·∫°i."
            }), 400

        # ============================================================
        # üî§ Hi·ªÉn th·ªã tr·∫°ng th√°i ch·ªØ
        # ============================================================
        data["TrangThaiText"] = (
            "Ch∆∞a t√≠nh" if data["TrangThai"] == 0
            else "ƒê√£ t√≠nh" if data["TrangThai"] == 1
            else "ƒê√£ thanh to√°n"
        )

        # ============================================================
        # üßæ Ghi log h√†nh ƒë·ªông "Xem th√¥ng tin thanh to√°n"
        # ============================================================
        try:
            ghi_lich_su(
                ten_bang="Luong",
                ma_ban_ghi=ma_luong,
                hanh_dong="Xem th√¥ng tin thanh to√°n",
                gia_tri_moi=f"Xem chi ti·∫øt thanh to√°n cho {data['HoTen']} ({ma_luong})",
                nguoi_thuc_hien=nguoi_thuc_hien,
                ip=ip,
                device=device,
                scope="PAYMENT_VIEW"
            )
        except Exception as log_err:
            print(f"[WARN] ‚ö†Ô∏è Kh√¥ng ghi ƒë∆∞·ª£c log xem thanh to√°n: {log_err}")

        # ============================================================
        # ‚úÖ Tr·∫£ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ hi·ªÉn th·ªã modal thanh to√°n
        # ============================================================
        return jsonify({
            "success": True,
            "data": data
        })

    except Exception as e:
        print(f"[ERROR] ‚ùå get_payment_info: {e}")
        import traceback; traceback.print_exc()
        return jsonify({
            "success": False,
            "message": f"L·ªói khi l·∫•y th√¥ng tin thanh to√°n: {e}"
        }), 500

    finally:
        cursor.close()
        conn.close()
# ============================================================
# 1Ô∏è‚É£ KH·ªûI T·∫†O THANH TO√ÅN L∆Ø∆†NG (Admin t·∫°o giao d·ªãch Pending + G·ª≠i OTP)
# ============================================================
@salary_bp.route("/pay/<ma_luong>", methods=["POST"])
@require_role("admin", "hr")
def pay_salary_start(ma_luong):
    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")
    user_id = session.get("user_id", 1)  # ‚úÖ D√πng user_id (int)
    ip = request.remote_addr
    device = request.user_agent.string[:500]

    # üîê Ch·ªâ admin m·ªõi ƒë∆∞·ª£c thanh to√°n
    role = session.get("role", "")
    if role != "admin":
        return jsonify({
            "success": False,
            "message": "Ch·ªâ t√†i kho·∫£n Admin m·ªõi ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán thanh to√°n l∆∞∆°ng."
        }), 403

    # ============================================================
    # üîé L·∫•y d·ªØ li·ªáu l∆∞∆°ng c·∫ßn thanh to√°n
    # ============================================================
    cursor.execute("""
        SELECT L.MaNV, L.TongTien, N.HoTen, N.Email
        FROM Luong L 
        JOIN NhanVien N ON L.MaNV = N.MaNV
        WHERE L.MaLuong = ?
    """, ma_luong)
    row = cursor.fetchone()
    if not row:
        return jsonify({"success": False, "message": "Kh√¥ng t√¨m th·∫•y b·∫£n ghi l∆∞∆°ng."}), 404

    ma_nv, so_tien, ten_nv, email_nv = row
    so_tien = Decimal(str(so_tien))
    phuong_thuc = request.form.get("phuong_thuc", "bank")
    phi = calc_fee(phuong_thuc, so_tien)

    # ============================================================
    # üßæ T·∫°o giao d·ªãch t·∫°m (Pending-OTP)
    # ============================================================
    ma_gd_temp = payment_utils.generate_txid(prefix="PEND")
    noi_dung = f"Thanh to√°n t·∫°m (ch·ªù OTP) qua {phuong_thuc}"
    try:
        cursor.execute("""
            INSERT INTO GiaoDichLuong (MaLuong, MaNV, SoTien, PhuongThuc, PhiGiaoDich, NoiDung,
                                       NgayGiaoDich, TrangThai, MaGiaoDich, NguoiThucHien)
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?, ?, ?)
        """, (
            ma_luong, ma_nv, float(so_tien), phuong_thuc,
            float(phi), noi_dung, "Pending-OTP", ma_gd_temp, username
        ))
        conn.commit()

        ghi_lich_su(
            ten_bang="GiaoDichLuong",
            ma_ban_ghi=ma_gd_temp,
            hanh_dong="Kh·ªüi t·∫°o thanh to√°n (Pending-OTP)",
            gia_tri_moi=f"{ma_luong} - {ma_nv} - {so_tien:,}ƒë qua {phuong_thuc}",
            nguoi_thuc_hien=username,
            ip=ip,
            device=device,
            scope="PAYMENT_INIT"
        )
    except Exception as e:
        conn.rollback()
        return jsonify({"success": False, "message": f"L·ªói t·∫°o giao d·ªãch t·∫°m: {e}"}), 500

    # ============================================================
    # üî¢ T·∫°o OTP (5 ph√∫t)
    # ============================================================
    otp = payment_utils.generate_otp(6)
    expires = payment_utils.otp_expires_at(minutes=5)

    try:
        cursor.execute("""
            IF OBJECT_ID('dbo.TempOTP', 'U') IS NULL
            CREATE TABLE TempOTP (
                MaGiaoDich NVARCHAR(50) PRIMARY KEY,
                OTP NVARCHAR(10),
                ExpiresAt DATETIME
            )
        """)
        cursor.execute("""
            MERGE TempOTP AS T
            USING (SELECT ? AS MaGiaoDich) AS S
            ON T.MaGiaoDich = S.MaGiaoDich
            WHEN MATCHED THEN UPDATE SET OTP = ?, ExpiresAt = ?
            WHEN NOT MATCHED THEN INSERT (MaGiaoDich, OTP, ExpiresAt)
            VALUES (?, ?, ?);
        """, (ma_gd_temp, otp, expires, ma_gd_temp, otp, expires))
        conn.commit()
    except Exception as e:
        conn.rollback()
        print("[WARN] L∆∞u OTP l·ªói:", e)

    # ============================================================
    # ‚úâÔ∏è G·ª≠i OTP t·ªõi email c·ªßa ADMIN
    # ============================================================
    cursor.execute("SELECT Email FROM TaiKhoan WHERE TenDangNhap = ?", username)
    row_admin = cursor.fetchone()
    email_admin = row_admin[0] if row_admin and row_admin[0] else None

    subject = f"[OTP] X√°c nh·∫≠n thanh to√°n l∆∞∆°ng - M√£ t·∫°m {ma_gd_temp}"
    body = (
        f"Xin ch√†o {username},\n\n"
        f"M√£ OTP ƒë·ªÉ x√°c nh·∫≠n thanh to√°n l√†: {otp}\n"
        f"M√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.\n\n"
        f"Th·ª±c hi·ªán thanh to√°n l∆∞∆°ng cho nh√¢n vi√™n {ten_nv or ma_nv}, "
        f"s·ªë ti·ªÅn: {so_tien:,.0f}ƒë.\n\n"
        f"Tr√¢n tr·ªçng,\nFaceID System"
    )

    if email_admin:
        ok, err = send_email_with_attachment(email_admin, subject, body)
        print(f"[EMAIL INFO] üìß G·ª≠i OTP t·ªõi {email_admin} | OTP={otp}")
    else:
        ok, err = True, None
        print(f"[OTP DEMO] üîê Kh√¥ng c√≥ email admin. OTP cho {username}: {otp}")

    # ============================================================
    # üßæ L∆∞u l·ªãch s·ª≠ g·ª≠i mail OTP
    # ============================================================
    try:
        status = 1 if ok else 0
        cursor.execute("""
            INSERT INTO LichSuEmail (MaTK, EmailTo, LoaiThongBao, ThoiGian, TrangThai, MaThamChieu)
            VALUES (?, ?, ?, GETDATE(), ?, ?)
        """, (user_id, email_admin or "(demo)", 'OTP-Payment', status, ma_gd_temp))  # ‚úÖ D√πng user_id thay v√¨ username
        conn.commit()

        ghi_lich_su(
            ten_bang="LichSuEmail",
            ma_ban_ghi=ma_gd_temp,
            hanh_dong="G·ª≠i OTP thanh to√°n",
            gia_tri_moi=f"G·ª≠i OTP {otp} t·ªõi {email_admin or 'console'}",
            nguoi_thuc_hien=username,
            ip=ip,
            device=device,
            scope="OTP_SEND"
        )
    except Exception as e:
        conn.rollback()
        print("[WARN] Kh√¥ng th·ªÉ ghi log email OTP:", e)

    # ============================================================
    # ‚úÖ Tr·∫£ k·∫øt qu·∫£ v·ªÅ client
    # ============================================================
    return jsonify({
        "success": True,
        "need_otp": True,
        "ma_gd_temp": ma_gd_temp,
        "message": f"ƒê√£ g·ª≠i OTP x√°c nh·∫≠n t·ªõi {email_admin or 'console (demo)'}. Vui l√≤ng nh·∫≠p m√£ OTP ƒë·ªÉ ho√†n t·∫•t."
    })

# ============================================================
# ‚úÖ X√ÅC TH·ª∞C OTP & HO√ÄN T·∫§T THANH TO√ÅN L∆Ø∆†NG
# ============================================================
@salary_bp.route("/pay/verify", methods=["POST"])
@require_role("admin", "hr")
def pay_salary_verify():
    data = request.get_json() or {}
    ma_gd_temp = data.get("ma_gd")
    otp_submitted = data.get("otp")
    so_tai_khoan = data.get("so_tai_khoan")
    ngan_hang = data.get("ngan_hang")

    username = session.get("username", "H·ªá th·ªëng")
    user_id = session.get("user_id", 1)
    role = session.get("role", "")
    ip = request.remote_addr
    device = request.user_agent.string[:500]

    # ------------------------------------------------------------
    # üö´ Ch·ªâ admin ƒë∆∞·ª£c x√°c nh·∫≠n OTP v√† ho√†n t·∫•t thanh to√°n
    # ------------------------------------------------------------
    if role != "admin":
        return jsonify({
            "success": False,
            "message": "Ch·ªâ t√†i kho·∫£n Admin m·ªõi ƒë∆∞·ª£c x√°c nh·∫≠n v√† ho√†n t·∫•t thanh to√°n l∆∞∆°ng."
        }), 403

    if not ma_gd_temp or not otp_submitted:
        return jsonify({"success": False, "message": "Thi·∫øu m√£ giao d·ªãch ho·∫∑c OTP."}), 400

    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        # ======================================================
        # üîê KI·ªÇM TRA OTP H·ª¢P L·ªÜ (ƒë√£ g·ª≠i cho admin)
        # ======================================================
        cursor.execute("SELECT OTP, ExpiresAt FROM TempOTP WHERE MaGiaoDich = ?", ma_gd_temp)
        row = cursor.fetchone()
        if not row:
            return jsonify({"success": False, "message": "OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n."}), 400

        otp_real, expires_at = row
        if datetime.utcnow() > expires_at or otp_submitted != otp_real:
            return jsonify({"success": False, "message": "OTP sai ho·∫∑c ƒë√£ h·∫øt h·∫°n."}), 400

        # ======================================================
        # üîé L·∫§Y GIAO D·ªäCH CH·ªú X√ÅC NH·∫¨N
        # ======================================================
        cursor.execute("""
            SELECT MaLuong, MaNV, SoTien, PhuongThuc, PhiGiaoDich
            FROM GiaoDichLuong
            WHERE MaGiaoDich = ? AND TrangThai = 'Pending-OTP'
        """, ma_gd_temp)
        gd = cursor.fetchone()
        if not gd:
            return jsonify({"success": False, "message": "Giao d·ªãch kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ x·ª≠ l√Ω."}), 400

        ma_luong, ma_nv, so_tien, phuong_thuc, phi = gd

        # üß± Ch·∫∑n thanh to√°n tr√πng
        cursor.execute("SELECT TrangThai FROM Luong WHERE MaLuong = ?", ma_luong)
        row_tt = cursor.fetchone()
        if row_tt and str(row_tt[0]) == "2":
            return jsonify({"success": False, "message": "B·∫£ng l∆∞∆°ng n√†y ƒë√£ ƒë∆∞·ª£c thanh to√°n."}), 400

        # ======================================================
        # üí≥ GI·∫¢ L·∫¨P THANH TO√ÅN TH·∫¨T
        # ======================================================
        result = payment_utils.fake_payment_gateway(phuong_thuc, Decimal(str(so_tien)))
        if not result.get("success"):
            cursor.execute("""
                UPDATE GiaoDichLuong
                SET TrangThai = 'Failed', NoiDung = ?
                WHERE MaGiaoDich = ?
            """, (f"L·ªói gateway: {result.get('error')}", ma_gd_temp))
            conn.commit()
            return jsonify({"success": False, "message": "Thanh to√°n th·∫•t b·∫°i t·∫°i gateway."}), 500

        txid_real = result.get("txid")

        # ======================================================
        # üíæ C·∫¨P NH·∫¨T B·∫¢NG L∆Ø∆†NG (ƒê√É THANH TO√ÅN)
        # ======================================================
        cursor.execute("""
            UPDATE Luong
            SET TrangThai = 2,
                NgayThanhToan = GETDATE(),
                NguoiThanhToan = ?,
                MaTK = ?,
                PhuongThucChiTra = ?,
                SoTaiKhoan = ?,
                NganHang = ?,
                PhiGiaoDich = ?,
                GhiChu = N'Thanh to√°n th√†nh c√¥ng',
                DaXoa = 1
            WHERE MaLuong = ?
        """, (
            username,
            user_id,
            phuong_thuc,
            so_tai_khoan,
            ngan_hang,
            float(phi),
            ma_luong
        ))
        conn.commit()
        print(f"[PAYMENT] ‚úÖ ƒê√£ c·∫≠p nh·∫≠t Luong.TrangThai=2, DaXoa=1 cho {ma_luong}")

        # ======================================================
        # üß© C·∫¨P NH·∫¨T TH√îNG TIN NG√ÇN H√ÄNG NH√ÇN VI√äN
        # ======================================================
        try:
            if so_tai_khoan or ngan_hang or phuong_thuc:
                cursor.execute("""
                    UPDATE NhanVien
                    SET 
                        SoTaiKhoan = CASE WHEN ? <> '' THEN ? ELSE SoTaiKhoan END,
                        NganHang = CASE WHEN ? <> '' THEN ? ELSE NganHang END,
                        PhuongThucMacDinh = CASE WHEN ? <> '' THEN ? ELSE PhuongThucMacDinh END
                    WHERE MaNV = ?
                """, (
                    so_tai_khoan, so_tai_khoan,
                    ngan_hang, ngan_hang,
                    phuong_thuc, phuong_thuc,
                    ma_nv
                ))
                conn.commit()
                print(f"[SYNC] üîÑ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ng√¢n h√†ng cho {ma_nv}")
        except Exception as e:
            conn.rollback()
            print(f"[WARN] ‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin NhanVien: {e}")

        # ======================================================
        # üßæ C·∫¨P NH·∫¨T GIAO D·ªäCH
        # ======================================================
        cursor.execute("""
            UPDATE GiaoDichLuong
            SET TrangThai = 'Th√†nh c√¥ng',
                MaGiaoDich = ?,
                NgayGiaoDich = GETDATE(),
                NoiDung = CONCAT(N'Thanh to√°n ho√†n t·∫•t cho ', ?, N' qua ', ?)
            WHERE MaGiaoDich = ?
        """, (txid_real, ma_nv, phuong_thuc, ma_gd_temp))
        conn.commit()

        # ======================================================
        # üßπ X√ìA OTP T·∫†M
        # ======================================================
        cursor.execute("DELETE FROM TempOTP WHERE MaGiaoDich = ?", ma_gd_temp)
        conn.commit()

        # ======================================================
        # üßæ T·∫†O BI√äN LAI PDF (T·ª∞ ƒê·ªòNG L·∫§Y STK & NG√ÇN H√ÄNG)
        # ======================================================
        cursor.execute("""
            SELECT HoTen, Email, SoTaiKhoan, NganHang, PhuongThucMacDinh
            FROM NhanVien
            WHERE MaNV = ?
        """, ma_nv)
        row_nv = cursor.fetchone()
        ten_nv, email_to, so_tk_nv, ngan_hang_nv, phuong_thuc_nv = row_nv if row_nv else ("", None, "", "", "")

        # ∆Øu ti√™n th√¥ng tin nh·∫≠p tay n·∫øu c√≥
        so_tk_final = so_tai_khoan or so_tk_nv
        ngan_hang_final = ngan_hang or ngan_hang_nv
        phuong_thuc_final = phuong_thuc or phuong_thuc_nv or "bank"

        signature_path = os.path.join(current_app.root_path, "static", "images", "signature_fake.png")

        pdf_path = payment_utils.generate_salary_pdf(
            txid=txid_real,
            ma_nv=ma_nv,
            ho_ten=ten_nv,
            so_tien=Decimal(str(so_tien)),
            phuong_thuc=phuong_thuc_final,
            phi=Decimal(str(phi)),
            file_path=None,
            signature_img_path=signature_path,
            qr_target=f"https://faceid.local/receipts/{txid_real}",
            so_tk=so_tk_final,              # ‚úÖ truy·ªÅn STK
            ngan_hang=ngan_hang_final       # ‚úÖ truy·ªÅn Ng√¢n h√†ng
        )

        print(f"[PDF] ‚úÖ Bi√™n lai c√≥ STK={so_tk_final}, NH={ngan_hang_final}: {pdf_path}")

        cursor.execute("""
            UPDATE GiaoDichLuong
            SET NoiDung = CONCAT(ISNULL(NoiDung, ''), ' | PDF=', ?)
            WHERE MaGiaoDich = ?
        """, (pdf_path, txid_real))
        conn.commit()

        # ======================================================
        # ‚úâÔ∏è G·ª¨I EMAIL BI√äN LAI CHO NH√ÇN VI√äN
        # ======================================================
        if email_to:
            subject = f"Bi√™n lai thanh to√°n l∆∞∆°ng - FaceID - M√£ {txid_real}"
            body = (
                f"Xin ch√†o {ten_nv or ma_nv},\n\n"
                f"H·ªá th·ªëng FaceID ƒë√£ th·ª±c hi·ªán thanh to√°n l∆∞∆°ng th√†nh c√¥ng qua {phuong_thuc}.\n"
                f"Vui l√≤ng xem bi√™n lai ƒë√≠nh k√®m.\n\nTr√¢n tr·ªçng,\nFaceID System"
            )
            ok, _ = send_email_with_attachment(email_to, subject, body, attachment_path=pdf_path)

            cursor.execute("""
                INSERT INTO LichSuEmail (MaTK, EmailTo, LoaiThongBao, ThoiGian, TrangThai, MaThamChieu)
                VALUES (?, ?, ?, GETDATE(), ?, ?)
            """, (user_id, email_to, 'PAYMENT_RECEIPT', 1 if ok else 0, ma_luong))
            conn.commit()

        # ======================================================
        # üß† GHI L·ªäCH S·ª¨ H·ªÜ TH·ªêNG
        # ======================================================
        ghi_lich_su(
            ten_bang="Luong",
            ma_ban_ghi=ma_luong,
            hanh_dong="Ho√†n t·∫•t thanh to√°n",
            gia_tri_moi=f"TX={txid_real}, PhuongThuc={phuong_thuc}, SoTK={so_tai_khoan}, NH={ngan_hang}",
            nguoi_thuc_hien=username,
            ip=ip,
            device=device,
            scope="PAYMENT_COMPLETE"
        )

        # ======================================================
        # ‚úÖ TR·∫¢ K·∫æT QU·∫¢
        # ======================================================
        return jsonify({
            "success": True,
            "message": f"Thanh to√°n th√†nh c√¥ng qua {phuong_thuc}.",
            "transaction_id": txid_real,
            "pdf": pdf_path
        })

    except Exception as e:
        conn.rollback()
        print("[ERROR] ‚ùå pay_salary_verify:", e)
        import traceback; traceback.print_exc()
        return jsonify({"success": False, "message": f"L·ªói khi ho√†n t·∫•t thanh to√°n: {e}"}), 500

    finally:
        cursor.close()
        conn.close()

# ============================================================
# üè¶ L·∫§Y TH√îNG TIN NG√ÇN H√ÄNG / PH∆Ø∆†NG TH·ª®C M·∫∂C ƒê·ªäNH C·ª¶A NH√ÇN VI√äN
# ============================================================
@salary_bp.route("/employee/bank-info/<ma_nv>", methods=["GET"])
@require_role("admin", "hr")
def get_employee_bank_info(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT 
                ISNULL(SoTaiKhoan, '') AS SoTaiKhoan,
                ISNULL(NganHang, '') AS NganHang,
                ISNULL(PhuongThucMacDinh, '') AS PhuongThucMacDinh
            FROM NhanVien
            WHERE MaNV = ?
        """, (ma_nv,))
        row = cursor.fetchone()

        if not row:
            return jsonify({"success": False, "message": "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n."}), 404

        so_tk, ngan_hang, phuong_thuc = row

        # üßæ Ghi log truy v·∫•n
        try:
            ghi_lich_su(
                ten_bang="NhanVien",
                ma_ban_ghi=ma_nv,
                hanh_dong="Xem th√¥ng tin ng√¢n h√†ng",
                gia_tri_moi=f"SoTK={so_tk}, NH={ngan_hang}, PT={phuong_thuc}",
                nguoi_thuc_hien=session.get("username", "H·ªá th·ªëng"),
                ip=request.remote_addr,
                device=request.user_agent.string,
                scope="BANK_INFO_VIEW"
            )
        except Exception as log_err:
            print(f"[WARN] ‚ö†Ô∏è Kh√¥ng th·ªÉ ghi log bank-info: {log_err}")

        return jsonify({
            "success": True,
            "so_tai_khoan": so_tk,
            "ngan_hang": ngan_hang,
            "phuong_thuc": phuong_thuc
        })

    except Exception as e:
        print("[ERROR] ‚ùå get_employee_bank_info:", e)
        import traceback; traceback.print_exc()
        return jsonify({"success": False, "message": f"L·ªói khi truy xu·∫•t th√¥ng tin ng√¢n h√†ng: {e}"}), 500

    finally:
        cursor.close()
        conn.close()

# ============================================================
# ‚ôªÔ∏è HO√ÄN TI·ªÄN GI·∫¢ L·∫¨P CHO GIAO D·ªäCH L∆Ø∆†NG
# ============================================================
@salary_bp.route("/admin/refund/<ma_gd>", methods=["POST"])
@require_role("admin")
def refund_transaction(ma_gd):
    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")
    user_id = session.get("user_id", 1)
    ip = request.remote_addr
    device = request.user_agent.string[:500]

    try:
        # ======================================================
        # üîç L·∫§Y GIAO D·ªäCH G·ªêC
        # ======================================================
        cursor.execute("""
            SELECT MaLuong, MaNV, SoTien, PhuongThuc, PhiGiaoDich, TrangThai
            FROM GiaoDichLuong WHERE MaGiaoDich = ?
        """, (ma_gd,))
        r = cursor.fetchone()
        if not r:
            return jsonify({"success": False, "message": "Kh√¥ng t√¨m th·∫•y giao d·ªãch."}), 404

        ma_luong, ma_nv, so_tien, phuong_thuc, phi, trangthai = r

        if trangthai != "Th√†nh c√¥ng":
            return jsonify({"success": False, "message": "Giao d·ªãch ch∆∞a ho√†n t·∫•t ho·∫∑c ƒë√£ ho√†n ti·ªÅn."}), 400

        ma_gd_refund = payment_utils.generate_txid(prefix="RFND")

        # ======================================================
        # üí∏ T·∫†O B·∫¢N GHI HO√ÄN TI·ªÄN
        # ======================================================
        noi_dung = f"Ho√†n ti·ªÅn cho giao d·ªãch {ma_gd} ({ma_nv})"
        cursor.execute("""
            INSERT INTO GiaoDichLuong 
                (MaLuong, MaNV, SoTien, PhuongThuc, PhiGiaoDich,
                 NoiDung, NgayGiaoDich, TrangThai, MaGiaoDich, NguoiThucHien)
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?, ?, ?)
        """, (
            ma_luong,
            ma_nv,
            -abs(float(so_tien)),       # √¢m ƒë·ªÉ bi·ªÉu di·ªÖn ho√†n ti·ªÅn
            phuong_thuc,                # ho√†n ƒë√∫ng k√™nh g·ªëc
            float(phi),
            noi_dung,
            "Refunded",
            ma_gd_refund,
            username
        ))

        # ======================================================
        # üíæ C·∫¨P NH·∫¨T GIAO D·ªäCH G·ªêC + B·∫¢NG L∆Ø∆†NG
        # ======================================================
        cursor.execute("""
            UPDATE GiaoDichLuong
            SET TrangThai = 'Refunded'
            WHERE MaGiaoDich = ?
        """, (ma_gd,))

        cursor.execute("""
            UPDATE Luong
            SET TrangThai = 0,
                NgayThanhToan = NULL,
                NguoiThanhToan = NULL,
                PhuongThucChiTra = NULL,
                PhiGiaoDich = NULL,
                GhiChu = CONCAT(N'ƒê√£ ho√†n ti·ªÅn cho giao d·ªãch ', ?),
                DaXoa = 0
            WHERE MaLuong = ?
        """, (ma_gd_refund, ma_luong))
        conn.commit()

        # ======================================================
        # üßæ T·∫†O BI√äN LAI HO√ÄN TI·ªÄN (PDF)
        # ======================================================
        cursor.execute("SELECT HoTen, Email FROM NhanVien WHERE MaNV = ?", (ma_nv,))
        nv = cursor.fetchone()
        ten_nv, email_to = nv if nv else ("", None)

        signature_path = os.path.join(current_app.root_path, "static", "images", "signature_fake.png")
        pdf_path = payment_utils.generate_salary_pdf(
            ma_gd_refund,
            ma_nv,
            ten_nv,
            Decimal(str(abs(so_tien))),  # s·ªë ti·ªÅn d∆∞∆°ng trong bi√™n lai
            phuong_thuc,
            Decimal(str(phi)),
            file_path=None,
            signature_img_path=signature_path,
            is_refund=True  # n·∫øu generate_salary_pdf h·ªó tr·ª£ flag n√†y
        )

        cursor.execute("""
            UPDATE GiaoDichLuong
            SET NoiDung = CONCAT(ISNULL(NoiDung,''), ' | PDF=', ?)
            WHERE MaGiaoDich = ?
        """, (pdf_path, ma_gd_refund))
        conn.commit()

        # ======================================================
        # ‚úâÔ∏è G·ª¨I EMAIL X√ÅC NH·∫¨N HO√ÄN TI·ªÄN
        # ======================================================
        if email_to:
            subject = f"[Refund] X√°c nh·∫≠n ho√†n ti·ªÅn l∆∞∆°ng - M√£ {ma_gd_refund}"
            body = (
                f"Xin ch√†o {ten_nv or ma_nv},\n\n"
                f"H·ªá th·ªëng FaceID ƒë√£ ho√†n ti·ªÅn l∆∞∆°ng cho giao d·ªãch {ma_gd}.\n"
                f"S·ªë ti·ªÅn ho√†n: {abs(float(so_tien)):,}ƒë qua {phuong_thuc}.\n"
                f"Vui l√≤ng xem bi√™n lai ƒë√≠nh k√®m.\n\n"
                f"Tr√¢n tr·ªçng,\nFaceID System"
            )
            ok, _ = send_email_with_attachment(email_to, subject, body, attachment_path=pdf_path)

            cursor.execute("""
                INSERT INTO LichSuEmail (MaTK, EmailTo, LoaiThongBao, ThoiGian, TrangThai, MaThamChieu)
                VALUES (?, ?, ?, GETDATE(), ?, ?)
            """, (user_id, email_to, 'PAYMENT_REFUND', 1 if ok else 0, ma_luong))
            conn.commit()

        # ======================================================
        # üß† GHI L·ªäCH S·ª¨ H·ªÜ TH·ªêNG
        # ======================================================
        ghi_lich_su(
            ten_bang="GiaoDichLuong",
            ma_ban_ghi=ma_gd_refund,
            hanh_dong="Ho√†n ti·ªÅn gi·∫£ l·∫≠p",
            gia_tri_moi=f"Ho√†n {abs(float(so_tien)):,}ƒë cho {ma_nv} (m√£ {ma_luong}) - refund {ma_gd_refund}",
            nguoi_thuc_hien=username,
            ip=ip,
            device=device,
            scope="REFUND"
        )

        ghi_lich_su(
            ten_bang="Luong",
            ma_ban_ghi=ma_luong,
            hanh_dong="Ho√†n ti·ªÅn l∆∞∆°ng",
            gia_tri_moi=f"Chuy·ªÉn v·ªÅ tr·∫°ng th√°i ch∆∞a thanh to√°n (refund {ma_gd_refund})",
            nguoi_thuc_hien=username,
            ip=ip,
            device=device,
            scope="REFUND_STATE"
        )

        conn.commit()

        print(f"[REFUND] ‚úÖ Ho√†n ti·ªÅn th√†nh c√¥ng cho {ma_nv} | M√£ ho√†n: {ma_gd_refund}")

        return jsonify({
            "success": True,
            "message": "Ho√†n ti·ªÅn gi·∫£ l·∫≠p th√†nh c√¥ng.",
            "refund_id": ma_gd_refund,
            "pdf": pdf_path
        })

    except Exception as e:
        conn.rollback()
        print("[ERROR] ‚ùå refund_transaction:", e)
        import traceback; traceback.print_exc()
        return jsonify({"success": False, "message": f"L·ªói khi ho√†n ti·ªÅn: {e}"}), 500

    finally:
        cursor.close()
        conn.close()
