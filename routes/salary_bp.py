from flask import Blueprint, render_template, jsonify, session, request, redirect, url_for, flash
from datetime import datetime, date
from core.db_utils import get_sql_connection
from core.salary_utils import tinh_luong_nv, get_tham_so_luong
from core.decorators import require_role


salary_bp = Blueprint("salary_bp", __name__)

# ============================================================
# üí∞ TRANG XEM L∆Ø∆†NG (Admin + HR)
# ============================================================
@salary_bp.route("/salary")
@require_role("admin", "hr")
def salary_view():
    conn = get_sql_connection()
    conn.rollback()   # ‚úÖ reset transaction l·ªói c≈©
    cursor = conn.cursor()
    role = session.get("role", "admin")

    # üîπ X√°c ƒë·ªãnh th√°ng - nƒÉm hi·ªán t·∫°i
    today = datetime.now()
    year = today.year
    month = today.month
    print(f"[DEBUG] Xem l∆∞∆°ng cho: {year}-{month:02d}")

    # üü¢ T·ªïng s·ªë nh√¢n vi√™n ƒëang ho·∫°t ƒë·ªông
    cursor.execute("SELECT COUNT(*) FROM NhanVien WHERE TrangThai = 1")
    total_employees = cursor.fetchone()[0] or 0

    # üü¢ S·ªë nh√¢n vi√™n ƒë√£ c√≥ l∆∞∆°ng th√°ng n√†y
    cursor.execute("""
        SELECT COUNT(DISTINCT L.MaNV)
        FROM Luong L
        JOIN NhanVien NV ON L.MaNV = NV.MaNV
        WHERE YEAR(L.ThangNam) = ? 
          AND MONTH(L.ThangNam) = ?
          AND L.DaXoa = 1
          AND L.TrangThai = 1
          AND NV.TrangThai = 1
    """, (year, month))
    total_salaried = cursor.fetchone()[0] or 0

    # üü¢ S·ªë nh√¢n vi√™n ch∆∞a c√≥ l∆∞∆°ng
    total_unsalaried = max(total_employees - total_salaried, 0)

    # üü¢ T·ªïng qu·ªπ l∆∞∆°ng th√°ng n√†y
    cursor.execute("""
        SELECT SUM(L.TongTien)
        FROM Luong L
        JOIN NhanVien NV ON L.MaNV = NV.MaNV
        WHERE YEAR(L.ThangNam) = ? 
          AND MONTH(L.ThangNam) = ?
          AND L.DaXoa = 1
          AND L.TrangThai = 1
          AND NV.TrangThai = 1
    """, (year, month))
    total_salary = cursor.fetchone()[0] or 0

    # üü¢ Danh s√°ch chi ti·∫øt l∆∞∆°ng nh√¢n vi√™n
    cursor.execute("""
        SELECT 
            NV.MaNV,
            NV.HoTen,
            PB.TenPB AS PhongBan,
            ISNULL(L.SoGioLam, 0) AS SoGioLam,
            ISNULL(L.TongTien, 0) AS TongTien,
            ISNULL(L.TrangThai, 0) AS TrangThai,
            ISNULL(L.DaXoa, 1) AS DaXoa
        FROM NhanVien NV
        LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
        LEFT JOIN Luong L 
            ON NV.MaNV = L.MaNV 
            AND YEAR(L.ThangNam) = ? 
            AND MONTH(L.ThangNam) = ?
            AND (L.DaXoa = 1 OR L.DaXoa IS NULL)
        WHERE NV.TrangThai = 1
        ORDER BY NV.MaNV
    """, (year, month))

    cols = [c[0] for c in cursor.description]
    salaries = [dict(zip(cols, row)) for row in cursor.fetchall()]
    conn.close()

    template_name = "hr_salary.html" if role == "hr" else "salary.html"

    return render_template(
        template_name,
        total_employees=total_employees,
        total_salaried=total_salaried,
        total_unsalaried=total_unsalaried,
        total_salary=total_salary,
        salaries=salaries,
        current_month=f"{month:02d}",
        current_year=str(year),
        role=role
    )
# ============================================================
# üí∞ T√çNH L∆Ø∆†NG TO√ÄN B·ªò NH√ÇN VI√äN
# ============================================================
@salary_bp.route("/calculate_salary")
@require_role("admin", "hr")
def calculate_all_salary():
    conn = get_sql_connection()
    cursor = conn.cursor()
    nguoi_tinh = session.get("username", "H·ªá th·ªëng")
    thang_nam = date.today().replace(day=1)

    try:
        cursor.execute("SELECT MaNV FROM NhanVien WHERE TrangThai = 1")
        nhanvien = cursor.fetchall()
        if not nhanvien:
            return jsonify({"success": False, "message": "‚ö†Ô∏è Kh√¥ng c√≥ nh√¢n vi√™n n√†o trong h·ªá th·ªëng."})

        da_tinh = 0
        loi_list = []

        for (ma_nv,) in nhanvien:
            try:
                tinh_luong_nv(cursor, ma_nv, thang_nam, nguoi_tinh, save_to_db=True, return_detail=False)
                da_tinh += 1
            except Exception as e:
                loi_list.append(f"{ma_nv}: {e}")
                print(f"[ERROR] ‚ùå L·ªói khi t√≠nh l∆∞∆°ng {ma_nv}: {e}")

        conn.commit()

        if loi_list:
            msg = f"‚ö†Ô∏è ƒê√£ t√≠nh xong {da_tinh}/{len(nhanvien)} nh√¢n vi√™n, nh∆∞ng c√≥ {len(loi_list)} l·ªói:\n" + "\n".join(loi_list)
            return jsonify({"success": False, "message": msg})
        else:
            return jsonify({
                "success": True,
                "message": f"‚úÖ ƒê√£ t√≠nh l∆∞∆°ng th√†nh c√¥ng cho {da_tinh}/{len(nhanvien)} nh√¢n vi√™n!"
            })

    except Exception as e:
        conn.rollback()
        print(f"[FATAL] ‚ùå L·ªói to√†n h·ªá th·ªëng khi t√≠nh l∆∞∆°ng: {e}")
        return jsonify({
            "success": False,
            "message": f"‚ùå L·ªói khi t√≠nh l∆∞∆°ng to√†n h·ªá th·ªëng: {str(e)}"
        })
    finally:
        cursor.close()
        conn.close()


# ============================================================
# üí∞ T√çNH L∆Ø∆†NG CHO 1 NH√ÇN VI√äN
# ============================================================
@salary_bp.route("/calculate_salary/<ma_nv>")
@require_role("admin", "hr")
def calculate_salary_for_one(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()
    nguoi_tinh = session.get("username", "H·ªá th·ªëng")
    thang_nam = date.today().replace(day=1)

    try:
        tong_gio, tong_tien, _ = tinh_luong_nv(
            cursor, ma_nv, thang_nam, nguoi_tinh, save_to_db=True, return_detail=True
        )
        conn.commit()
        print(f"‚úÖ T√≠nh l∆∞∆°ng th√†nh c√¥ng cho {ma_nv}: {tong_gio:.2f} gi·ªù, {tong_tien:,.0f} VND")
        return jsonify({
            "success": True,
            "message": f"‚úÖ ƒê√£ t√≠nh l∆∞∆°ng cho {ma_nv}: {tong_gio:.2f} gi·ªù, {tong_tien:,.0f} VND"
        })
    except Exception as e:
        conn.rollback()
        print(f"[ERROR] ‚ùå L·ªói khi t√≠nh l∆∞∆°ng {ma_nv}: {e}")
        return jsonify({
            "success": False,
            "message": f"‚ùå L·ªói khi t√≠nh l∆∞∆°ng {ma_nv}: {str(e)}"
        })
    finally:
        cursor.close()
        conn.close()


# ============================================================
# üí∞ XEM CHI TI·∫æT L∆Ø∆†NG 1 NH√ÇN VI√äN
# ============================================================
@salary_bp.route("/salary/<ma_nv>")
@require_role("admin", "hr")
def salary_detail(ma_nv):
    """
    Trang xem chi ti·∫øt l∆∞∆°ng c·ªßa 1 nh√¢n vi√™n trong th√°ng hi·ªán t·∫°i.
    - G·ªçi h√†m t√≠nh l∆∞∆°ng (ch·ªâ xem, kh√¥ng l∆∞u DB)
    - Hi·ªÉn th·ªã chi ti·∫øt c√°c ca l√†m vi·ªác, ph·ª• c·∫•p, thu·∫ø, t·ªïng l∆∞∆°ng th·ª±c nh·∫≠n
    """

    conn = get_sql_connection()
    cursor = conn.cursor()
    role = session.get("role", "admin")
    thang_nam = date.today().replace(day=1)
    nguoi_xem = session.get("username", "H·ªá th·ªëng")

    try:
        # ============================================================
        # 1Ô∏è‚É£ L·∫•y th√¥ng tin nh√¢n vi√™n
        # ============================================================
        cursor.execute("""
            SELECT NV.MaNV, NV.HoTen, NV.ChucVu, PB.TenPB
            FROM NhanVien NV
            LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
            WHERE NV.MaNV = ?
        """, (ma_nv,))
        emp = cursor.fetchone()
        if not emp:
            return render_template(
                "error.html",
                message=f"‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n c√≥ m√£ {ma_nv}"
            )

        # ============================================================
        # 2Ô∏è‚É£ G·ªçi h√†m t√≠nh l∆∞∆°ng (ch·ªâ xem, kh√¥ng l∆∞u DB)
        # ============================================================
        tong_gio, tong_tien_thuc, records = tinh_luong_nv(
            cursor,
            ma_nv,
            thang_nam,
            nguoi_xem,
            save_to_db=False,
            return_detail=True
        )

        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng
        if not records:
            return render_template(
                "salary_detail.html",
                emp=emp,
                records=[],
                tong_gio=0,
                tong_tien=0,
                phu_cap=0,
                pit=0,
                tong_tien_thuc=0,
                role_label="Nh√¢n vi√™n",
                role_icon="fa-user text-primary",
                current_month=thang_nam.month,
                current_year=thang_nam.year,
                message="‚ö†Ô∏è Nh√¢n vi√™n n√†y ch∆∞a c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng trong th√°ng."
            )

        # ============================================================
        # 3Ô∏è‚É£ T√≠nh ph·ª• c·∫•p & thu·∫ø ƒë·ªÉ hi·ªÉn th·ªã c√¥ng th·ª©c t·ªïng
        # ============================================================
        params = get_tham_so_luong(cursor)
        phu_cap_xang = params.get("PhuCapXangXe", 500000)
        phu_cap_an = params.get("PhuCapAnTrua", 30000) * len(records)
        phu_cap_khac = params.get("PhuCapKhac", 200000)
        phu_cap = phu_cap_xang + phu_cap_an + phu_cap_khac

        pit = max((tong_tien_thuc - phu_cap) * params.get("PIT_ThueThuNhap", 0.05), 0)
        tong_tien = max(tong_tien_thuc - phu_cap + pit, 0)

        # ============================================================
        # 4Ô∏è‚É£ Ph√¢n lo·∫°i vai tr√≤ (icon + nh√£n ch·ª©c v·ª•)
        # ============================================================
        chucvu = (emp[2] or "").lower()
        if "tr∆∞·ªüng ph√≤ng" in chucvu:
            role_label, role_icon = "Tr∆∞·ªüng ph√≤ng", "fa-star text-warning"
        elif "ph√≥ ph√≤ng" in chucvu:
            role_label, role_icon = "Ph√≥ ph√≤ng", "fa-crown text-info"
        elif "hr" in chucvu:
            role_label, role_icon = "Nh√¢n s·ª±", "fa-users text-success"
        elif "th·ª±c t·∫≠p" in chucvu or "intern" in chucvu:
            role_label, role_icon = "Th·ª±c t·∫≠p sinh", "fa-user-graduate text-secondary"
        else:
            role_label, role_icon = "Nh√¢n vi√™n", "fa-user text-primary"

        # ============================================================
        # 5Ô∏è‚É£ Ch·ªçn template theo vai tr√≤ (HR hay Admin)
        # ============================================================
        template_name = "hr_salary_detail.html" if role == "hr" else "salary_detail.html"

        # ============================================================
        # 6Ô∏è‚É£ Truy·ªÅn to√†n b·ªô bi·∫øn sang template
        # ============================================================
        return render_template(
            template_name,
            emp=emp,
            records=records,
            tong_gio=tong_gio or 0,
            tong_tien=tong_tien or 0,
            phu_cap=phu_cap or 0,
            pit=pit or 0,
            tong_tien_thuc=tong_tien_thuc or 0,
            role_label=role_label,
            role_icon=role_icon,
            current_month=thang_nam.month,
            current_year=thang_nam.year
        )

    except Exception as e:
        print(f"[ERROR] ‚ùå L·ªói khi xem chi ti·∫øt l∆∞∆°ng {ma_nv}: {e}")
        return render_template(
            "error.html",
            message=f"L·ªói khi xem chi ti·∫øt l∆∞∆°ng: {e}"
        )

    finally:
        conn.close()

# ============================================================
# ‚ùå X√ìA M·ªÄM 1 B·∫¢N GHI L∆Ø∆†NG
# ============================================================
@salary_bp.route("/salary/delete/<ma_nv>", methods=["POST"])
@require_role("admin", "hr")
def delete_salary(ma_nv):
    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username", "H·ªá th·ªëng")

    try:
        cursor.execute("UPDATE Luong SET DaXoa = 0 WHERE MaNV = ?", (ma_nv,))
        cursor.execute("""
            INSERT INTO LichSuThayDoi (
                TenBang, MaBanGhi, HanhDong, TruongThayDoi,
                GiaTriCu, GiaTriMoi, ThoiGian, NguoiThucHien
            )
            VALUES (?, ?, ?, ?, ?, ?, GETDATE(), ?)
        """, ("Luong", ma_nv, "X√≥a m·ªÅm", "DaXoa", 1, 0, username))
        conn.commit()
        flash(f"üóëÔ∏è ƒê√£ x√≥a m·ªÅm l∆∞∆°ng c·ªßa nh√¢n vi√™n {ma_nv}!", "success")
    except Exception as e:
        conn.rollback()
        flash(f"‚ùå L·ªói khi x√≥a m·ªÅm: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("salary_bp.salary_view"))

# ============================================================
# üóëÔ∏è X√ìA NHI·ªÄU B·∫¢N L∆Ø∆†NG
# ============================================================
@salary_bp.route("/delete_multiple_salary", methods=["POST"])
@require_role("admin", "hr")
def delete_multiple_salary():
    selected_ids = request.form.getlist("selected_ids")  # danh s√°ch c√°c MaLuong ƒë∆∞·ª£c ch·ªçn

    if not selected_ids:
        flash("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt b·∫£n l∆∞∆°ng ƒë·ªÉ x√≥a.", "warning")
        return redirect(url_for("salary_bp.salary_view"))

    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        for ma_luong in selected_ids:
            cursor.execute("UPDATE Luong SET DaXoa = 1 WHERE MaLuong = ?", (ma_luong,))
        conn.commit()
        flash(f"ƒê√£ x√≥a {len(selected_ids)} b·∫£n l∆∞∆°ng.", "success")
    except Exception as e:
        conn.rollback()
        flash(f"L·ªói khi x√≥a nhi·ªÅu b·∫£n l∆∞∆°ng: {e}", "danger")
    finally:
        conn.close()

    return redirect(url_for("salary_bp.salary_view"))

# ============================================================
# üìã DANH S√ÅCH L∆Ø∆†NG ƒê√É X√ìA
# ============================================================
@salary_bp.route("/salary/deleted")
@require_role("admin")
def deleted_salaries():
    conn = get_sql_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT 
                L.MaLuong,
                NV.MaNV,
                NV.HoTen,
                PB.TenPB,
                L.SoGioLam,
                L.TongTien,
                CONVERT(varchar(7), L.ThangNam, 126) AS ThangNam   -- ‚úÖ an to√†n h∆°n FORMAT()
            FROM Luong L
            JOIN NhanVien NV ON L.MaNV = NV.MaNV
            LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
            WHERE L.DaXoa = 0
            ORDER BY L.ThangNam DESC
        """)
        rows = cursor.fetchall()
        cols = [c[0] for c in cursor.description]
        deleted_salaries = [dict(zip(cols, row)) for row in rows]
    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫£i danh s√°ch l∆∞∆°ng ƒë√£ x√≥a: {e}", "error")
        deleted_salaries = []
    finally:
        conn.close()

    return render_template(
        "deleted_records.html",
        deleted_salaries=deleted_salaries,
        active_tab="salary"
    )

@salary_bp.route("/salary_rules")
@require_role("admin", "hr", "manager", "employee")
def salary_rules():
    """Hi·ªÉn th·ªã trang quy t·∫Øc t√≠nh l∆∞∆°ng theo vai tr√≤"""
    role = session.get("role", "employee")

    # üü¢ Ch·ªçn file template ph√π h·ª£p
    if role == "hr":
        template_name = "hr_salary_rules.html"
    else:
        template_name = "salary_rules.html"

    return render_template(template_name)
