# reports_bp.py
from flask import Blueprint, render_template, session
from datetime import datetime
from core.db_utils import get_sql_connection
from core.decorators import require_role
from flask import Blueprint, send_file
from core.decorators import require_role
import io
from docx import Document
from openpyxl import Workbook

reports_bp = Blueprint("reports_bp", __name__)


# ======================================================
# üìä 1. B√ÅO C√ÅO TH·ªêNG K√ä (ADMIN)
# ======================================================
@reports_bp.route('/reports')
@require_role("admin")
def reports_view():
    conn = get_sql_connection()
    cursor = conn.cursor()

    # --- 1. Danh s√°ch nh√¢n vi√™n ---
    cursor.execute("""
        SELECT NV.*, PB.TenPB,
               CASE NV.TrangThai 
                   WHEN 1 THEN N'ƒêang ho·∫°t ƒë·ªông'
                   ELSE N'Ng·ª´ng ho·∫°t ƒë·ªông'
               END AS TrangThaiText
        FROM NhanVien NV
        LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
    """)
    columns = [col[0] for col in cursor.description]
    employees = [dict(zip(columns, row)) for row in cursor.fetchall()]

    # --- 2. Danh s√°ch ph√≤ng ban ---
    cursor.execute("""
        SELECT PB.MaPB, PB.TenPB,
               COUNT(NV.MaNV) AS SoNhanVien,
               CASE 
                   WHEN LTRIM(RTRIM(LOWER(PB.TrangThai))) IN 
                        (N'ƒëang ho·∫°t ƒë·ªông', N'active', N'1') 
                        THEN N'ƒêang ho·∫°t ƒë·ªông'
                   ELSE N'Ng·ª´ng ho·∫°t ƒë·ªông'
               END AS TrangThaiText
        FROM PhongBan PB
        LEFT JOIN NhanVien NV ON PB.MaPB = NV.MaPB
        GROUP BY PB.MaPB, PB.TenPB, PB.TrangThai
        ORDER BY PB.MaPB
    """)
    columns_pb = [col[0] for col in cursor.description]
    departments = [dict(zip(columns_pb, row)) for row in cursor.fetchall()]

    # --- 3. Th·ªëng k√™ ---
    total_employees = len(employees)
    total_departments = len(departments)

    cursor.execute("""
        SELECT 
            COUNT(DISTINCT MaNV) AS SoNhanVienCoLuong,
            SUM(TongTien) AS TongLuong,
            AVG(TongTien) AS LuongTrungBinh
        FROM Luong
        WHERE TrangThai = 1 AND DaXoa = 1
    """)
    salary_stats = cursor.fetchone()
    total_salary = salary_stats[1] or 0
    avg_salary = salary_stats[2] or 0

    cursor.execute("SELECT AVG(DATEDIFF(hour, GioVao, GioRa)) FROM ChamCong WHERE TrangThai = 1")
    avg_hours_per_week = cursor.fetchone()[0] or 0

    status_counts = {'ƒêang ho·∫°t ƒë·ªông': 0, 'Ng·ª´ng ho·∫°t ƒë·ªông': 0}
    for emp in employees:
        status_counts[emp['TrangThaiText']] += 1

    dept_counts, gender_counts = {}, {'Nam': 0, 'N·ªØ': 0}
    for emp in employees:
        dept_counts[emp.get('TenPB') or 'Ch∆∞a ph√¢n c√¥ng'] = dept_counts.get(emp.get('TenPB') or 'Ch∆∞a ph√¢n c√¥ng', 0) + 1
        if emp.get('GioiTinh') == 1:
            gender_counts['Nam'] += 1
        else:
            gender_counts['N·ªØ'] += 1

    cursor.execute("""
        SELECT CL.TenCa, COUNT(LLV.MaNV)
        FROM LichLamViec LLV
        JOIN CaLamViec CL ON LLV.MaCa = CL.MaCa
        GROUP BY CL.TenCa
    """)
    shift_counts = dict(cursor.fetchall())
    conn.close()

    return render_template(
        'reports.html',
        employees=employees,
        departments=departments,
        total_employees=total_employees,
        total_departments=total_departments,
        avg_hours_per_week=avg_hours_per_week,
        total_salary=total_salary,
        avg_salary=avg_salary,
        status_counts=status_counts,
        dept_counts=dept_counts,
        gender_counts=gender_counts,
        shift_counts=shift_counts
    )


# ======================================================
# üìä 2. B√ÅO C√ÅO HR
# ======================================================
@reports_bp.route('/hr/reports')
@require_role("hr")
def hr_reports_view():
    conn = get_sql_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT NV.MaNV, NV.HoTen, NV.Email, NV.GioiTinh, NV.TrangThai,
            PB.TenPB, NV.ChucVu
        FROM NhanVien NV
        LEFT JOIN PhongBan PB ON NV.MaPB = PB.MaPB
        WHERE NV.TrangThai IN (0, 1)
    """)
    columns = [col[0] for col in cursor.description]
    employees = [dict(zip(columns, row)) for row in cursor.fetchall()]

    cursor.execute("""
        SELECT PB.MaPB, PB.TenPB,
               COUNT(NV.MaNV) AS SoNhanVien,
               CASE 
                   WHEN PB.TrangThai = 1 THEN N'ƒêang ho·∫°t ƒë·ªông'
                   ELSE N'Ng·ª´ng ho·∫°t ƒë·ªông'
               END AS TrangThaiText
        FROM PhongBan PB
        LEFT JOIN NhanVien NV ON PB.MaPB = NV.MaPB
        GROUP BY PB.MaPB, PB.TenPB, PB.TrangThai
        ORDER BY PB.MaPB
    """)
    columns_pb = [col[0] for col in cursor.description]
    departments = [dict(zip(columns_pb, row)) for row in cursor.fetchall()]

    total_employees = len(employees)
    total_departments = len(departments)

    cursor.execute("""
        SELECT COUNT(*) AS TongCong,
               SUM(CASE WHEN TrangThai = 1 THEN 1 ELSE 0 END) AS DiLam
        FROM ChamCong
        WHERE DaXoa = 1
    """)
    row = cursor.fetchone()
    attendance_rate = round((row[1] or 0) / (row[0] or 1) * 100, 2)

    cursor.execute("""
        SELECT AVG(DATEDIFF(HOUR, GioVao, GioRa))
        FROM ChamCong
        WHERE GioVao IS NOT NULL AND GioRa IS NOT NULL
    """)
    avg_hours_per_week = round(cursor.fetchone()[0] or 0, 1)

    cursor.execute("SELECT COUNT(*) FROM CaLamViec WHERE TrangThai = 1")
    total_shifts = cursor.fetchone()[0] or 0

    cursor.execute("SELECT SUM(TongTien) FROM Luong WHERE TrangThai = 1 AND DaXoa = 1")
    total_salary = int(cursor.fetchone()[0] or 0)

    # Bi·ªÉu ƒë·ªì
    status_counts = {'ƒêang ho·∫°t ƒë·ªông': 0, 'Ng·ª´ng ho·∫°t ƒë·ªông': 0}
    gender_counts = {'Nam': 0, 'N·ªØ': 0}
    dept_counts = {}

    for emp in employees:
        if emp.get("TrangThai") == 1:
            status_counts['ƒêang ho·∫°t ƒë·ªông'] += 1
        else:
            status_counts['Ng·ª´ng ho·∫°t ƒë·ªông'] += 1

        if emp.get("GioiTinh") == 1:
            gender_counts['Nam'] += 1
        else:
            gender_counts['N·ªØ'] += 1

        dept_name = emp.get("TenPB") or "Ch∆∞a ph√¢n c√¥ng"
        dept_counts[dept_name] = dept_counts.get(dept_name, 0) + 1

    cursor.execute("""
        SELECT CLV.TenCa, COUNT(LLV.MaNV)
        FROM LichLamViec LLV
        JOIN CaLamViec CLV ON LLV.MaCa = CLV.MaCa
        GROUP BY CLV.TenCa
    """)
    shift_counts = dict(cursor.fetchall())
    conn.close()

    return render_template(
        'hr_reports.html',
        employees=employees,
        departments=departments,
        total_employees=total_employees,
        total_departments=total_departments,
        attendance_rate=attendance_rate,
        avg_hours_per_week=avg_hours_per_week,
        total_shifts=total_shifts,
        total_salary=total_salary,
        status_counts=status_counts,
        gender_counts=gender_counts,
        dept_counts=dept_counts,
        shift_counts=shift_counts
    )
# ======================================================
# üìä B√ÅO C√ÅO NH√ÇN S·ª∞ & CH·∫§M C√îNG CHO QU·∫¢N L√ù PH√íNG BAN
# ======================================================
@reports_bp.route("/qlpb/reports")
@require_role("quanlyphongban")
def qlpb_reports_view():
    conn = get_sql_connection()
    cursor = conn.cursor()
    username = session.get("username")

    # üîπ 1Ô∏è‚É£ X√°c ƒë·ªãnh m√£ ph√≤ng ban c·ªßa qu·∫£n l√Ω
    cursor.execute("""
        SELECT NV.MaPB
        FROM NhanVien NV
        JOIN TaiKhoan TK ON NV.MaNV = TK.MaNV
        WHERE TK.TenDangNhap = ?
    """, (username,))
    row = cursor.fetchone()
    ma_pb_user = row[0] if row else None

    if not ma_pb_user:
        flash("‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng ban c·ªßa qu·∫£n l√Ω!", "danger")
        return redirect(url_for("qlpb_bp.qlpb_dashboard"))

    # üîπ 2Ô∏è‚É£ L·∫•y danh s√°ch nh√¢n vi√™n thu·ªôc ph√≤ng ban ƒë√≥
    cursor.execute("""
        SELECT NV.MaNV, NV.HoTen, NV.Email, NV.GioiTinh, 
               PB.TenPB, NV.TrangThai,
               CASE NV.TrangThai 
                   WHEN 1 THEN N'ƒêang l√†m vi·ªác'
                   ELSE N'Ng·ª´ng l√†m vi·ªác'
               END AS TrangThaiText
        FROM NhanVien NV
        JOIN PhongBan PB ON NV.MaPB = PB.MaPB
        WHERE NV.MaPB = ?
    """, (ma_pb_user,))
    columns = [col[0] for col in cursor.description]
    employees = [dict(zip(columns, row)) for row in cursor.fetchall()]

    # üîπ 3Ô∏è‚É£ T·ªïng s·ªë nh√¢n vi√™n
    total_employees = len(employees)

    # üîπ 4Ô∏è‚É£ Th·ªëng k√™ ch·∫•m c√¥ng trong th√°ng hi·ªán t·∫°i
    cursor.execute("""
        SELECT 
            SUM(CASE WHEN LLV.TrangThai = 1 THEN 1 ELSE 0 END) AS SoCaDiLam,
            SUM(CASE WHEN LLV.TrangThai = 2 THEN 1 ELSE 0 END) AS SoCaVang,
            COUNT(*) AS TongCa
        FROM LichLamViec LLV
        JOIN NhanVien NV ON LLV.MaNV = NV.MaNV
        WHERE NV.MaPB = ? 
          AND MONTH(LLV.NgayLam) = MONTH(GETDATE())
          AND YEAR(LLV.NgayLam) = YEAR(GETDATE())
    """, (ma_pb_user,))
    stats = cursor.fetchone()
    so_ca_di_lam = stats[0] or 0
    so_ca_vang = stats[1] or 0
    tong_ca = stats[2] or 0

    # üîπ 5Ô∏è‚É£ T√≠nh t·ª∑ l·ªá ch·∫•m c√¥ng
    attendance_rate = round((so_ca_di_lam / tong_ca * 100), 2) if tong_ca else 0

    # üîπ 6Ô∏è‚É£ Bi·ªÉu ƒë·ªì tr·∫°ng th√°i l√†m vi·ªác
    status_counts = {
        "ƒêang l√†m vi·ªác": sum(1 for e in employees if e["TrangThai"] == 1),
        "Ng·ª´ng l√†m vi·ªác": sum(1 for e in employees if e["TrangThai"] == 0),
    }

    # üîπ 7Ô∏è‚É£ Bi·ªÉu ƒë·ªì gi·ªõi t√≠nh
    gender_counts = {
        "Nam": sum(1 for e in employees if e["GioiTinh"] in (1, "Nam", "nam")),
        "N·ªØ": sum(1 for e in employees if e["GioiTinh"] in (0, "N·ªØ", "nu", "n·ªØ")),
    }

    # üîπ 8Ô∏è‚É£ Bi·ªÉu ƒë·ªì ph√≤ng ban (ch·ªâ 1 ph√≤ng nh∆∞ng v·∫´n hi·ªÉn th·ªã)
    dept_counts = {}
    for e in employees:
            pb = e.get("TenPB") or "Ch∆∞a ph√¢n c√¥ng"
            dept_counts[pb] = dept_counts.get(pb, 0) + 1

        # üîπ 10Ô∏è‚É£ Bi·ªÉu ƒë·ªì s·ªë nh√¢n vi√™n theo ca l√†m
    cursor.execute("""
        SELECT CL.TenCa, COUNT(LLV.MaNV)
        FROM LichLamViec LLV
        JOIN CaLamViec CL ON LLV.MaCa = CL.MaCa
        JOIN NhanVien NV ON NV.MaNV = LLV.MaNV
        WHERE NV.MaPB = ?
        AND MONTH(LLV.NgayLam) = MONTH(GETDATE())
        AND YEAR(LLV.NgayLam) = YEAR(GETDATE())
        GROUP BY CL.TenCa
    """, (ma_pb_user,))
    shift_counts = dict(cursor.fetchall())

    conn.close()

    # üîπ 9Ô∏è‚É£ Tr·∫£ v·ªÅ template
    return render_template(
        "qlpb_reports.html",
        employees=employees,
        total_employees=total_employees,
        so_ca_di_lam=so_ca_di_lam,
        so_ca_vang=so_ca_vang,
        attendance_rate=attendance_rate,
        status_counts=status_counts,
        gender_counts=gender_counts,
        dept_counts=dept_counts,
        shift_counts=shift_counts 
    )


# ============================================================
# üìä XU·∫§T B√ÅO C√ÅO D·∫†NG WORD
# ============================================================
@reports_bp.route("/export_report/word")
@require_role("admin", "hr")
def export_report_word():
    # (D·ªØ li·ªáu m·∫´u, b·∫°n c√≥ th·ªÉ thay b·∫±ng d·ªØ li·ªáu th·∫≠t t·ª´ DB)
    total_employees = 6
    total_departments = 4
    attendance_rate = "96.5%"
    avg_hours = 4
    total_shifts = 1
    total_salary = 0

    # T·∫°o file Word
    doc = Document()
    doc.add_heading("B√ÅO C√ÅO T·ªîNG QUAN H·ªÜ TH·ªêNG", level=1)
    doc.add_paragraph(f"T·ªïng nh√¢n vi√™n: {total_employees}")
    doc.add_paragraph(f"T·ªïng ph√≤ng ban: {total_departments}")
    doc.add_paragraph(f"T·ªâ l·ªá ch·∫•m c√¥ng: {attendance_rate}")
    doc.add_paragraph(f"Gi·ªù trung b√¨nh/Tu·∫ßn: {avg_hours}")
    doc.add_paragraph(f"T·ªïng s·ªë ca: {total_shifts}")
    doc.add_paragraph(f"T·ªïng l∆∞∆°ng: {total_salary:,}")

    # L∆∞u ra b·ªô nh·ªõ t·∫°m
    file_stream = io.BytesIO()
    doc.save(file_stream)
    file_stream.seek(0)

    return send_file(
        file_stream,
        as_attachment=True,
        download_name="BaoCaoTongQuan.docx",
        mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )


# ============================================================
# üìä XU·∫§T B√ÅO C√ÅO D·∫†NG EXCEL
# ============================================================
@reports_bp.route("/export_report/excel")
@require_role("admin", "hr")
def export_report_excel():
    wb = Workbook()
    ws = wb.active
    ws.title = "B√°o c√°o t·ªïng quan"

    ws.append(["Ch·ªâ ti√™u", "Gi√° tr·ªã"])
    ws.append(["T·ªïng nh√¢n vi√™n", 6])
    ws.append(["T·ªïng ph√≤ng ban", 4])
    ws.append(["T·ªâ l·ªá ch·∫•m c√¥ng", "96.5%"])
    ws.append(["Gi·ªù TB/Tu·∫ßn", 4])
    ws.append(["T·ªïng s·ªë ca", 1])
    ws.append(["T·ªïng l∆∞∆°ng", 0])

    # Auto-fit ƒë·ªô r·ªông
    for col in ws.columns:
        max_len = max(len(str(cell.value)) for cell in col)
        ws.column_dimensions[col[0].column_letter].width = max_len + 4

    file_stream = io.BytesIO()
    wb.save(file_stream)
    file_stream.seek(0)

    return send_file(
        file_stream,
        as_attachment=True,
        download_name="BaoCaoTongQuan.xlsx",
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
